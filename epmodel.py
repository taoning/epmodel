# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2023-08-29T18:59:09+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel, ConfigDict


class Version(BaseModel):
    version_identifier: Optional[str] = "23.1"


class DoZoneSizingCalculation(Enum):
    field_ = ""
    no = "No"
    yes = "Yes"


class SimulationControl(BaseModel):
    do_zone_sizing_calculation: Optional[DoZoneSizingCalculation] = "No"
    do_system_sizing_calculation: Optional[DoZoneSizingCalculation] = "No"
    do_plant_sizing_calculation: Optional[DoZoneSizingCalculation] = "No"
    run_simulation_for_sizing_periods: Optional[DoZoneSizingCalculation] = "Yes"
    run_simulation_for_weather_file_run_periods: Optional[
        DoZoneSizingCalculation
    ] = "Yes"
    do_hvac_sizing_simulation_for_sizing_periods: Optional[
        DoZoneSizingCalculation
    ] = "No"
    maximum_number_of_hvac_sizing_simulation_passes: Optional[int] = Field(1, ge=1)


class Terrain(Enum):
    field_ = ""
    city = "City"
    country = "Country"
    ocean = "Ocean"
    suburbs = "Suburbs"
    urban = "Urban"


class SolarDistribution(Enum):
    field_ = ""
    full_exterior = "FullExterior"
    full_exterior_with_reflections = "FullExteriorWithReflections"
    full_interior_and_exterior = "FullInteriorAndExterior"
    full_interior_and_exterior_with_reflections = (
        "FullInteriorAndExteriorWithReflections"
    )
    minimal_shadowing = "MinimalShadowing"


class Building(BaseModel):
    north_axis: Optional[float] = 0.0
    terrain: Optional[Terrain] = "Suburbs"
    loads_convergence_tolerance_value: Optional[float] = Field(0.04, gt=0.0, le=0.5)
    temperature_convergence_tolerance_value: Optional[float] = Field(
        0.4, gt=0.0, le=0.5
    )
    solar_distribution: Optional[SolarDistribution] = "FullExterior"
    maximum_number_of_warmup_days: Optional[int] = Field(25, gt=0)
    minimum_number_of_warmup_days: Optional[int] = Field(1, gt=0)


class ShadingCalculationMethod(Enum):
    field_ = ""
    imported = "Imported"
    pixel_counting = "PixelCounting"
    polygon_clipping = "PolygonClipping"
    scheduled = "Scheduled"


class ShadingCalculationUpdateFrequencyMethod(Enum):
    field_ = ""
    periodic = "Periodic"
    timestep = "Timestep"


class PolygonClippingAlgorithm(Enum):
    field_ = ""
    convex_weiler_atherton = "ConvexWeilerAtherton"
    slater_barskyand_sutherland_hodgman = "SlaterBarskyandSutherlandHodgman"
    sutherland_hodgman = "SutherlandHodgman"


class SkyDiffuseModelingAlgorithm(Enum):
    field_ = ""
    detailed_sky_diffuse_modeling = "DetailedSkyDiffuseModeling"
    simple_sky_diffuse_modeling = "SimpleSkyDiffuseModeling"


class ShadingZoneGroup(BaseModel):
    shading_zone_group_zonelist_name: Optional[str] = None


class ShadowCalculation(BaseModel):
    shading_calculation_method: Optional[ShadingCalculationMethod] = "PolygonClipping"
    shading_calculation_update_frequency_method: Optional[
        ShadingCalculationUpdateFrequencyMethod
    ] = "Periodic"
    shading_calculation_update_frequency: Optional[int] = Field(20, ge=1)
    maximum_figures_in_shadow_overlap_calculations: Optional[int] = Field(15000, ge=200)
    polygon_clipping_algorithm: Optional[PolygonClippingAlgorithm] = "SutherlandHodgman"
    pixel_counting_resolution: Optional[int] = 512
    sky_diffuse_modeling_algorithm: Optional[
        SkyDiffuseModelingAlgorithm
    ] = "SimpleSkyDiffuseModeling"
    output_external_shading_calculation_results: Optional[
        DoZoneSizingCalculation
    ] = "No"
    disable_self_shading_within_shading_zone_groups: Optional[
        DoZoneSizingCalculation
    ] = "No"
    disable_self_shading_from_shading_zone_groups_to_other_zones: Optional[
        DoZoneSizingCalculation
    ] = "No"
    shading_zone_groups: Optional[List[ShadingZoneGroup]] = None


class Algorithm(Enum):
    field_ = ""
    astmc1340 = "ASTMC1340"
    adaptive_convection_algorithm = "AdaptiveConvectionAlgorithm"
    ceiling_diffuser = "CeilingDiffuser"
    simple = "Simple"
    tarp = "TARP"


class SurfaceConvectionAlgorithmInside(BaseModel):
    algorithm: Optional[Algorithm] = "TARP"


class Algorithm1(Enum):
    field_ = ""
    adaptive_convection_algorithm = "AdaptiveConvectionAlgorithm"
    doe_2 = "DOE-2"
    mo_wi_tt = "MoWiTT"
    simple_combined = "SimpleCombined"
    tarp = "TARP"


class SurfaceConvectionAlgorithmOutside(BaseModel):
    algorithm: Optional[Algorithm1] = "DOE-2"


class Algorithm2(Enum):
    field_ = ""
    combined_heat_and_moisture_finite_element = "CombinedHeatAndMoistureFiniteElement"
    conduction_finite_difference = "ConductionFiniteDifference"
    conduction_transfer_function = "ConductionTransferFunction"
    moisture_penetration_depth_conduction_transfer_function = (
        "MoisturePenetrationDepthConductionTransferFunction"
    )


class HeatBalanceAlgorithm(BaseModel):
    algorithm: Optional[Algorithm2] = "ConductionTransferFunction"
    surface_temperature_upper_limit: Optional[float] = Field(200.0, ge=200.0)
    minimum_surface_convection_heat_transfer_coefficient_value: Optional[float] = Field(
        0.1, gt=0.0
    )
    maximum_surface_convection_heat_transfer_coefficient_value: Optional[float] = Field(
        1000.0, ge=1.0
    )


class Algorithm3(Enum):
    field_ = ""
    analytical_solution = "AnalyticalSolution"
    euler_method = "EulerMethod"
    third_order_backward_difference = "ThirdOrderBackwardDifference"


class ZoneAirHeatBalanceAlgorithm(BaseModel):
    algorithm: Optional[Algorithm3] = "ThirdOrderBackwardDifference"
    do_space_heat_balance_for_sizing: Optional[DoZoneSizingCalculation] = "No"
    do_space_heat_balance_for_simulation: Optional[DoZoneSizingCalculation] = "No"


class ZoneAirContaminantBalance(BaseModel):
    carbon_dioxide_concentration: Optional[DoZoneSizingCalculation] = "No"
    outdoor_carbon_dioxide_schedule_name: Optional[str] = None
    generic_contaminant_concentration: Optional[DoZoneSizingCalculation] = "No"
    outdoor_generic_contaminant_schedule_name: Optional[str] = None


class ZoneCapacitanceMultiplierResearchSpecial(BaseModel):
    zone_or_zonelist_name: Optional[str] = None
    temperature_capacity_multiplier: Optional[float] = Field(1.0, gt=0.0)
    humidity_capacity_multiplier: Optional[float] = Field(1.0, gt=0.0)
    carbon_dioxide_capacity_multiplier: Optional[float] = Field(1.0, gt=0.0)
    generic_contaminant_capacity_multiplier: Optional[float] = Field(1.0, gt=0.0)


class Timestep(BaseModel):
    number_of_timesteps_per_hour: Optional[int] = Field(6, ge=1, le=60)


class ConvergenceLimits(BaseModel):
    minimum_system_timestep: Optional[int] = Field(None, ge=0, le=60)
    maximum_hvac_iterations: Optional[int] = Field(20, ge=1)
    minimum_plant_iterations: Optional[int] = Field(2, ge=1)
    maximum_plant_iterations: Optional[int] = Field(8, ge=2)


class SiteLocation(BaseModel):
    latitude: Optional[float] = Field(0.0, ge=-90.0, le=90.0)
    longitude: Optional[float] = Field(0.0, ge=-180.0, le=180.0)
    time_zone: Optional[float] = Field(0.0, ge=-12.0, le=14.0)
    elevation: Optional[float] = Field(0.0, ge=-300.0, lt=8900.0)


class DayType(Enum):
    custom_day1 = "CustomDay1"
    custom_day2 = "CustomDay2"
    friday = "Friday"
    holiday = "Holiday"
    monday = "Monday"
    saturday = "Saturday"
    summer_design_day = "SummerDesignDay"
    sunday = "Sunday"
    thursday = "Thursday"
    tuesday = "Tuesday"
    wednesday = "Wednesday"
    winter_design_day = "WinterDesignDay"


class DryBulbTemperatureRangeModifierType(Enum):
    field_ = ""
    default_multipliers = "DefaultMultipliers"
    difference_schedule = "DifferenceSchedule"
    multiplier_schedule = "MultiplierSchedule"
    temperature_profile_schedule = "TemperatureProfileSchedule"


class HumidityConditionType(Enum):
    field_ = ""
    dew_point = "DewPoint"
    enthalpy = "Enthalpy"
    humidity_ratio = "HumidityRatio"
    relative_humidity_schedule = "RelativeHumiditySchedule"
    wet_bulb = "WetBulb"
    wet_bulb_profile_default_multipliers = "WetBulbProfileDefaultMultipliers"
    wet_bulb_profile_difference_schedule = "WetBulbProfileDifferenceSchedule"
    wet_bulb_profile_multiplier_schedule = "WetBulbProfileMultiplierSchedule"


class SolarModelIndicator(Enum):
    field_ = ""
    ashrae_clear_sky = "ASHRAEClearSky"
    ashrae_tau = "ASHRAETau"
    ashrae_tau2017 = "ASHRAETau2017"
    schedule = "Schedule"
    zhang_huang = "ZhangHuang"


class BeginEnvironmentResetMode(Enum):
    field_ = ""
    full_reset_at_begin_environment = "FullResetAtBeginEnvironment"
    suppress_all_begin_environment_resets = "SuppressAllBeginEnvironmentResets"


class SizingPeriodDesignDay(BaseModel):
    month: int = Field(..., ge=1, le=12)
    day_of_month: int = Field(..., ge=1, le=31)
    day_type: DayType
    maximum_dry_bulb_temperature: Optional[float] = Field(None, ge=-90.0, le=70.0)
    daily_dry_bulb_temperature_range: Optional[float] = Field(0.0, ge=0.0)
    dry_bulb_temperature_range_modifier_type: Optional[
        DryBulbTemperatureRangeModifierType
    ] = "DefaultMultipliers"
    dry_bulb_temperature_range_modifier_day_schedule_name: Optional[str] = None
    humidity_condition_type: Optional[HumidityConditionType] = "WetBulb"
    wetbulb_or_dewpoint_at_maximum_dry_bulb: Optional[float] = None
    humidity_condition_day_schedule_name: Optional[str] = None
    humidity_ratio_at_maximum_dry_bulb: Optional[float] = None
    enthalpy_at_maximum_dry_bulb: Optional[float] = None
    daily_wet_bulb_temperature_range: Optional[float] = None
    barometric_pressure: Optional[float] = Field(None, ge=31000.0, le=120000.0)
    wind_speed: float = Field(..., ge=0.0, le=40.0)
    wind_direction: float = Field(..., ge=0.0, le=360.0)
    rain_indicator: Optional[DoZoneSizingCalculation] = "No"
    snow_indicator: Optional[DoZoneSizingCalculation] = "No"
    daylight_saving_time_indicator: Optional[DoZoneSizingCalculation] = "No"
    solar_model_indicator: Optional[SolarModelIndicator] = "ASHRAEClearSky"
    beam_solar_day_schedule_name: Optional[str] = None
    diffuse_solar_day_schedule_name: Optional[str] = None
    ashrae_clear_sky_optical_depth_for_beam_irradiance_taub_: Optional[float] = Field(
        0.0, ge=0.0, le=1.2
    )
    ashrae_clear_sky_optical_depth_for_diffuse_irradiance_taud_: Optional[
        float
    ] = Field(0.0, ge=0.0, le=3.0)
    sky_clearness: Optional[float] = Field(0.0, ge=0.0, le=1.2)
    maximum_number_warmup_days: Optional[int] = None
    begin_environment_reset_mode: Optional[
        BeginEnvironmentResetMode
    ] = "FullResetAtBeginEnvironment"


class DayOfWeekForStartDay(Enum):
    friday = "Friday"
    monday = "Monday"
    saturday = "Saturday"
    sunday = "Sunday"
    thursday = "Thursday"
    tuesday = "Tuesday"
    wednesday = "Wednesday"


class FirstHourInterpolationStartingValues(Enum):
    field_ = ""
    hour1 = "Hour1"
    hour24 = "Hour24"


class RunPeriod(BaseModel):
    begin_month: int = Field(..., ge=1, le=12)
    begin_day_of_month: int = Field(..., ge=1, le=31)
    begin_year: Optional[float] = None
    end_month: int = Field(..., ge=1, le=12)
    end_day_of_month: int = Field(..., ge=1, le=31)
    end_year: Optional[float] = None
    day_of_week_for_start_day: Optional[DayOfWeekForStartDay] = None
    use_weather_file_holidays_and_special_days: Optional[
        DoZoneSizingCalculation
    ] = "Yes"
    use_weather_file_daylight_saving_period: Optional[DoZoneSizingCalculation] = "Yes"
    apply_weekend_holiday_rule: Optional[DoZoneSizingCalculation] = "No"
    use_weather_file_rain_indicators: Optional[DoZoneSizingCalculation] = "Yes"
    use_weather_file_snow_indicators: Optional[DoZoneSizingCalculation] = "Yes"
    treat_weather_as_actual: Optional[DoZoneSizingCalculation] = "No"
    first_hour_interpolation_starting_values: Optional[
        FirstHourInterpolationStartingValues
    ] = "Hour24"


class SpecialDayType(Enum):
    field_ = ""
    custom_day1 = "CustomDay1"
    custom_day2 = "CustomDay2"
    holiday = "Holiday"
    summer_design_day = "SummerDesignDay"
    winter_design_day = "WinterDesignDay"


class RunPeriodControlSpecialDays(BaseModel):
    start_date: str
    duration: Optional[float] = Field(1.0, ge=1.0, le=366.0)
    special_day_type: Optional[SpecialDayType] = "Holiday"


class RunPeriodControlDaylightSavingTime(BaseModel):
    start_date: str
    end_date: str


class SiteGroundTemperatureBuildingSurface(BaseModel):
    january_ground_temperature: Optional[float] = 18.0
    february_ground_temperature: Optional[float] = 18.0
    march_ground_temperature: Optional[float] = 18.0
    april_ground_temperature: Optional[float] = 18.0
    may_ground_temperature: Optional[float] = 18.0
    june_ground_temperature: Optional[float] = 18.0
    july_ground_temperature: Optional[float] = 18.0
    august_ground_temperature: Optional[float] = 18.0
    september_ground_temperature: Optional[float] = 18.0
    october_ground_temperature: Optional[float] = 18.0
    november_ground_temperature: Optional[float] = 18.0
    december_ground_temperature: Optional[float] = 18.0


class SiteGroundTemperatureFCfactorMethod(BaseModel):
    january_ground_temperature: Optional[float] = 13.0
    february_ground_temperature: Optional[float] = 13.0
    march_ground_temperature: Optional[float] = 13.0
    april_ground_temperature: Optional[float] = 13.0
    may_ground_temperature: Optional[float] = 13.0
    june_ground_temperature: Optional[float] = 13.0
    july_ground_temperature: Optional[float] = 13.0
    august_ground_temperature: Optional[float] = 13.0
    september_ground_temperature: Optional[float] = 13.0
    october_ground_temperature: Optional[float] = 13.0
    november_ground_temperature: Optional[float] = 13.0
    december_ground_temperature: Optional[float] = 13.0


class CalculationMethod(Enum):
    field_ = ""
    correlation = "Correlation"
    correlation_from_weather_file = "CorrelationFromWeatherFile"
    schedule = "Schedule"


class SiteWaterMainsTemperature(BaseModel):
    calculation_method: Optional[CalculationMethod] = "CorrelationFromWeatherFile"
    temperature_schedule_name: Optional[str] = None
    annual_average_outdoor_air_temperature: Optional[float] = None
    maximum_difference_in_monthly_average_outdoor_air_temperatures: Optional[
        float
    ] = Field(None, ge=0.0)


class NumericType(Enum):
    continuous = "Continuous"
    discrete = "Discrete"


class UnitType(Enum):
    field_ = ""
    activity_level = "ActivityLevel"
    angle = "Angle"
    availability = "Availability"
    capacity = "Capacity"
    control = "Control"
    convection_coefficient = "ConvectionCoefficient"
    delta_temperature = "DeltaTemperature"
    dimensionless = "Dimensionless"
    mode = "Mode"
    percent = "Percent"
    power = "Power"
    precipitation_rate = "PrecipitationRate"
    temperature = "Temperature"
    velocity = "Velocity"


class ScheduleTypeLimits(BaseModel):
    lower_limit_value: Optional[float] = None
    upper_limit_value: Optional[float] = None
    numeric_type: Optional[NumericType] = None
    unit_type: Optional[UnitType] = "Dimensionless"


class ScheduleDayHourly(BaseModel):
    schedule_type_limits_name: Optional[str] = None
    hour_1: Optional[float] = 0.0
    hour_2: Optional[float] = 0.0
    hour_3: Optional[float] = 0.0
    hour_4: Optional[float] = 0.0
    hour_5: Optional[float] = 0.0
    hour_6: Optional[float] = 0.0
    hour_7: Optional[float] = 0.0
    hour_8: Optional[float] = 0.0
    hour_9: Optional[float] = 0.0
    hour_10: Optional[float] = 0.0
    hour_11: Optional[float] = 0.0
    hour_12: Optional[float] = 0.0
    hour_13: Optional[float] = 0.0
    hour_14: Optional[float] = 0.0
    hour_15: Optional[float] = 0.0
    hour_16: Optional[float] = 0.0
    hour_17: Optional[float] = 0.0
    hour_18: Optional[float] = 0.0
    hour_19: Optional[float] = 0.0
    hour_20: Optional[float] = 0.0
    hour_21: Optional[float] = 0.0
    hour_22: Optional[float] = 0.0
    hour_23: Optional[float] = 0.0
    hour_24: Optional[float] = 0.0


class ScheduleWeekDaily(BaseModel):
    sunday_schedule_day_name: str
    monday_schedule_day_name: str
    tuesday_schedule_day_name: str
    wednesday_schedule_day_name: str
    thursday_schedule_day_name: str
    friday_schedule_day_name: str
    saturday_schedule_day_name: str
    holiday_schedule_day_name: str
    summerdesignday_schedule_day_name: str
    winterdesignday_schedule_day_name: str
    customday1_schedule_day_name: str
    customday2_schedule_day_name: str


class ScheduleWeek(BaseModel):
    schedule_week_name: str
    start_month: int = Field(..., ge=1, le=12)
    start_day: int = Field(..., ge=1, le=31)
    end_month: int = Field(..., ge=1, le=12)
    end_day: int = Field(..., ge=1, le=31)


class ScheduleYear(BaseModel):
    schedule_type_limits_name: Optional[str] = None
    schedule_weeks: Optional[List[ScheduleWeek]] = Field(
        None, max_length=53, min_length=1
    )


class Datum(BaseModel):
    field: Optional[Union[float, str]] = None


class ScheduleCompact(BaseModel):
    schedule_type_limits_name: Optional[str] = None
    data: Optional[List[Datum]] = None


class ScheduleConstant(BaseModel):
    schedule_type_limits_name: Optional[str] = None
    hourly_value: Optional[float] = 0.0


class Roughness(Enum):
    medium_rough = "MediumRough"
    medium_smooth = "MediumSmooth"
    rough = "Rough"
    smooth = "Smooth"
    very_rough = "VeryRough"
    very_smooth = "VerySmooth"


class Material(BaseModel):
    roughness: Roughness
    thickness: float = Field(..., gt=0.0)
    conductivity: float = Field(..., gt=0.0)
    density: float = Field(..., gt=0.0)
    specific_heat: float = Field(..., ge=100.0)
    thermal_absorptance: Optional[float] = Field(0.9, gt=0.0, le=0.99999)
    solar_absorptance: Optional[float] = Field(0.7, ge=0.0, le=1.0)
    visible_absorptance: Optional[float] = Field(0.7, ge=0.0, le=1.0)


class MaterialNoMass(BaseModel):
    roughness: Roughness
    thermal_resistance: float = Field(..., ge=0.001)
    thermal_absorptance: Optional[float] = Field(0.9, gt=0.0, le=0.99999)
    solar_absorptance: Optional[float] = Field(0.7, ge=0.0, le=1.0)
    visible_absorptance: Optional[float] = Field(0.7, ge=0.0, le=1.0)


class MaterialAirGap(BaseModel):
    thermal_resistance: float = Field(..., gt=0.0)


class WindowMaterialSimpleGlazingSystem(BaseModel):
    u_factor: float = Field(..., gt=0.0)
    solar_heat_gain_coefficient: float = Field(..., gt=0.0, lt=1.0)
    visible_transmittance: Optional[float] = Field(None, gt=0.0, lt=1.0)


class OpticalDataType(Enum):
    bsdf = "BSDF"
    spectral = "Spectral"
    spectral_and_angle = "SpectralAndAngle"
    spectral_average = "SpectralAverage"


class WindowMaterialGlazing(BaseModel):
    optical_data_type: OpticalDataType
    window_glass_spectral_data_set_name: Optional[str] = None
    thickness: float = Field(..., gt=0.0)
    solar_transmittance_at_normal_incidence: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    front_side_solar_reflectance_at_normal_incidence: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    back_side_solar_reflectance_at_normal_incidence: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    visible_transmittance_at_normal_incidence: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    front_side_visible_reflectance_at_normal_incidence: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    back_side_visible_reflectance_at_normal_incidence: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    infrared_transmittance_at_normal_incidence: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    front_side_infrared_hemispherical_emissivity: Optional[float] = Field(
        0.84, gt=0.0, lt=1.0
    )
    back_side_infrared_hemispherical_emissivity: Optional[float] = Field(
        0.84, gt=0.0, lt=1.0
    )
    conductivity: Optional[float] = Field(0.9, gt=0.0)
    dirt_correction_factor_for_solar_and_visible_transmittance: Optional[float] = Field(
        1.0, gt=0.0, le=1.0
    )
    solar_diffusing: Optional[DoZoneSizingCalculation] = "No"
    young_s_modulus: Optional[float] = Field(72000000000.0, gt=0.0)
    poisson_s_ratio: Optional[float] = Field(0.22, gt=0.0, lt=1.0)
    window_glass_spectral_and_incident_angle_transmittance_data_set_table_name: Optional[
        str
    ] = None
    window_glass_spectral_and_incident_angle_front_reflectance_data_set_table_name: Optional[
        str
    ] = None
    window_glass_spectral_and_incident_angle_back_reflectance_data_set_table_name: Optional[
        str
    ] = None


class GasType(Enum):
    air = "Air"
    argon = "Argon"
    custom = "Custom"
    krypton = "Krypton"
    xenon = "Xenon"


class WindowMaterialGas(BaseModel):
    gas_type: GasType
    thickness: float = Field(..., gt=0.0)
    conductivity_coefficient_a: Optional[float] = None
    conductivity_coefficient_b: Optional[float] = None
    conductivity_coefficient_c: Optional[float] = None
    viscosity_coefficient_a: Optional[float] = Field(None, gt=0.0)
    viscosity_coefficient_b: Optional[float] = None
    viscosity_coefficient_c: Optional[float] = None
    specific_heat_coefficient_a: Optional[float] = Field(None, gt=0.0)
    specific_heat_coefficient_b: Optional[float] = None
    specific_heat_coefficient_c: Optional[float] = None
    molecular_weight: Optional[float] = Field(None, ge=20.0, le=200.0)
    specific_heat_ratio: Optional[float] = Field(None, gt=1.0)


class WindowGapSupportPillar(BaseModel):
    spacing: Optional[float] = Field(0.04, gt=0.0)
    radius: Optional[float] = Field(0.0004, gt=0.0)


class WindowGapDeflectionState(BaseModel):
    deflected_thickness: Optional[float] = Field(0.0, ge=0.0)
    initial_temperature: Optional[float] = Field(25.0, ge=0.0)
    initial_pressure: Optional[float] = Field(101325.0, ge=0.0)


class Gas1Type(Enum):
    air = "Air"
    argon = "Argon"
    krypton = "Krypton"
    xenon = "Xenon"


class WindowMaterialGasMixture(BaseModel):
    thickness: float = Field(..., gt=0.0)
    number_of_gases_in_mixture: int = Field(..., ge=1, le=4)
    gas_1_type: Gas1Type
    gas_1_fraction: float = Field(..., gt=0.0, le=1.0)
    gas_2_type: Gas1Type
    gas_2_fraction: float = Field(..., gt=0.0, le=1.0)
    gas_3_type: Optional[Gas1Type] = None
    gas_3_fraction: Optional[float] = Field(None, gt=0.0, le=1.0)
    gas_4_type: Optional[Gas1Type] = None
    gas_4_fraction: Optional[float] = Field(None, gt=0.0, le=1.0)


class WindowMaterialGap(BaseModel):
    thickness: float = Field(..., gt=0.0)
    gas_or_gas_mixture_: str
    pressure: Optional[float] = 101325.0
    deflection_state: Optional[str] = None
    support_pillar: Optional[str] = None


class LayerType(Enum):
    field_ = ""
    bsdf = "BSDF"
    other_shading_type = "OtherShadingType"
    perforated = "Perforated"
    venetian_horizontal = "VenetianHorizontal"
    venetian_vertical = "VenetianVertical"
    woven = "Woven"


class WindowMaterialComplexShade(BaseModel):
    layer_type: Optional[LayerType] = "OtherShadingType"
    thickness: Optional[float] = Field(0.002, gt=0.0)
    conductivity: Optional[float] = Field(1.0, gt=0.0)
    ir_transmittance: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    front_emissivity: Optional[float] = Field(0.84, gt=0.0, le=1.0)
    back_emissivity: Optional[float] = Field(0.84, gt=0.0, le=1.0)
    top_opening_multiplier: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    bottom_opening_multiplier: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    left_side_opening_multiplier: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    right_side_opening_multiplier: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    front_opening_multiplier: Optional[float] = Field(0.05, ge=0.0, le=1.0)
    slat_width: Optional[float] = Field(0.016, gt=0.0)
    slat_spacing: Optional[float] = Field(0.012, gt=0.0)
    slat_thickness: Optional[float] = Field(0.0006, gt=0.0)
    slat_angle: Optional[float] = Field(90.0, ge=-90.0, le=90.0)
    slat_conductivity: Optional[float] = Field(160.0, gt=0.0)
    slat_curve: Optional[float] = Field(0.0, ge=0.0)


class Construction(BaseModel):
    outside_layer: str
    layer_2: Optional[str] = None
    layer_3: Optional[str] = None
    layer_4: Optional[str] = None
    layer_5: Optional[str] = None
    layer_6: Optional[str] = None
    layer_7: Optional[str] = None
    layer_8: Optional[str] = None
    layer_9: Optional[str] = None
    layer_10: Optional[str] = None


class ConstructionCfactorUndergroundWall(BaseModel):
    c_factor: float = Field(..., gt=0.0)
    height: float = Field(..., gt=0.0)


class ConstructionFfactorGroundFloor(BaseModel):
    f_factor: float = Field(..., gt=0.0)
    area: float = Field(..., gt=0.0)
    perimeterexposed: float = Field(..., ge=0.0)


class Standard(Enum):
    field_ = ""
    en673_declared = "EN673Declared"
    en673_design = "EN673Design"
    iso15099 = "ISO15099"


class ThermalModel(Enum):
    field_ = ""
    convective_scalar_model_no_sd_thickness = "ConvectiveScalarModel_NoSDThickness"
    convective_scalar_model_with_sd_thickness = "ConvectiveScalarModel_withSDThickness"
    iso15099 = "ISO15099"
    scaled_cavity_width = "ScaledCavityWidth"


class DeflectionModel(Enum):
    field_ = ""
    measured_deflection = "MeasuredDeflection"
    no_deflection = "NoDeflection"
    temperature_and_pressure_input = "TemperatureAndPressureInput"


class WindowThermalModelParams(BaseModel):
    standard: Optional[Standard] = "ISO15099"
    thermal_model: Optional[ThermalModel] = "ISO15099"
    sdscalar: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    deflection_model: Optional[DeflectionModel] = "NoDeflection"
    vacuum_pressure_limit: Optional[float] = Field(13.238, gt=0.0)
    initial_temperature: Optional[float] = Field(25.0, gt=0.0)
    initial_pressure: Optional[float] = Field(101325.0, gt=0.0)


class BasisType(Enum):
    field_ = ""
    lbnlwindow = "LBNLWINDOW"
    user_defined = "UserDefined"


class BasisSymmetryType(Enum):
    field_ = ""
    axisymmetric = "Axisymmetric"
    none = "None"


class ConstructionComplexFenestrationState(BaseModel):
    basis_type: Optional[BasisType] = "LBNLWINDOW"
    basis_symmetry_type: Optional[BasisSymmetryType] = "None"
    window_thermal_model: str
    basis_matrix_name: str
    solar_optical_complex_front_transmittance_matrix_name: str
    solar_optical_complex_back_reflectance_matrix_name: str
    visible_optical_complex_front_transmittance_matrix_name: str
    visible_optical_complex_back_transmittance_matrix_name: str
    outside_layer_name: str
    outside_layer_directional_front_absoptance_matrix_name: str
    outside_layer_directional_back_absoptance_matrix_name: str
    gap_1_name: Optional[str] = None
    cfs_gap_1_directional_front_absoptance_matrix_name: Optional[str] = None
    cfs_gap_1_directional_back_absoptance_matrix_name: Optional[str] = None
    layer_2_name: Optional[str] = None
    layer_2_directional_front_absoptance_matrix_name: Optional[str] = None
    layer_2_directional_back_absoptance_matrix_name: Optional[str] = None
    gap_2_name: Optional[str] = None
    gap_2_directional_front_absoptance_matrix_name: Optional[str] = None
    gap_2_directional_back_absoptance_matrix_name: Optional[str] = None
    layer_3_name: Optional[str] = None
    layer_3_directional_front_absoptance_matrix_name: Optional[str] = None
    layer_3_directional_back_absoptance_matrix_name: Optional[str] = None
    gap_3_name: Optional[str] = None
    gap_3_directional_front_absoptance_matrix_name: Optional[str] = None
    gap_3_directional_back_absoptance_matrix_name: Optional[str] = None
    layer_4_name: Optional[str] = None
    layer_4_directional_front_absoptance_matrix_name: Optional[str] = None
    layer_4_directional_back_absoptance_matrix_name: Optional[str] = None
    gap_4_name: Optional[str] = None
    gap_4_directional_front_absoptance_matrix_name: Optional[str] = None
    gap_4_directional_back_absoptance_matrix_name: Optional[str] = None
    layer_5_name: Optional[str] = None
    layer_5_directional_front_absoptance_matrix_name: Optional[str] = None
    layer_5_directional_back_absoptance_matrix_name: Optional[str] = None


class StartingVertexPosition(Enum):
    lower_left_corner = "LowerLeftCorner"
    lower_right_corner = "LowerRightCorner"
    upper_left_corner = "UpperLeftCorner"
    upper_right_corner = "UpperRightCorner"


class VertexEntryDirection(Enum):
    clockwise = "Clockwise"
    counterclockwise = "Counterclockwise"


class CoordinateSystem(Enum):
    relative = "Relative"
    world = "World"


class DaylightingReferencePointCoordinateSystem(Enum):
    field_ = ""
    relative = "Relative"
    world = "World"


class GlobalGeometryRules(BaseModel):
    starting_vertex_position: StartingVertexPosition
    vertex_entry_direction: VertexEntryDirection
    coordinate_system: CoordinateSystem
    daylighting_reference_point_coordinate_system: Optional[
        DaylightingReferencePointCoordinateSystem
    ] = "Relative"
    rectangular_surface_coordinate_system: Optional[
        DaylightingReferencePointCoordinateSystem
    ] = "Relative"


class CeilingHeightEnum(Enum):
    field_ = ""
    autocalculate = "Autocalculate"


class ZoneInsideConvectionAlgorithm(Enum):
    field_ = ""
    astmc1340 = "ASTMC1340"
    adaptive_convection_algorithm = "AdaptiveConvectionAlgorithm"
    ceiling_diffuser = "CeilingDiffuser"
    simple = "Simple"
    tarp = "TARP"
    trombe_wall = "TrombeWall"


class Zone(BaseModel):
    direction_of_relative_north: Optional[float] = 0.0
    x_origin: Optional[float] = 0.0
    y_origin: Optional[float] = 0.0
    z_origin: Optional[float] = 0.0
    type: Optional[int] = Field(1, ge=1, le=1)
    multiplier: Optional[int] = Field(1, ge=1)
    ceiling_height: Optional[Union[float, CeilingHeightEnum]] = "Autocalculate"
    volume: Optional[Union[float, CeilingHeightEnum]] = "Autocalculate"
    floor_area: Optional[Union[float, CeilingHeightEnum]] = "Autocalculate"
    zone_inside_convection_algorithm: Optional[ZoneInsideConvectionAlgorithm] = None
    zone_outside_convection_algorithm: Optional[Algorithm1] = None
    part_of_total_floor_area: Optional[DoZoneSizingCalculation] = "Yes"


class Zone1(BaseModel):
    zone_name: str


class ZoneList(BaseModel):
    zones: Optional[List[Zone1]] = None


class ZoneGroup(BaseModel):
    zone_list_name: str
    zone_list_multiplier: Optional[int] = Field(1, ge=1)


class SurfaceType(Enum):
    ceiling = "Ceiling"
    floor = "Floor"
    roof = "Roof"
    wall = "Wall"


class OutsideBoundaryCondition(Enum):
    adiabatic = "Adiabatic"
    foundation = "Foundation"
    ground = "Ground"
    ground_basement_preprocessor_average_floor = (
        "GroundBasementPreprocessorAverageFloor"
    )
    ground_basement_preprocessor_average_wall = "GroundBasementPreprocessorAverageWall"
    ground_basement_preprocessor_lower_wall = "GroundBasementPreprocessorLowerWall"
    ground_basement_preprocessor_upper_wall = "GroundBasementPreprocessorUpperWall"
    ground_f_cfactor_method = "GroundFCfactorMethod"
    ground_slab_preprocessor_average = "GroundSlabPreprocessorAverage"
    ground_slab_preprocessor_core = "GroundSlabPreprocessorCore"
    ground_slab_preprocessor_perimeter = "GroundSlabPreprocessorPerimeter"
    other_side_coefficients = "OtherSideCoefficients"
    other_side_conditions_model = "OtherSideConditionsModel"
    outdoors = "Outdoors"
    surface = "Surface"
    zone = "Zone"


class SunExposure(Enum):
    field_ = ""
    no_sun = "NoSun"
    sun_exposed = "SunExposed"


class WindExposure(Enum):
    field_ = ""
    no_wind = "NoWind"
    wind_exposed = "WindExposed"


class ViewFactorToGroundItem(RootModel):
    root: float = Field(..., ge=0.0, le=1.0)


class NumberOfVertice(RootModel):
    root: float = Field(..., ge=3.0)


class Vertice(BaseModel):
    vertex_x_coordinate: float
    vertex_y_coordinate: float
    vertex_z_coordinate: float


class BuildingSurfaceDetailed(BaseModel):
    surface_type: SurfaceType
    construction_name: str
    zone_name: str
    space_name: Optional[str] = None
    outside_boundary_condition: OutsideBoundaryCondition
    outside_boundary_condition_object: Optional[str] = None
    sun_exposure: Optional[SunExposure] = "SunExposed"
    wind_exposure: Optional[WindExposure] = "WindExposed"
    view_factor_to_ground: Optional[
        Union[ViewFactorToGroundItem, CeilingHeightEnum]
    ] = "Autocalculate"
    number_of_vertices: Optional[
        Union[NumberOfVertice, CeilingHeightEnum]
    ] = "Autocalculate"
    vertices: Optional[List[Vertice]] = None


class SurfaceType1(Enum):
    door = "Door"
    glass_door = "GlassDoor"
    tubular_daylight_diffuser = "TubularDaylightDiffuser"
    tubular_daylight_dome = "TubularDaylightDome"
    window = "Window"


class NumberOfVertice2(RootModel):
    root: float = Field(..., ge=3.0, le=4.0)


class FenestrationSurfaceDetailed(BaseModel):
    surface_type: SurfaceType1
    construction_name: str
    building_surface_name: str
    outside_boundary_condition_object: Optional[str] = None
    view_factor_to_ground: Optional[
        Union[ViewFactorToGroundItem, CeilingHeightEnum]
    ] = "Autocalculate"
    frame_and_divider_name: Optional[str] = None
    multiplier: Optional[float] = Field(1.0, ge=1.0)
    number_of_vertices: Optional[
        Union[NumberOfVertice2, CeilingHeightEnum]
    ] = "Autocalculate"
    vertex_1_x_coordinate: float
    vertex_1_y_coordinate: float
    vertex_1_z_coordinate: float
    vertex_2_x_coordinate: float
    vertex_2_y_coordinate: float
    vertex_2_z_coordinate: float
    vertex_3_x_coordinate: float
    vertex_3_y_coordinate: float
    vertex_3_z_coordinate: float
    vertex_4_x_coordinate: Optional[float] = None
    vertex_4_y_coordinate: Optional[float] = None
    vertex_4_z_coordinate: Optional[float] = None


class DividerType(Enum):
    field_ = ""
    divided_lite = "DividedLite"
    suspended = "Suspended"


class NfrcProductTypeForAssemblyCalculations(Enum):
    field_ = ""
    casement_double = "CasementDouble"
    casement_single = "CasementSingle"
    curtain_wall = "CurtainWall"
    door_sidelite = "DoorSidelite"
    door_transom = "DoorTransom"
    dual_action = "DualAction"
    fixed = "Fixed"
    garage = "Garage"
    greenhouse = "Greenhouse"
    hinged_escape = "HingedEscape"
    horizontal_slider = "HorizontalSlider"
    jal = "Jal"
    pivoted = "Pivoted"
    projecting_dual = "ProjectingDual"
    projecting_single = "ProjectingSingle"
    side_hinged_door = "SideHingedDoor"
    skylight = "Skylight"
    sliding_patio_door = "SlidingPatioDoor"
    spandrel_panel = "SpandrelPanel"
    tropical_awning = "TropicalAwning"
    tubular_daylighting_device = "TubularDaylightingDevice"
    vertical_slider = "VerticalSlider"


class WindowPropertyFrameAndDivider(BaseModel):
    frame_width: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    frame_outside_projection: Optional[float] = Field(0.0, ge=0.0, le=0.5)
    frame_inside_projection: Optional[float] = Field(0.0, ge=0.0, le=0.5)
    frame_conductance: Optional[float] = Field(None, ge=0.0)
    ratio_of_frame_edge_glass_conductance_to_center_of_glass_conductance: Optional[
        float
    ] = Field(1.0, gt=0.0, le=4.0)
    frame_solar_absorptance: Optional[float] = Field(0.7, ge=0.0, le=1.0)
    frame_visible_absorptance: Optional[float] = Field(0.7, ge=0.0, le=1.0)
    frame_thermal_hemispherical_emissivity: Optional[float] = Field(0.9, gt=0.0)
    divider_type: Optional[DividerType] = "DividedLite"
    divider_width: Optional[float] = Field(0.0, ge=0.0, le=0.5)
    number_of_horizontal_dividers: Optional[float] = Field(0.0, ge=0.0)
    number_of_vertical_dividers: Optional[float] = Field(0.0, ge=0.0)
    divider_outside_projection: Optional[float] = Field(0.0, ge=0.0, le=0.5)
    divider_inside_projection: Optional[float] = Field(0.0, ge=0.0, le=0.5)
    divider_conductance: Optional[float] = Field(0.0, ge=0.0)
    ratio_of_divider_edge_glass_conductance_to_center_of_glass_conductance: Optional[
        float
    ] = Field(1.0, gt=0.0, le=4.0)
    divider_solar_absorptance: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    divider_visible_absorptance: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    divider_thermal_hemispherical_emissivity: Optional[float] = Field(
        0.9, gt=0.0, lt=1.0
    )
    outside_reveal_solar_absorptance: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    inside_sill_depth: Optional[float] = Field(0.0, ge=0.0, le=2.0)
    inside_sill_solar_absorptance: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    inside_reveal_depth: Optional[float] = Field(0.0, ge=0.0, le=2.0)
    inside_reveal_solar_absorptance: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    nfrc_product_type_for_assembly_calculations: Optional[
        NfrcProductTypeForAssemblyCalculations
    ] = "CurtainWall"


class InternalMass(BaseModel):
    construction_name: str
    zone_or_zonelist_name: str
    space_or_spacelist_name: Optional[str] = None
    surface_area: float = Field(..., gt=0.0)


class NumberOfVertice4(NumberOfVertice):
    pass


class ShadingSiteDetailed(BaseModel):
    transmittance_schedule_name: Optional[str] = None
    number_of_vertices: Optional[
        Union[NumberOfVertice4, CeilingHeightEnum]
    ] = "Autocalculate"
    vertices: Optional[List[Vertice]] = None


class NumberOfVertice6(NumberOfVertice):
    pass


class ShadingBuildingDetailed(BaseModel):
    transmittance_schedule_name: Optional[str] = None
    number_of_vertices: Optional[
        Union[NumberOfVertice6, CeilingHeightEnum]
    ] = "Autocalculate"
    vertices: Optional[List[Vertice]] = None


class NumberOfVertice8(NumberOfVertice):
    pass


class ShadingZoneDetailed(BaseModel):
    base_surface_name: str
    transmittance_schedule_name: Optional[str] = None
    number_of_vertices: Optional[
        Union[NumberOfVertice8, CeilingHeightEnum]
    ] = "Autocalculate"
    vertices: Optional[List[Vertice]] = None


class ShadingPropertyReflectance(BaseModel):
    shading_surface_name: str
    diffuse_solar_reflectance_of_unglazed_part_of_shading_surface: Optional[
        float
    ] = Field(0.2, ge=0.0, le=1.0)
    diffuse_visible_reflectance_of_unglazed_part_of_shading_surface: Optional[
        float
    ] = Field(0.2, ge=0.0, le=1.0)
    fraction_of_shading_surface_that_is_glazed: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    glazing_construction_name: Optional[str] = None


class SurfacePropertySolarIncidentInside(BaseModel):
    surface_name: str
    construction_name: str
    inside_surface_incident_sun_solar_radiation_schedule_name: str


class ComplexFenestrationPropertySolarAbsorbedLayers(BaseModel):
    fenestration_surface: str
    construction_name: str
    layer_1_solar_radiation_absorbed_schedule_name: str
    layer_2_solar_radiation_absorbed_schedule_name: Optional[str] = None
    layer_3_solar_radiation_absorbed_schedule_name: Optional[str] = None
    layer_4_solar_radiation_absorbed_schedule_name: Optional[str] = None
    layer_5_solar_radiation_absorbed_schedule_name: Optional[str] = None


class NumberOfPeopleCalculationMethod(Enum):
    field_ = ""
    area_person = "Area/Person"
    people = "People"
    people_area = "People/Area"


class SensibleHeatFractionItem(ViewFactorToGroundItem):
    pass


class MeanRadiantTemperatureCalculationType(Enum):
    field_ = ""
    angle_factor = "AngleFactor"
    surface_weighted = "SurfaceWeighted"
    zone_averaged = "ZoneAveraged"


class ClothingInsulationCalculationMethod(Enum):
    field_ = ""
    calculation_method_schedule = "CalculationMethodSchedule"
    clothing_insulation_schedule = "ClothingInsulationSchedule"
    dynamic_clothing_model_ashrae55 = "DynamicClothingModelASHRAE55"


class ThermalComfortModel1Type(Enum):
    adaptive_ash55 = "AdaptiveASH55"
    adaptive_cen15251 = "AdaptiveCEN15251"
    ankle_draft_ash55 = "AnkleDraftASH55"
    cooling_effect_ash55 = "CoolingEffectASH55"
    fanger = "Fanger"
    ksu = "KSU"
    pierce = "Pierce"


class People(BaseModel):
    zone_or_zonelist_or_space_or_spacelist_name: str
    number_of_people_schedule_name: str
    number_of_people_calculation_method: Optional[
        NumberOfPeopleCalculationMethod
    ] = "People"
    number_of_people: Optional[float] = Field(None, ge=0.0)
    people_per_floor_area: Optional[float] = Field(None, ge=0.0)
    floor_area_per_person: Optional[float] = Field(None, ge=0.0)
    fraction_radiant: Optional[float] = Field(0.3, ge=0.0, le=1.0)
    sensible_heat_fraction: Optional[
        Union[SensibleHeatFractionItem, CeilingHeightEnum]
    ] = "Autocalculate"
    activity_level_schedule_name: str
    carbon_dioxide_generation_rate: Optional[float] = Field(
        3.82e-08, ge=0.0, le=3.82e-07
    )
    enable_ashrae_55_comfort_warnings: Optional[DoZoneSizingCalculation] = "No"
    mean_radiant_temperature_calculation_type: Optional[
        MeanRadiantTemperatureCalculationType
    ] = "ZoneAveraged"
    surface_name_angle_factor_list_name: Optional[str] = None
    work_efficiency_schedule_name: Optional[str] = None
    clothing_insulation_calculation_method: Optional[
        ClothingInsulationCalculationMethod
    ] = "ClothingInsulationSchedule"
    clothing_insulation_calculation_method_schedule_name: Optional[str] = None
    clothing_insulation_schedule_name: Optional[str] = None
    air_velocity_schedule_name: Optional[str] = None
    thermal_comfort_model_1_type: Optional[ThermalComfortModel1Type] = None
    thermal_comfort_model_2_type: Optional[ThermalComfortModel1Type] = None
    thermal_comfort_model_3_type: Optional[ThermalComfortModel1Type] = None
    thermal_comfort_model_4_type: Optional[ThermalComfortModel1Type] = None
    thermal_comfort_model_5_type: Optional[ThermalComfortModel1Type] = None
    thermal_comfort_model_6_type: Optional[ThermalComfortModel1Type] = None
    thermal_comfort_model_7_type: Optional[ThermalComfortModel1Type] = None
    ankle_level_air_velocity_schedule_name: Optional[str] = None
    cold_stress_temperature_threshold: Optional[float] = 15.56
    heat_stress_temperature_threshold: Optional[float] = 30.0


class DesignLevelCalculationMethod(Enum):
    field_ = ""
    lighting_level = "LightingLevel"
    watts_area = "Watts/Area"
    watts_person = "Watts/Person"


class Lights(BaseModel):
    zone_or_zonelist_or_space_or_spacelist_name: str
    schedule_name: str
    design_level_calculation_method: Optional[
        DesignLevelCalculationMethod
    ] = "LightingLevel"
    lighting_level: Optional[float] = Field(None, ge=0.0)
    watts_per_zone_floor_area: Optional[float] = Field(None, ge=0.0)
    watts_per_person: Optional[float] = Field(None, ge=0.0)
    return_air_fraction: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_radiant: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_visible: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_replaceable: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    end_use_subcategory: Optional[str] = "General"
    return_air_fraction_calculated_from_plenum_temperature: Optional[
        DoZoneSizingCalculation
    ] = "No"
    return_air_fraction_function_of_plenum_temperature_coefficient_1: Optional[
        float
    ] = Field(0.0, ge=0.0)
    return_air_fraction_function_of_plenum_temperature_coefficient_2: Optional[
        float
    ] = Field(0.0, ge=0.0)
    return_air_heat_gain_node_name: Optional[str] = None
    exhaust_air_heat_gain_node_name: Optional[str] = None


class DesignLevelCalculationMethod1(Enum):
    field_ = ""
    equipment_level = "EquipmentLevel"
    watts_area = "Watts/Area"
    watts_person = "Watts/Person"


class ElectricEquipment(BaseModel):
    zone_or_zonelist_or_space_or_spacelist_name: str
    schedule_name: str
    design_level_calculation_method: Optional[
        DesignLevelCalculationMethod1
    ] = "EquipmentLevel"
    design_level: Optional[float] = Field(None, ge=0.0)
    watts_per_zone_floor_area: Optional[float] = Field(None, ge=0.0)
    watts_per_person: Optional[float] = Field(None, ge=0.0)
    fraction_latent: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_radiant: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_lost: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    end_use_subcategory: Optional[str] = "General"


class DesignLevelCalculationMethod2(Enum):
    field_ = ""
    equipment_level = "EquipmentLevel"
    power_area = "Power/Area"
    power_person = "Power/Person"
    watts_area = "Watts/Area"
    watts_person = "Watts/Person"


class GasEquipment(BaseModel):
    zone_or_zonelist_or_space_or_spacelist_name: str
    schedule_name: str
    design_level_calculation_method: Optional[
        DesignLevelCalculationMethod2
    ] = "EquipmentLevel"
    design_level: Optional[float] = Field(None, ge=0.0)
    power_per_zone_floor_area: Optional[float] = Field(None, ge=0.0)
    power_per_person: Optional[float] = Field(None, ge=0.0)
    fraction_latent: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_radiant: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_lost: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    carbon_dioxide_generation_rate: Optional[float] = Field(0.0, ge=0.0, le=4e-07)
    end_use_subcategory: Optional[str] = "General"


class FuelType(Enum):
    field_ = ""
    coal = "Coal"
    diesel = "Diesel"
    district_cooling = "DistrictCooling"
    district_heating = "DistrictHeating"
    electricity = "Electricity"
    fuel_oil_no1 = "FuelOilNo1"
    fuel_oil_no2 = "FuelOilNo2"
    gasoline = "Gasoline"
    natural_gas = "NaturalGas"
    none = "None"
    other_fuel1 = "OtherFuel1"
    other_fuel2 = "OtherFuel2"
    propane = "Propane"
    steam = "Steam"


class OtherEquipment(BaseModel):
    fuel_type: Optional[FuelType] = "None"
    zone_or_zonelist_or_space_or_spacelist_name: str
    schedule_name: str
    design_level_calculation_method: Optional[
        DesignLevelCalculationMethod2
    ] = "EquipmentLevel"
    design_level: Optional[float] = None
    power_per_zone_floor_area: Optional[float] = None
    power_per_person: Optional[float] = None
    fraction_latent: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_radiant: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    fraction_lost: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    carbon_dioxide_generation_rate: Optional[float] = Field(0.0, ge=0.0, le=4e-07)
    end_use_subcategory: Optional[str] = "General"


class DaylightingMethod(Enum):
    field_ = ""
    d_elight = "DElight"
    split_flux = "SplitFlux"


class LightingControlType(Enum):
    field_ = ""
    continuous = "Continuous"
    continuous_off = "ContinuousOff"
    stepped = "Stepped"


class ControlDatum(BaseModel):
    daylighting_reference_point_name: str
    fraction_of_lights_controlled_by_reference_point: Optional[float] = Field(
        1.0, ge=0.0, le=1.0
    )
    illuminance_setpoint_at_reference_point: Optional[float] = Field(500.0, ge=0.0)


class DaylightingControls(BaseModel):
    zone_or_space_name: str
    daylighting_method: Optional[DaylightingMethod] = "SplitFlux"
    availability_schedule_name: Optional[str] = None
    lighting_control_type: Optional[LightingControlType] = "Continuous"
    minimum_input_power_fraction_for_continuous_or_continuousoff_dimming_control: Optional[
        float
    ] = Field(
        0.3, ge=0.0, le=0.6
    )
    minimum_light_output_fraction_for_continuous_or_continuousoff_dimming_control: Optional[
        float
    ] = Field(
        0.2, ge=0.0, le=0.6
    )
    number_of_stepped_control_steps: Optional[int] = Field(1, ge=1)
    probability_lighting_will_be_reset_when_needed_in_manual_stepped_control: Optional[
        float
    ] = Field(1.0, ge=0.0, le=1.0)
    glare_calculation_daylighting_reference_point_name: Optional[str] = None
    glare_calculation_azimuth_angle_of_view_direction_clockwise_from_zone_y_axis: Optional[
        float
    ] = Field(
        0.0, ge=0.0, le=360.0
    )
    maximum_allowable_discomfort_glare_index: Optional[float] = Field(22.0, ge=1.0)
    delight_gridding_resolution: Optional[float] = Field(None, gt=0.0)
    control_data: Optional[List[ControlDatum]] = None


class DaylightingReferencePoint(BaseModel):
    zone_or_space_name: str
    x_coordinate_of_reference_point: float
    y_coordinate_of_reference_point: float
    z_coordinate_of_reference_point: Optional[float] = 0.8


class DesignFlowRateCalculationMethod(Enum):
    field_ = ""
    air_changes_hour = "AirChanges/Hour"
    flow_area = "Flow/Area"
    flow_exterior_area = "Flow/ExteriorArea"
    flow_exterior_wall_area = "Flow/ExteriorWallArea"
    flow_zone = "Flow/Zone"


class ZoneInfiltrationDesignFlowRate(BaseModel):
    zone_or_zonelist_or_space_or_spacelist_name: str
    schedule_name: Optional[str] = None
    design_flow_rate_calculation_method: Optional[
        DesignFlowRateCalculationMethod
    ] = "Flow/Zone"
    design_flow_rate: Optional[float] = Field(None, ge=0.0)
    flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    flow_rate_per_exterior_surface_area: Optional[float] = Field(None, ge=0.0)
    air_changes_per_hour: Optional[float] = Field(None, ge=0.0)
    constant_term_coefficient: Optional[float] = 1.0
    temperature_term_coefficient: Optional[float] = 0.0
    velocity_term_coefficient: Optional[float] = 0.0
    velocity_squared_term_coefficient: Optional[float] = 0.0


class DesignFlowRateCalculationMethod1(Enum):
    field_ = ""
    air_changes_hour = "AirChanges/Hour"
    flow_area = "Flow/Area"
    flow_person = "Flow/Person"
    flow_zone = "Flow/Zone"


class VentilationType(Enum):
    field_ = ""
    balanced = "Balanced"
    exhaust = "Exhaust"
    intake = "Intake"
    natural = "Natural"


class ZoneVentilationDesignFlowRate(BaseModel):
    zone_or_zonelist_or_space_or_spacelist_name: str
    schedule_name: Optional[str] = None
    design_flow_rate_calculation_method: Optional[
        DesignFlowRateCalculationMethod1
    ] = "Flow/Zone"
    design_flow_rate: Optional[float] = Field(None, ge=0.0)
    flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    flow_rate_per_person: Optional[float] = Field(None, ge=0.0)
    air_changes_per_hour: Optional[float] = Field(None, ge=0.0)
    ventilation_type: Optional[VentilationType] = "Natural"
    fan_pressure_rise: Optional[float] = Field(0.0, ge=0.0)
    fan_total_efficiency: Optional[float] = Field(1.0, gt=0.0)
    constant_term_coefficient: Optional[float] = 1.0
    temperature_term_coefficient: Optional[float] = 0.0
    velocity_term_coefficient: Optional[float] = 0.0
    velocity_squared_term_coefficient: Optional[float] = 0.0
    minimum_indoor_temperature: Optional[float] = Field(-100.0, ge=-100.0, le=100.0)
    minimum_indoor_temperature_schedule_name: Optional[str] = None
    maximum_indoor_temperature: Optional[float] = Field(100.0, ge=-100.0, le=100.0)
    maximum_indoor_temperature_schedule_name: Optional[str] = None
    delta_temperature: Optional[float] = Field(-100.0, ge=-100.0)
    delta_temperature_schedule_name: Optional[str] = None
    minimum_outdoor_temperature: Optional[float] = Field(-100.0, ge=-100.0, le=100.0)
    minimum_outdoor_temperature_schedule_name: Optional[str] = None
    maximum_outdoor_temperature: Optional[float] = Field(100.0, ge=-100.0, le=100.0)
    maximum_outdoor_temperature_schedule_name: Optional[str] = None
    maximum_wind_speed: Optional[float] = Field(40.0, ge=0.0, le=40.0)


class OpeningEffectivenes(ViewFactorToGroundItem):
    pass


class DischargeCoefficientForOpeningItem(ViewFactorToGroundItem):
    pass


class ZoneVentilationWindandStackOpenArea(BaseModel):
    zone_or_space_name: str
    opening_area: Optional[float] = Field(0.0, ge=0.0)
    opening_area_fraction_schedule_name: Optional[str] = None
    opening_effectiveness: Optional[
        Union[OpeningEffectivenes, CeilingHeightEnum]
    ] = "Autocalculate"
    effective_angle: Optional[float] = Field(0.0, ge=0.0, lt=360.0)
    height_difference: Optional[float] = Field(0.0, ge=0.0)
    discharge_coefficient_for_opening: Optional[
        Union[DischargeCoefficientForOpeningItem, CeilingHeightEnum]
    ] = "Autocalculate"
    minimum_indoor_temperature: Optional[float] = Field(-100.0, ge=-100.0, le=100.0)
    minimum_indoor_temperature_schedule_name: Optional[str] = None
    maximum_indoor_temperature: Optional[float] = Field(100.0, ge=-100.0, le=100.0)
    maximum_indoor_temperature_schedule_name: Optional[str] = None
    delta_temperature: Optional[float] = Field(-100.0, ge=-100.0)
    delta_temperature_schedule_name: Optional[str] = None
    minimum_outdoor_temperature: Optional[float] = Field(-100.0, ge=-100.0, le=100.0)
    minimum_outdoor_temperature_schedule_name: Optional[str] = None
    maximum_outdoor_temperature: Optional[float] = Field(100.0, ge=-100.0, le=100.0)
    maximum_outdoor_temperature_schedule_name: Optional[str] = None
    maximum_wind_speed: Optional[float] = Field(40.0, ge=0.0, le=40.0)


class ZoneMixing(BaseModel):
    zone_or_space_name: str
    schedule_name: Optional[str] = None
    design_flow_rate_calculation_method: Optional[
        DesignFlowRateCalculationMethod1
    ] = "Flow/Zone"
    design_flow_rate: Optional[float] = Field(None, ge=0.0)
    flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    flow_rate_per_person: Optional[float] = Field(None, ge=0.0)
    air_changes_per_hour: Optional[float] = Field(None, ge=0.0)
    source_zone_or_space_name: str
    delta_temperature: Optional[float] = 0.0
    delta_temperature_schedule_name: Optional[str] = None
    minimum_receiving_temperature_schedule_name: Optional[str] = None
    maximum_receiving_temperature_schedule_name: Optional[str] = None
    minimum_source_temperature_schedule_name: Optional[str] = None
    maximum_source_temperature_schedule_name: Optional[str] = None
    minimum_outdoor_temperature_schedule_name: Optional[str] = None
    maximum_outdoor_temperature_schedule_name: Optional[str] = None


class DoorProtectionType(Enum):
    field_ = ""
    air_curtain = "AirCurtain"
    none = "None"
    strip_curtain = "StripCurtain"


class ZoneRefrigerationDoorMixing(BaseModel):
    zone_1_name: str
    zone_2_name: str
    schedule_name: str
    door_height: Optional[float] = Field(3.0, ge=0.0, le=50.0)
    door_area: Optional[float] = Field(9.0, ge=0.0, le=400.0)
    door_protection_type: Optional[DoorProtectionType] = "None"


class ControlOption(Enum):
    astronomical_clock = "AstronomicalClock"
    schedule_name_only = "ScheduleNameOnly"


class ExteriorLights(BaseModel):
    schedule_name: str
    design_level: float = Field(..., ge=0.0)
    control_option: Optional[ControlOption] = None
    end_use_subcategory: Optional[str] = "General"


class FuelUseType(Enum):
    coal = "Coal"
    diesel = "Diesel"
    district_cooling = "DistrictCooling"
    district_heating = "DistrictHeating"
    electricity = "Electricity"
    fuel_oil_no1 = "FuelOilNo1"
    fuel_oil_no2 = "FuelOilNo2"
    gasoline = "Gasoline"
    natural_gas = "NaturalGas"
    other_fuel1 = "OtherFuel1"
    other_fuel2 = "OtherFuel2"
    propane = "Propane"
    steam = "Steam"
    water = "Water"


class ExteriorFuelEquipment(BaseModel):
    fuel_use_type: FuelUseType
    schedule_name: str
    design_level: float = Field(..., ge=0.0)
    end_use_subcategory: Optional[str] = "General"


class OutdoorAirMethod(Enum):
    field_ = ""
    air_changes_hour = "AirChanges/Hour"
    flow_area = "Flow/Area"
    flow_person = "Flow/Person"
    flow_zone = "Flow/Zone"
    indoor_air_quality_procedure = "IndoorAirQualityProcedure"
    maximum = "Maximum"
    proportional_control_based_on_design_occupancy = (
        "ProportionalControlBasedOnDesignOccupancy"
    )
    proportional_control_based_on_occupancy_schedule = (
        "ProportionalControlBasedOnOccupancySchedule"
    )
    sum = "Sum"


class DesignSpecificationOutdoorAir(BaseModel):
    outdoor_air_method: Optional[OutdoorAirMethod] = "Flow/Person"
    outdoor_air_flow_per_person: Optional[float] = Field(0.00944, ge=0.0)
    outdoor_air_flow_per_zone_floor_area: Optional[float] = Field(0.0, ge=0.0)
    outdoor_air_flow_per_zone: Optional[float] = Field(0.0, ge=0.0)
    outdoor_air_flow_air_changes_per_hour: Optional[float] = Field(0.0, ge=0.0)
    outdoor_air_schedule_name: Optional[str] = None
    proportional_control_minimum_outdoor_air_flow_rate_schedule_name: Optional[
        str
    ] = None


class DesignSpecificationZoneAirDistribution(BaseModel):
    zone_air_distribution_effectiveness_in_cooling_mode: Optional[float] = Field(
        1.0, gt=0.0
    )
    zone_air_distribution_effectiveness_in_heating_mode: Optional[float] = Field(
        1.0, gt=0.0
    )
    zone_air_distribution_effectiveness_schedule_name: Optional[str] = None
    zone_secondary_recirculation_fraction: Optional[float] = Field(0.0, ge=0.0)
    minimum_zone_ventilation_efficiency: Optional[float] = Field(0.0, ge=0.0, le=1.0)


class SizingParameters(BaseModel):
    heating_sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    cooling_sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    timesteps_in_averaging_window: Optional[int] = Field(None, ge=1)


class ZoneCoolingDesignSupplyAirTemperatureInputMethod(Enum):
    field_ = ""
    supply_air_temperature = "SupplyAirTemperature"
    temperature_difference = "TemperatureDifference"


class CoolingDesignAirFlowMethod(Enum):
    field_ = ""
    design_day = "DesignDay"
    design_day_with_limit = "DesignDayWithLimit"
    flow_zone = "Flow/Zone"


class DedicatedOutdoorAirSystemControlStrategy(Enum):
    field_ = ""
    cold_supply_air = "ColdSupplyAir"
    neutral_dehumidified_supply_air = "NeutralDehumidifiedSupplyAir"
    neutral_supply_air = "NeutralSupplyAir"


class DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum(Enum):
    field_ = ""
    autosize = "Autosize"


class ZoneLoadSizingMethod(Enum):
    field_ = ""
    latent_load = "Latent Load"
    sensible_and_latent_load = "Sensible And Latent Load"
    sensible_load = "Sensible Load"
    sensible_load_only_no_latent_load = "Sensible Load Only No Latent Load"


class ZoneLatentCoolingDesignSupplyAirHumidityRatioInputMethod(Enum):
    field_ = ""
    humidity_ratio_difference = "HumidityRatioDifference"
    supply_air_humidity_ratio = "SupplyAirHumidityRatio"


class SizingZone(BaseModel):
    zone_or_zonelist_name: str
    zone_cooling_design_supply_air_temperature_input_method: Optional[
        ZoneCoolingDesignSupplyAirTemperatureInputMethod
    ] = "SupplyAirTemperature"
    zone_cooling_design_supply_air_temperature: Optional[float] = None
    zone_cooling_design_supply_air_temperature_difference: Optional[float] = None
    zone_heating_design_supply_air_temperature_input_method: Optional[
        ZoneCoolingDesignSupplyAirTemperatureInputMethod
    ] = "SupplyAirTemperature"
    zone_heating_design_supply_air_temperature: Optional[float] = None
    zone_heating_design_supply_air_temperature_difference: Optional[float] = None
    zone_cooling_design_supply_air_humidity_ratio: float = Field(..., ge=0.0)
    zone_heating_design_supply_air_humidity_ratio: float = Field(..., ge=0.0)
    design_specification_outdoor_air_object_name: Optional[str] = None
    zone_heating_sizing_factor: Optional[float] = Field(None, ge=0.0)
    zone_cooling_sizing_factor: Optional[float] = Field(None, ge=0.0)
    cooling_design_air_flow_method: Optional[CoolingDesignAirFlowMethod] = "DesignDay"
    cooling_design_air_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    cooling_minimum_air_flow_per_zone_floor_area: Optional[float] = Field(
        0.000762, ge=0.0
    )
    cooling_minimum_air_flow: Optional[float] = Field(0.0, ge=0.0)
    cooling_minimum_air_flow_fraction: Optional[float] = Field(0.2, ge=0.0)
    heating_design_air_flow_method: Optional[CoolingDesignAirFlowMethod] = "DesignDay"
    heating_design_air_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    heating_maximum_air_flow_per_zone_floor_area: Optional[float] = Field(
        0.002032, ge=0.0
    )
    heating_maximum_air_flow: Optional[float] = Field(0.1415762, ge=0.0)
    heating_maximum_air_flow_fraction: Optional[float] = Field(0.3, ge=0.0)
    design_specification_zone_air_distribution_object_name: Optional[str] = None
    account_for_dedicated_outdoor_air_system: Optional[DoZoneSizingCalculation] = "No"
    dedicated_outdoor_air_system_control_strategy: Optional[
        DedicatedOutdoorAirSystemControlStrategy
    ] = "NeutralSupplyAir"
    dedicated_outdoor_air_low_setpoint_temperature_for_design: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    dedicated_outdoor_air_high_setpoint_temperature_for_design: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    zone_load_sizing_method: Optional[
        ZoneLoadSizingMethod
    ] = "Sensible Load Only No Latent Load"
    zone_latent_cooling_design_supply_air_humidity_ratio_input_method: Optional[
        ZoneLatentCoolingDesignSupplyAirHumidityRatioInputMethod
    ] = "HumidityRatioDifference"
    zone_dehumidification_design_supply_air_humidity_ratio: Optional[float] = Field(
        None, gt=0.0
    )
    zone_cooling_design_supply_air_humidity_ratio_difference: Optional[float] = Field(
        0.005, gt=0.0
    )
    zone_latent_heating_design_supply_air_humidity_ratio_input_method: Optional[
        ZoneLatentCoolingDesignSupplyAirHumidityRatioInputMethod
    ] = "HumidityRatioDifference"
    zone_humidification_design_supply_air_humidity_ratio: Optional[float] = Field(
        None, gt=0.0
    )
    zone_humidification_design_supply_air_humidity_ratio_difference: Optional[
        float
    ] = Field(0.005, ge=0.0)
    zone_humidistat_dehumidification_set_point_schedule_name: Optional[str] = None
    zone_humidistat_humidification_set_point_schedule_name: Optional[str] = None


class TypeOfLoadToSizeOn(Enum):
    field_ = ""
    latent = "Latent"
    sensible = "Sensible"
    total = "Total"
    ventilation_requirement = "VentilationRequirement"


class DesignOutdoorAirFlowRateItem(RootModel):
    root: float = Field(..., ge=0.0)


class CentralHeatingMaximumSystemAirFlowRatioItem(ViewFactorToGroundItem):
    pass


class TypeOfZoneSumToUse(Enum):
    field_ = ""
    coincident = "Coincident"
    non_coincident = "NonCoincident"


class CoolingSupplyAirFlowRateMethod(Enum):
    field_ = ""
    design_day = "DesignDay"
    flow_system = "Flow/System"
    flow_per_cooling_capacity = "FlowPerCoolingCapacity"
    flow_per_floor_area = "FlowPerFloorArea"
    fraction_of_autosized_cooling_airflow = "FractionOfAutosizedCoolingAirflow"


class HeatingSupplyAirFlowRateMethod(Enum):
    field_ = ""
    design_day = "DesignDay"
    flow_system = "Flow/System"
    flow_per_floor_area = "FlowPerFloorArea"
    flow_per_heating_capacity = "FlowPerHeatingCapacity"
    fraction_of_autosized_cooling_airflow = "FractionOfAutosizedCoolingAirflow"
    fraction_of_autosized_heating_airflow = "FractionOfAutosizedHeatingAirflow"


class SystemOutdoorAirMethod(Enum):
    field_ = ""
    standard62_1_simplified_procedure = "Standard62.1SimplifiedProcedure"
    standard62_1_ventilation_rate_procedure = "Standard62.1VentilationRateProcedure"
    zone_sum = "ZoneSum"


class CoolingDesignCapacityMethod(Enum):
    field_ = ""
    capacity_per_floor_area = "CapacityPerFloorArea"
    cooling_design_capacity = "CoolingDesignCapacity"
    fraction_of_autosized_cooling_capacity = "FractionOfAutosizedCoolingCapacity"
    none = "None"


class CoolingDesignCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class HeatingDesignCapacityMethod(Enum):
    field_ = ""
    capacity_per_floor_area = "CapacityPerFloorArea"
    fraction_of_autosized_heating_capacity = "FractionOfAutosizedHeatingCapacity"
    heating_design_capacity = "HeatingDesignCapacity"
    none = "None"


class HeatingDesignCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class CentralCoolingCapacityControlMethod(Enum):
    field_ = ""
    bypass = "Bypass"
    on_off = "OnOff"
    vav = "VAV"
    vt = "VT"


class OccupantDiversityItem(ViewFactorToGroundItem):
    pass


class SizingSystem(BaseModel):
    airloop_name: str
    type_of_load_to_size_on: Optional[TypeOfLoadToSizeOn] = "Sensible"
    design_outdoor_air_flow_rate: Optional[
        Union[
            DesignOutdoorAirFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    central_heating_maximum_system_air_flow_ratio: Optional[
        Union[
            CentralHeatingMaximumSystemAirFlowRatioItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    preheat_design_temperature: float
    preheat_design_humidity_ratio: float
    precool_design_temperature: float
    precool_design_humidity_ratio: float
    central_cooling_design_supply_air_temperature: float
    central_heating_design_supply_air_temperature: float
    type_of_zone_sum_to_use: Optional[TypeOfZoneSumToUse] = "NonCoincident"
    field_100_outdoor_air_in_cooling: Optional[DoZoneSizingCalculation] = Field(
        "No", alias="100_outdoor_air_in_cooling"
    )
    field_100_outdoor_air_in_heating: Optional[DoZoneSizingCalculation] = Field(
        "No", alias="100_outdoor_air_in_heating"
    )
    central_cooling_design_supply_air_humidity_ratio: Optional[float] = 0.008
    central_heating_design_supply_air_humidity_ratio: Optional[float] = 0.008
    cooling_supply_air_flow_rate_method: Optional[
        CoolingSupplyAirFlowRateMethod
    ] = "DesignDay"
    cooling_supply_air_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    cooling_supply_air_flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    cooling_fraction_of_autosized_cooling_supply_air_flow_rate: Optional[float] = Field(
        None, ge=0.0
    )
    cooling_supply_air_flow_rate_per_unit_cooling_capacity: Optional[float] = Field(
        None, ge=0.0
    )
    heating_supply_air_flow_rate_method: Optional[
        HeatingSupplyAirFlowRateMethod
    ] = "DesignDay"
    heating_supply_air_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    heating_supply_air_flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    heating_fraction_of_autosized_heating_supply_air_flow_rate: Optional[float] = Field(
        None, ge=0.0
    )
    heating_fraction_of_autosized_cooling_supply_air_flow_rate: Optional[float] = Field(
        None, ge=0.0
    )
    heating_supply_air_flow_rate_per_unit_heating_capacity: Optional[float] = Field(
        None, ge=0.0
    )
    system_outdoor_air_method: Optional[SystemOutdoorAirMethod] = "ZoneSum"
    zone_maximum_outdoor_air_fraction: Optional[float] = Field(1.0, gt=0.0)
    cooling_design_capacity_method: Optional[
        CoolingDesignCapacityMethod
    ] = "CoolingDesignCapacity"
    cooling_design_capacity: Optional[
        Union[
            CoolingDesignCapacityItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    cooling_design_capacity_per_floor_area: Optional[float] = Field(None, ge=0.0)
    fraction_of_autosized_cooling_design_capacity: Optional[float] = Field(None, ge=0.0)
    heating_design_capacity_method: Optional[
        HeatingDesignCapacityMethod
    ] = "HeatingDesignCapacity"
    heating_design_capacity: Optional[
        Union[
            HeatingDesignCapacityItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    heating_design_capacity_per_floor_area: Optional[float] = Field(None, ge=0.0)
    fraction_of_autosized_heating_design_capacity: Optional[float] = Field(None, ge=0.0)
    central_cooling_capacity_control_method: Optional[
        CentralCoolingCapacityControlMethod
    ] = "OnOff"
    occupant_diversity: Optional[
        Union[
            OccupantDiversityItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"


class LoopType(Enum):
    condenser = "Condenser"
    cooling = "Cooling"
    heating = "Heating"
    steam = "Steam"


class CoincidentSizingFactorMode(Enum):
    global_cooling_sizing_factor = "GlobalCoolingSizingFactor"
    global_heating_sizing_factor = "GlobalHeatingSizingFactor"
    loop_component_sizing_factor = "LoopComponentSizingFactor"
    none = "None"


class SizingPlant(BaseModel):
    plant_or_condenser_loop_name: str
    loop_type: LoopType
    design_loop_exit_temperature: float
    loop_design_temperature_difference: float = Field(..., gt=0.0)
    sizing_option: Optional[TypeOfZoneSumToUse] = "NonCoincident"
    zone_timesteps_in_averaging_window: Optional[int] = Field(1, ge=1)
    coincident_sizing_factor_mode: Optional[CoincidentSizingFactorMode] = None


class ZoneControlHumidistat(BaseModel):
    zone_name: str
    humidifying_relative_humidity_setpoint_schedule_name: str
    dehumidifying_relative_humidity_setpoint_schedule_name: Optional[str] = None


class Control1ObjectType(Enum):
    thermostat_setpoint_dual_setpoint = "ThermostatSetpoint:DualSetpoint"
    thermostat_setpoint_single_cooling = "ThermostatSetpoint:SingleCooling"
    thermostat_setpoint_single_heating = "ThermostatSetpoint:SingleHeating"
    thermostat_setpoint_single_heating_or_cooling = (
        "ThermostatSetpoint:SingleHeatingOrCooling"
    )


class ZoneControlThermostat(BaseModel):
    zone_or_zonelist_name: str
    control_type_schedule_name: str
    control_1_object_type: Control1ObjectType
    control_1_name: str
    control_2_object_type: Optional[Control1ObjectType] = None
    control_2_name: Optional[str] = None
    control_3_object_type: Optional[Control1ObjectType] = None
    control_3_name: Optional[str] = None
    control_4_object_type: Optional[Control1ObjectType] = None
    control_4_name: Optional[str] = None
    temperature_difference_between_cutout_and_setpoint: Optional[float] = Field(
        0.0, ge=0.0
    )


class ThermostatSetpointSingleHeating(BaseModel):
    setpoint_temperature_schedule_name: Optional[str] = None


class ThermostatSetpointSingleCooling(ThermostatSetpointSingleHeating):
    pass


class ThermostatSetpointDualSetpoint(BaseModel):
    heating_setpoint_temperature_schedule_name: Optional[str] = None
    cooling_setpoint_temperature_schedule_name: Optional[str] = None


class HeatingLimit(Enum):
    field_ = ""
    limit_capacity = "LimitCapacity"
    limit_flow_rate = "LimitFlowRate"
    limit_flow_rate_and_capacity = "LimitFlowRateAndCapacity"
    no_limit = "NoLimit"


class MaximumHeatingAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class MaximumSensibleHeatingCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class MaximumCoolingAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class MaximumTotalCoolingCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class DehumidificationControlType(Enum):
    field_ = ""
    constant_sensible_heat_ratio = "ConstantSensibleHeatRatio"
    constant_supply_humidity_ratio = "ConstantSupplyHumidityRatio"
    humidistat = "Humidistat"
    none = "None"


class HumidificationControlType(Enum):
    field_ = ""
    constant_supply_humidity_ratio = "ConstantSupplyHumidityRatio"
    humidistat = "Humidistat"
    none = "None"


class DemandControlledVentilationType(Enum):
    field_ = ""
    co2_setpoint = "CO2Setpoint"
    none = "None"
    occupancy_schedule = "OccupancySchedule"


class OutdoorAirEconomizerType(Enum):
    field_ = ""
    differential_dry_bulb = "DifferentialDryBulb"
    differential_enthalpy = "DifferentialEnthalpy"
    no_economizer = "NoEconomizer"


class HeatRecoveryType(Enum):
    field_ = ""
    enthalpy = "Enthalpy"
    none = "None"
    sensible = "Sensible"


class ZoneHvacIdealLoadsAirSystem(BaseModel):
    availability_schedule_name: Optional[str] = None
    zone_supply_air_node_name: str
    zone_exhaust_air_node_name: Optional[str] = None
    system_inlet_air_node_name: Optional[str] = None
    maximum_heating_supply_air_temperature: Optional[float] = Field(
        50.0, gt=0.0, lt=100.0
    )
    minimum_cooling_supply_air_temperature: Optional[float] = Field(
        13.0, gt=-100.0, lt=50.0
    )
    maximum_heating_supply_air_humidity_ratio: Optional[float] = Field(0.0156, gt=0.0)
    minimum_cooling_supply_air_humidity_ratio: Optional[float] = Field(0.0077, gt=0.0)
    heating_limit: Optional[HeatingLimit] = "NoLimit"
    maximum_heating_air_flow_rate: Optional[
        Union[MaximumHeatingAirFlowRateItem, Literal["Autosize"]]
    ] = None
    maximum_sensible_heating_capacity: Optional[
        Union[MaximumSensibleHeatingCapacityItem, Literal["Autosize"]]
    ] = None
    cooling_limit: Optional[HeatingLimit] = "NoLimit"
    maximum_cooling_air_flow_rate: Optional[
        Union[MaximumCoolingAirFlowRateItem, Literal["Autosize"]]
    ] = None
    maximum_total_cooling_capacity: Optional[
        Union[MaximumTotalCoolingCapacityItem, Literal["Autosize"]]
    ] = None
    heating_availability_schedule_name: Optional[str] = None
    cooling_availability_schedule_name: Optional[str] = None
    dehumidification_control_type: Optional[
        DehumidificationControlType
    ] = "ConstantSensibleHeatRatio"
    cooling_sensible_heat_ratio: Optional[float] = Field(0.7, gt=0.0, le=1.0)
    humidification_control_type: Optional[HumidificationControlType] = "None"
    design_specification_outdoor_air_object_name: Optional[str] = None
    outdoor_air_inlet_node_name: Optional[str] = None
    demand_controlled_ventilation_type: Optional[
        DemandControlledVentilationType
    ] = "None"
    outdoor_air_economizer_type: Optional[OutdoorAirEconomizerType] = "NoEconomizer"
    heat_recovery_type: Optional[HeatRecoveryType] = "None"
    sensible_heat_recovery_effectiveness: Optional[float] = Field(0.7, ge=0.0, le=1.0)
    latent_heat_recovery_effectiveness: Optional[float] = Field(0.65, ge=0.0, le=1.0)
    design_specification_zonehvac_sizing_object_name: Optional[str] = None


class CapacityControlMethod(Enum):
    ashrae90_variable_fan = "ASHRAE90VariableFan"
    constant_fan_variable_flow = "ConstantFanVariableFlow"
    cycling_fan = "CyclingFan"
    multi_speed_fan = "MultiSpeedFan"
    variable_fan_constant_flow = "VariableFanConstantFlow"
    variable_fan_variable_flow = "VariableFanVariableFlow"


class SupplyAirFanObjectType(Enum):
    fan_constant_volume = "Fan:ConstantVolume"
    fan_on_off = "Fan:OnOff"
    fan_system_model = "Fan:SystemModel"
    fan_variable_volume = "Fan:VariableVolume"


class CoolingCoilObjectType(Enum):
    coil_cooling_water = "Coil:Cooling:Water"
    coil_cooling_water_detailed_geometry = "Coil:Cooling:Water:DetailedGeometry"
    coil_system_cooling_water_heat_exchanger_assisted = (
        "CoilSystem:Cooling:Water:HeatExchangerAssisted"
    )


class HeatingCoilObjectType(Enum):
    coil_heating_electric = "Coil:Heating:Electric"
    coil_heating_water = "Coil:Heating:Water"


class MinimumSupplyAirTemperatureInCoolingModeItem(DesignOutdoorAirFlowRateItem):
    pass


class MaximumSupplyAirTemperatureInHeatingModeItem(DesignOutdoorAirFlowRateItem):
    pass


class ZoneHvacFourPipeFanCoil(BaseModel):
    availability_schedule_name: Optional[str] = None
    capacity_control_method: CapacityControlMethod
    maximum_supply_air_flow_rate: Union[float, Literal["Autosize"]]
    low_speed_supply_air_flow_ratio: Optional[float] = Field(0.33, gt=0.0)
    medium_speed_supply_air_flow_ratio: Optional[float] = Field(0.66, gt=0.0)
    maximum_outdoor_air_flow_rate: Union[float, Literal["Autosize"]]
    outdoor_air_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    outdoor_air_mixer_object_type: Optional[Literal["OutdoorAir:Mixer"]] = None
    outdoor_air_mixer_name: Optional[str] = None
    supply_air_fan_object_type: SupplyAirFanObjectType
    supply_air_fan_name: str
    cooling_coil_object_type: CoolingCoilObjectType
    cooling_coil_name: str
    maximum_cold_water_flow_rate: Union[float, Literal["Autosize"]]
    minimum_cold_water_flow_rate: Optional[float] = 0.0
    cooling_convergence_tolerance: Optional[float] = Field(0.001, gt=0.0)
    heating_coil_object_type: HeatingCoilObjectType
    heating_coil_name: str
    maximum_hot_water_flow_rate: Union[float, Literal["Autosize"]]
    minimum_hot_water_flow_rate: Optional[float] = 0.0
    heating_convergence_tolerance: Optional[float] = Field(0.001, gt=0.0)
    availability_manager_list_name: Optional[str] = None
    design_specification_zonehvac_sizing_object_name: Optional[str] = None
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    minimum_supply_air_temperature_in_cooling_mode: Optional[
        Union[
            MinimumSupplyAirTemperatureInCoolingModeItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    maximum_supply_air_temperature_in_heating_mode: Optional[
        Union[
            MaximumSupplyAirTemperatureInHeatingModeItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"


class CoolingSupplyAirFlowRateItem(RootModel):
    root: float = Field(..., gt=0.0)


class HeatingSupplyAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class NoLoadSupplyAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class CoolingOutdoorAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class HeatingOutdoorAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class NoLoadOutdoorAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class SupplyAirFanObjectType1(Enum):
    fan_constant_volume = "Fan:ConstantVolume"
    fan_on_off = "Fan:OnOff"
    fan_system_model = "Fan:SystemModel"


class HeatingCoilObjectType1(Enum):
    coil_heating_electric = "Coil:Heating:Electric"
    coil_heating_fuel = "Coil:Heating:Fuel"
    coil_heating_steam = "Coil:Heating:Steam"
    coil_heating_water = "Coil:Heating:Water"


class CoolingCoilObjectType1(Enum):
    coil_cooling_dx = "Coil:Cooling:DX"
    coil_cooling_dx_single_speed = "Coil:Cooling:DX:SingleSpeed"
    coil_cooling_dx_variable_speed = "Coil:Cooling:DX:VariableSpeed"
    coil_system_cooling_dx_heat_exchanger_assisted = (
        "CoilSystem:Cooling:DX:HeatExchangerAssisted"
    )


class FanPlacement(Enum):
    field_ = ""
    blow_through = "BlowThrough"
    draw_through = "DrawThrough"


class CapacityControlMethod1(Enum):
    field_ = ""
    none = "None"
    single_zone_vav = "SingleZoneVAV"


class ZoneHvacPackagedTerminalAirConditioner(BaseModel):
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    outdoor_air_mixer_object_type: Optional[Literal["OutdoorAir:Mixer"]] = None
    outdoor_air_mixer_name: Optional[str] = None
    cooling_supply_air_flow_rate: Union[
        CoolingSupplyAirFlowRateItem, Literal["Autosize"]
    ]
    heating_supply_air_flow_rate: Union[
        HeatingSupplyAirFlowRateItem, Literal["Autosize"]
    ]
    no_load_supply_air_flow_rate: Optional[
        Union[NoLoadSupplyAirFlowRateItem, Literal["Autosize"]]
    ] = None
    cooling_outdoor_air_flow_rate: Union[
        CoolingOutdoorAirFlowRateItem, Literal["Autosize"]
    ]
    heating_outdoor_air_flow_rate: Union[
        HeatingOutdoorAirFlowRateItem, Literal["Autosize"]
    ]
    no_load_outdoor_air_flow_rate: Optional[
        Union[NoLoadOutdoorAirFlowRateItem, Literal["Autosize"]]
    ] = None
    supply_air_fan_object_type: SupplyAirFanObjectType1
    supply_air_fan_name: str
    heating_coil_object_type: HeatingCoilObjectType1
    heating_coil_name: str
    cooling_coil_object_type: CoolingCoilObjectType1
    cooling_coil_name: str
    fan_placement: Optional[FanPlacement] = "DrawThrough"
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    availability_manager_list_name: Optional[str] = None
    design_specification_zonehvac_sizing_object_name: Optional[str] = None
    capacity_control_method: Optional[CapacityControlMethod1] = "None"
    minimum_supply_air_temperature_in_cooling_mode: Optional[
        Union[
            MinimumSupplyAirTemperatureInCoolingModeItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    maximum_supply_air_temperature_in_heating_mode: Optional[
        Union[
            MaximumSupplyAirTemperatureInHeatingModeItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"


class SupplyAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class ExhaustAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class ZoneHvacEnergyRecoveryVentilator(BaseModel):
    availability_schedule_name: Optional[str] = None
    heat_exchanger_name: str
    supply_air_flow_rate: Union[SupplyAirFlowRateItem, Literal["Autosize"]]
    exhaust_air_flow_rate: Union[ExhaustAirFlowRateItem, Literal["Autosize"]]
    supply_air_fan_name: str
    exhaust_air_fan_name: str
    controller_name: Optional[str] = None
    ventilation_rate_per_unit_floor_area: Optional[float] = Field(None, ge=0.0)
    ventilation_rate_per_occupant: Optional[float] = Field(None, ge=0.0)
    availability_manager_list_name: Optional[str] = None


class ExhaustAirTemperatureLimit(Enum):
    field_ = ""
    exhaust_air_temperature_limit = "ExhaustAirTemperatureLimit"
    no_exhaust_air_temperature_limit = "NoExhaustAirTemperatureLimit"


class ExhaustAirEnthalpyLimit(Enum):
    field_ = ""
    exhaust_air_enthalpy_limit = "ExhaustAirEnthalpyLimit"
    no_exhaust_air_enthalpy_limit = "NoExhaustAirEnthalpyLimit"


class ZoneHvacEnergyRecoveryVentilatorController(BaseModel):
    temperature_high_limit: Optional[float] = None
    temperature_low_limit: Optional[float] = None
    enthalpy_high_limit: Optional[float] = None
    dewpoint_temperature_limit: Optional[float] = None
    electronic_enthalpy_limit_curve_name: Optional[str] = None
    exhaust_air_temperature_limit: Optional[
        ExhaustAirTemperatureLimit
    ] = "NoExhaustAirTemperatureLimit"
    exhaust_air_enthalpy_limit: Optional[
        ExhaustAirEnthalpyLimit
    ] = "NoExhaustAirEnthalpyLimit"
    time_of_day_economizer_flow_control_schedule_name: Optional[str] = None
    high_humidity_control_flag: Optional[DoZoneSizingCalculation] = "No"
    humidistat_control_zone_name: Optional[str] = None
    high_humidity_outdoor_air_flow_ratio: Optional[float] = Field(1.0, gt=0.0)
    control_high_indoor_humidity_based_on_outdoor_humidity_ratio: Optional[
        DoZoneSizingCalculation
    ] = "Yes"


class MaximumSupplyAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class SupplyAirFanOperationDuringNoHeating(Enum):
    no = "No"
    yes = "Yes"


class MaximumHotWaterOrSteamFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class ZoneHvacUnitHeater(BaseModel):
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: Optional[str] = None
    air_outlet_node_name: Optional[str] = None
    supply_air_fan_object_type: SupplyAirFanObjectType
    supply_air_fan_name: str
    maximum_supply_air_flow_rate: Union[
        MaximumSupplyAirFlowRateItem, Literal["Autosize"]
    ]
    heating_coil_object_type: HeatingCoilObjectType1
    heating_coil_name: str
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    supply_air_fan_operation_during_no_heating: SupplyAirFanOperationDuringNoHeating
    maximum_hot_water_or_steam_flow_rate: Optional[
        Union[MaximumHotWaterOrSteamFlowRateItem, Literal["Autosize"]]
    ] = None
    minimum_hot_water_or_steam_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    heating_convergence_tolerance: Optional[float] = Field(0.001, gt=0.0)
    availability_manager_list_name: Optional[str] = None
    design_specification_zonehvac_sizing_object_name: Optional[str] = None


class HeatingDesignCapacityMethod1(Enum):
    field_ = ""
    capacity_per_floor_area = "CapacityPerFloorArea"
    fraction_of_autosized_heating_capacity = "FractionOfAutosizedHeatingCapacity"
    heating_design_capacity = "HeatingDesignCapacity"


class FuelType1(Enum):
    electricity = "Electricity"
    natural_gas = "NaturalGas"


class TemperatureControlType(Enum):
    field_ = ""
    mean_air_temperature = "MeanAirTemperature"
    mean_air_temperature_setpoint = "MeanAirTemperatureSetpoint"
    mean_radiant_temperature = "MeanRadiantTemperature"
    mean_radiant_temperature_setpoint = "MeanRadiantTemperatureSetpoint"
    operative_temperature = "OperativeTemperature"
    operative_temperature_setpoint = "OperativeTemperatureSetpoint"


class SurfaceFraction(BaseModel):
    surface_name: Optional[str] = None
    fraction_of_radiant_energy_to_surface: Optional[float] = Field(None, ge=0.0, le=1.0)


class ZoneHvacHighTemperatureRadiant(BaseModel):
    availability_schedule_name: Optional[str] = None
    zone_name: str
    heating_design_capacity_method: Optional[
        HeatingDesignCapacityMethod1
    ] = "HeatingDesignCapacity"
    heating_design_capacity: Optional[
        Union[
            HeatingDesignCapacityItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    heating_design_capacity_per_floor_area: Optional[float] = Field(None, ge=0.0)
    fraction_of_autosized_heating_design_capacity: Optional[float] = Field(1.0, ge=0.0)
    fuel_type: FuelType1
    combustion_efficiency: Optional[float] = Field(0.9, ge=0.0, le=1.0)
    fraction_of_input_converted_to_radiant_energy: Optional[float] = Field(
        0.7, ge=0.0, le=1.0
    )
    fraction_of_input_converted_to_latent_energy: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    fraction_of_input_that_is_lost: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    temperature_control_type: Optional[TemperatureControlType] = "OperativeTemperature"
    heating_throttling_range: Optional[float] = Field(2.0, ge=0.0)
    heating_setpoint_temperature_schedule_name: Optional[str] = None
    fraction_of_radiant_energy_incident_on_people: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    surface_fractions: Optional[List[SurfaceFraction]] = None


class MaximumAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class PerPersonVentilationRateMode(Enum):
    field_ = ""
    current_occupancy = "CurrentOccupancy"
    design_occupancy = "DesignOccupancy"


class AirTerminalSingleDuctConstantVolumeNoReheat(BaseModel):
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    maximum_air_flow_rate: Union[MaximumAirFlowRateItem, Literal["Autosize"]]
    design_specification_outdoor_air_object_name: Optional[str] = None
    per_person_ventilation_rate_mode: Optional[
        PerPersonVentilationRateMode
    ] = "CurrentOccupancy"


class ZoneMinimumAirFlowInputMethod(Enum):
    field_ = ""
    constant = "Constant"
    fixed_flow_rate = "FixedFlowRate"
    scheduled = "Scheduled"


class MaximumHotWaterOrSteamFlowRateItem1(DesignOutdoorAirFlowRateItem):
    pass


class DamperHeatingAction(Enum):
    field_ = ""
    normal = "Normal"
    reverse = "Reverse"
    reverse_with_limits = "ReverseWithLimits"


class AirTerminalSingleDuctVavReheat(BaseModel):
    availability_schedule_name: Optional[str] = None
    damper_air_outlet_node_name: str
    air_inlet_node_name: str
    maximum_air_flow_rate: Union[MaximumAirFlowRateItem, Literal["Autosize"]]
    zone_minimum_air_flow_input_method: Optional[
        ZoneMinimumAirFlowInputMethod
    ] = "Constant"
    constant_minimum_air_flow_fraction: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    fixed_minimum_air_flow_rate: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    minimum_air_flow_fraction_schedule_name: Optional[str] = None
    reheat_coil_object_type: HeatingCoilObjectType1
    reheat_coil_name: str
    maximum_hot_water_or_steam_flow_rate: Optional[
        Union[MaximumHotWaterOrSteamFlowRateItem1, Literal["Autosize"]]
    ] = None
    minimum_hot_water_or_steam_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    air_outlet_node_name: str
    convergence_tolerance: Optional[float] = Field(0.001, gt=0.0)
    damper_heating_action: Optional[DamperHeatingAction] = "ReverseWithLimits"
    maximum_flow_per_zone_floor_area_during_reheat: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    maximum_flow_fraction_during_reheat: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    maximum_reheat_air_temperature: Optional[float] = Field(None, gt=0.0)
    design_specification_outdoor_air_object_name: Optional[str] = None
    minimum_air_flow_turndown_schedule_name: Optional[str] = None


class AirTerminalObjectType(Enum):
    air_terminal_dual_duct_constant_volume = "AirTerminal:DualDuct:ConstantVolume"
    air_terminal_dual_duct_vav = "AirTerminal:DualDuct:VAV"
    air_terminal_dual_duct_vav_outdoor_air = "AirTerminal:DualDuct:VAV:OutdoorAir"
    air_terminal_single_duct_constant_volume_cooled_beam = (
        "AirTerminal:SingleDuct:ConstantVolume:CooledBeam"
    )
    air_terminal_single_duct_constant_volume_four_pipe_beam = (
        "AirTerminal:SingleDuct:ConstantVolume:FourPipeBeam"
    )
    air_terminal_single_duct_constant_volume_four_pipe_induction = (
        "AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction"
    )
    air_terminal_single_duct_constant_volume_no_reheat = (
        "AirTerminal:SingleDuct:ConstantVolume:NoReheat"
    )
    air_terminal_single_duct_constant_volume_reheat = (
        "AirTerminal:SingleDuct:ConstantVolume:Reheat"
    )
    air_terminal_single_duct_mixer = "AirTerminal:SingleDuct:Mixer"
    air_terminal_single_duct_parallel_piu_reheat = (
        "AirTerminal:SingleDuct:ParallelPIU:Reheat"
    )
    air_terminal_single_duct_series_piu_reheat = (
        "AirTerminal:SingleDuct:SeriesPIU:Reheat"
    )
    air_terminal_single_duct_user_defined = "AirTerminal:SingleDuct:UserDefined"
    air_terminal_single_duct_vav_heat_and_cool_no_reheat = (
        "AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat"
    )
    air_terminal_single_duct_vav_heat_and_cool_reheat = (
        "AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat"
    )
    air_terminal_single_duct_vav_no_reheat = "AirTerminal:SingleDuct:VAV:NoReheat"
    air_terminal_single_duct_vav_reheat = "AirTerminal:SingleDuct:VAV:Reheat"
    air_terminal_single_duct_vav_reheat_variable_speed_fan = (
        "AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan"
    )


class ZoneHvacAirDistributionUnit(BaseModel):
    air_distribution_unit_outlet_node_name: str
    air_terminal_object_type: AirTerminalObjectType
    air_terminal_name: str
    nominal_upstream_leakage_fraction: Optional[float] = Field(0.0, ge=0.0, le=0.3)
    constant_downstream_leakage_fraction: Optional[float] = Field(0.0, ge=0.0, le=0.3)
    design_specification_air_terminal_sizing_object_name: Optional[str] = None


class LoadDistributionScheme(Enum):
    field_ = ""
    sequential_load = "SequentialLoad"
    sequential_uniform_plr = "SequentialUniformPLR"
    uniform_load = "UniformLoad"
    uniform_plr = "UniformPLR"


class ZoneEquipmentObjectType(Enum):
    air_loop_hvac_unitary_system = "AirLoopHVAC:UnitarySystem"
    fan_zone_exhaust = "Fan:ZoneExhaust"
    heat_exchanger_air_to_air_flat_plate = "HeatExchanger:AirToAir:FlatPlate"
    water_heater_heat_pump_pumped_condenser = "WaterHeater:HeatPump:PumpedCondenser"
    water_heater_heat_pump_wrapped_condenser = "WaterHeater:HeatPump:WrappedCondenser"
    zone_hvac_air_distribution_unit = "ZoneHVAC:AirDistributionUnit"
    zone_hvac_baseboard_convective_electric = "ZoneHVAC:Baseboard:Convective:Electric"
    zone_hvac_baseboard_convective_water = "ZoneHVAC:Baseboard:Convective:Water"
    zone_hvac_baseboard_radiant_convective_electric = (
        "ZoneHVAC:Baseboard:RadiantConvective:Electric"
    )
    zone_hvac_baseboard_radiant_convective_steam = (
        "ZoneHVAC:Baseboard:RadiantConvective:Steam"
    )
    zone_hvac_baseboard_radiant_convective_water = (
        "ZoneHVAC:Baseboard:RadiantConvective:Water"
    )
    zone_hvac_cooling_panel_radiant_convective_water = (
        "ZoneHVAC:CoolingPanel:RadiantConvective:Water"
    )
    zone_hvac_dehumidifier_dx = "ZoneHVAC:Dehumidifier:DX"
    zone_hvac_energy_recovery_ventilator = "ZoneHVAC:EnergyRecoveryVentilator"
    zone_hvac_evaporative_cooler_unit = "ZoneHVAC:EvaporativeCoolerUnit"
    zone_hvac_forced_air_user_defined = "ZoneHVAC:ForcedAir:UserDefined"
    zone_hvac_four_pipe_fan_coil = "ZoneHVAC:FourPipeFanCoil"
    zone_hvac_high_temperature_radiant = "ZoneHVAC:HighTemperatureRadiant"
    zone_hvac_hybrid_unitary_hvac = "ZoneHVAC:HybridUnitaryHVAC"
    zone_hvac_ideal_loads_air_system = "ZoneHVAC:IdealLoadsAirSystem"
    zone_hvac_low_temperature_radiant_constant_flow = (
        "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
    )
    zone_hvac_low_temperature_radiant_electric = (
        "ZoneHVAC:LowTemperatureRadiant:Electric"
    )
    zone_hvac_low_temperature_radiant_variable_flow = (
        "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
    )
    zone_hvac_outdoor_air_unit = "ZoneHVAC:OutdoorAirUnit"
    zone_hvac_packaged_terminal_air_conditioner = (
        "ZoneHVAC:PackagedTerminalAirConditioner"
    )
    zone_hvac_packaged_terminal_heat_pump = "ZoneHVAC:PackagedTerminalHeatPump"
    zone_hvac_refrigeration_chiller_set = "ZoneHVAC:RefrigerationChillerSet"
    zone_hvac_terminal_unit_variable_refrigerant_flow = (
        "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
    )
    zone_hvac_unit_heater = "ZoneHVAC:UnitHeater"
    zone_hvac_unit_ventilator = "ZoneHVAC:UnitVentilator"
    zone_hvac_ventilated_slab = "ZoneHVAC:VentilatedSlab"
    zone_hvac_water_to_air_heat_pump = "ZoneHVAC:WaterToAirHeatPump"
    zone_hvac_window_air_conditioner = "ZoneHVAC:WindowAirConditioner"


class EquipmentItem(BaseModel):
    zone_equipment_object_type: ZoneEquipmentObjectType
    zone_equipment_name: str
    zone_equipment_cooling_sequence: int = Field(..., ge=0)
    zone_equipment_heating_or_no_load_sequence: int = Field(..., ge=0)
    zone_equipment_sequential_cooling_fraction_schedule_name: Optional[str] = None
    zone_equipment_sequential_heating_fraction_schedule_name: Optional[str] = None


class ZoneHvacEquipmentList(BaseModel):
    load_distribution_scheme: Optional[LoadDistributionScheme] = "SequentialLoad"
    equipment: Optional[List[EquipmentItem]] = None


class ZoneHvacEquipmentConnections(BaseModel):
    zone_name: str
    zone_conditioning_equipment_list_name: str
    zone_air_inlet_node_or_nodelist_name: Optional[str] = None
    zone_air_exhaust_node_or_nodelist_name: Optional[str] = None
    zone_air_node_name: str
    zone_return_air_node_or_nodelist_name: Optional[str] = None
    zone_return_air_node_1_flow_rate_fraction_schedule_name: Optional[str] = None
    zone_return_air_node_1_flow_rate_basis_node_or_nodelist_name: Optional[str] = None


class DesignMaximumAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class SpeedControlMethod(Enum):
    field_ = ""
    continuous = "Continuous"
    discrete = "Discrete"


class DesignPowerSizingMethod(Enum):
    field_ = ""
    power_per_flow = "PowerPerFlow"
    power_per_flow_per_pressure = "PowerPerFlowPerPressure"
    total_efficiency_and_pressure = "TotalEfficiencyAndPressure"


class SpeedFraction(BaseModel):
    speed_flow_fraction: Optional[float] = Field(None, ge=0.0, le=1.0)
    speed_electric_power_fraction: Optional[float] = Field(None, ge=0.0, le=1.0)


class FanSystemModel(BaseModel):
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    design_maximum_air_flow_rate: Union[
        DesignMaximumAirFlowRateItem, Literal["Autosize"]
    ]
    speed_control_method: Optional[SpeedControlMethod] = "Discrete"
    electric_power_minimum_flow_rate_fraction: Optional[float] = Field(
        0.2, ge=0.0, le=1.0
    )
    design_pressure_rise: float = Field(..., gt=0.0)
    motor_efficiency: Optional[float] = Field(0.9, gt=0.0, le=1.0)
    motor_in_air_stream_fraction: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    design_electric_power_consumption: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    design_power_sizing_method: Optional[
        DesignPowerSizingMethod
    ] = "PowerPerFlowPerPressure"
    electric_power_per_unit_flow_rate: Optional[float] = None
    electric_power_per_unit_flow_rate_per_unit_pressure: Optional[float] = 1.66667
    fan_total_efficiency: Optional[float] = Field(0.7, gt=0.0, le=1.0)
    electric_power_function_of_flow_fraction_curve_name: Optional[str] = None
    night_ventilation_mode_pressure_rise: Optional[float] = None
    night_ventilation_mode_flow_fraction: Optional[float] = Field(None, ge=0.0, le=1.0)
    motor_loss_zone_name: Optional[str] = None
    motor_loss_radiative_fraction: Optional[float] = Field(None, ge=0.0, le=1.0)
    end_use_subcategory: Optional[str] = "General"
    number_of_speeds: Optional[int] = 1
    speed_fractions: Optional[List[SpeedFraction]] = None


class MaximumFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class FanConstantVolume(BaseModel):
    availability_schedule_name: Optional[str] = None
    fan_total_efficiency: Optional[float] = Field(0.7, gt=0.0, le=1.0)
    pressure_rise: float
    maximum_flow_rate: Optional[Union[MaximumFlowRateItem, Literal["Autosize"]]] = None
    motor_efficiency: Optional[float] = Field(0.9, gt=0.0, le=1.0)
    motor_in_airstream_fraction: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    air_inlet_node_name: str
    air_outlet_node_name: str
    end_use_subcategory: Optional[str] = "General"


class FanPowerMinimumFlowRateInputMethod(Enum):
    field_ = ""
    fixed_flow_rate = "FixedFlowRate"
    fraction = "Fraction"


class FanVariableVolume(BaseModel):
    availability_schedule_name: Optional[str] = None
    fan_total_efficiency: Optional[float] = Field(0.7, gt=0.0, le=1.0)
    pressure_rise: float
    maximum_flow_rate: Optional[Union[MaximumFlowRateItem, Literal["Autosize"]]] = None
    fan_power_minimum_flow_rate_input_method: Optional[
        FanPowerMinimumFlowRateInputMethod
    ] = "Fraction"
    fan_power_minimum_flow_fraction: Optional[float] = Field(0.25, ge=0.0, le=1.0)
    fan_power_minimum_air_flow_rate: Optional[float] = Field(None, ge=0.0)
    motor_efficiency: Optional[float] = Field(0.9, gt=0.0, le=1.0)
    motor_in_airstream_fraction: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    fan_power_coefficient_1: Optional[float] = None
    fan_power_coefficient_2: Optional[float] = None
    fan_power_coefficient_3: Optional[float] = None
    fan_power_coefficient_4: Optional[float] = None
    fan_power_coefficient_5: Optional[float] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    end_use_subcategory: Optional[str] = "General"


class FanOnOff(BaseModel):
    availability_schedule_name: Optional[str] = None
    fan_total_efficiency: Optional[float] = Field(0.6, gt=0.0, le=1.0)
    pressure_rise: float
    maximum_flow_rate: Optional[Union[MaximumFlowRateItem, Literal["Autosize"]]] = None
    motor_efficiency: Optional[float] = Field(0.8, gt=0.0, le=1.0)
    motor_in_airstream_fraction: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    air_inlet_node_name: str
    air_outlet_node_name: str
    fan_power_ratio_function_of_speed_ratio_curve_name: Optional[str] = None
    fan_efficiency_ratio_function_of_speed_ratio_curve_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"


class SystemAvailabilityManagerCouplingMode(Enum):
    field_ = ""
    coupled = "Coupled"
    decoupled = "Decoupled"


class FanZoneExhaust(BaseModel):
    availability_schedule_name: Optional[str] = None
    fan_total_efficiency: Optional[float] = Field(0.6, gt=0.0, le=1.0)
    pressure_rise: float
    maximum_flow_rate: Optional[float] = Field(None, ge=0.0)
    air_inlet_node_name: str
    air_outlet_node_name: str
    end_use_subcategory: Optional[str] = "General"
    flow_fraction_schedule_name: Optional[str] = None
    system_availability_manager_coupling_mode: Optional[
        SystemAvailabilityManagerCouplingMode
    ] = "Coupled"
    minimum_zone_temperature_limit_schedule_name: Optional[str] = None
    balanced_exhaust_fraction_schedule_name: Optional[str] = None


class DesignWaterFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class DesignAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class DesignInletWaterTemperatureItem(CoolingSupplyAirFlowRateItem):
    pass


class DesignInletAirTemperatureItem(CoolingSupplyAirFlowRateItem):
    pass


class DesignOutletAirTemperatureItem(CoolingSupplyAirFlowRateItem):
    pass


class DesignInletAirHumidityRatioItem(DesignOutdoorAirFlowRateItem):
    pass


class DesignOutletAirHumidityRatioItem(DesignOutdoorAirFlowRateItem):
    pass


class TypeOfAnalysis(Enum):
    field_ = ""
    detailed_analysis = "DetailedAnalysis"
    simple_analysis = "SimpleAnalysis"


class HeatExchangerConfiguration(Enum):
    field_ = ""
    counter_flow = "CounterFlow"
    cross_flow = "CrossFlow"


class CoilCoolingWater(BaseModel):
    availability_schedule_name: Optional[str] = None
    design_water_flow_rate: Optional[
        Union[
            DesignWaterFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    design_air_flow_rate: Optional[
        Union[
            DesignAirFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    design_inlet_water_temperature: Optional[
        Union[
            DesignInletWaterTemperatureItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    design_inlet_air_temperature: Optional[
        Union[
            DesignInletAirTemperatureItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    design_outlet_air_temperature: Optional[
        Union[
            DesignOutletAirTemperatureItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    design_inlet_air_humidity_ratio: Optional[
        Union[
            DesignInletAirHumidityRatioItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    design_outlet_air_humidity_ratio: Optional[
        Union[
            DesignOutletAirHumidityRatioItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    water_inlet_node_name: str
    water_outlet_node_name: str
    air_inlet_node_name: str
    air_outlet_node_name: str
    type_of_analysis: Optional[TypeOfAnalysis] = "SimpleAnalysis"
    heat_exchanger_configuration: Optional[HeatExchangerConfiguration] = "CounterFlow"
    condensate_collection_water_storage_tank_name: Optional[str] = None
    design_water_temperature_difference: Optional[float] = Field(None, gt=0.0)


class TotalTubeInsideAreaItem(CoolingSupplyAirFlowRateItem):
    pass


class MinimumAirflowAreaItem(CoolingSupplyAirFlowRateItem):
    pass


class CoilDepthItem(CoolingSupplyAirFlowRateItem):
    pass


class FinDiameterItem(CoolingSupplyAirFlowRateItem):
    pass


class NumberOfTubesPerRowItem(CoolingSupplyAirFlowRateItem):
    pass


class CoilCoolingWaterDetailedGeometry(BaseModel):
    availability_schedule_name: Optional[str] = None
    maximum_water_flow_rate: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    tube_outside_surface_area: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    total_tube_inside_area: Optional[
        Union[
            TotalTubeInsideAreaItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    fin_surface_area: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    minimum_airflow_area: Optional[
        Union[
            MinimumAirflowAreaItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    coil_depth: Optional[
        Union[CoilDepthItem, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    fin_diameter: Optional[
        Union[FinDiameterItem, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    fin_thickness: Optional[float] = Field(0.0015, gt=0.0)
    tube_inside_diameter: Optional[float] = Field(0.01445, gt=0.0)
    tube_outside_diameter: Optional[float] = Field(0.0159, gt=0.0)
    tube_thermal_conductivity: Optional[float] = Field(386.0, ge=1.0)
    fin_thermal_conductivity: Optional[float] = Field(204.0, ge=1.0)
    fin_spacing: Optional[float] = Field(0.0018, gt=0.0)
    tube_depth_spacing: Optional[float] = Field(0.026, gt=0.0)
    number_of_tube_rows: Optional[float] = Field(4.0, gt=0.0)
    number_of_tubes_per_row: Optional[
        Union[
            NumberOfTubesPerRowItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    water_inlet_node_name: str
    water_outlet_node_name: str
    air_inlet_node_name: str
    air_outlet_node_name: str
    condensate_collection_water_storage_tank_name: Optional[str] = None
    design_water_temperature_difference: Optional[float] = Field(None, gt=0.0)
    design_inlet_water_temperature: Optional[
        Union[
            DesignInletWaterTemperatureItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"


class GrossRatedTotalCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class GrossRatedSensibleHeatRatioItem(RootModel):
    root: float = Field(..., ge=0.5, le=1.0)


class RatedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class CondenserType(Enum):
    field_ = ""
    air_cooled = "AirCooled"
    evaporatively_cooled = "EvaporativelyCooled"


class EvaporativeCondenserAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class EvaporativeCondenserPumpRatedPowerConsumptionItem(DesignOutdoorAirFlowRateItem):
    pass


class CoilCoolingDxSingleSpeed(BaseModel):
    availability_schedule_name: Optional[str] = None
    gross_rated_total_cooling_capacity: Union[
        GrossRatedTotalCoolingCapacityItem, Literal["Autosize"]
    ]
    gross_rated_sensible_heat_ratio: Union[
        GrossRatedSensibleHeatRatioItem, Literal["Autosize"]
    ]
    gross_rated_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    rated_air_flow_rate: Union[RatedAirFlowRateItem, Literal["Autosize"]]
    field_2017_rated_evaporator_fan_power_per_volume_flow_rate: Optional[float] = Field(
        773.3,
        alias="2017_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1250.0,
    )
    field_2023_rated_evaporator_fan_power_per_volume_flow_rate: Optional[float] = Field(
        934.4,
        alias="2023_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1505.0,
    )
    air_inlet_node_name: str
    air_outlet_node_name: str
    total_cooling_capacity_function_of_temperature_curve_name: str
    total_cooling_capacity_function_of_flow_fraction_curve_name: str
    energy_input_ratio_function_of_temperature_curve_name: str
    energy_input_ratio_function_of_flow_fraction_curve_name: str
    part_load_fraction_correlation_curve_name: str
    minimum_outdoor_dry_bulb_temperature_for_compressor_operation: Optional[
        float
    ] = -25.0
    nominal_time_for_condensate_removal_to_begin: Optional[float] = Field(
        0.0, ge=0.0, le=3000.0
    )
    ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity: Optional[
        float
    ] = Field(
        0.0, ge=0.0, le=5.0
    )
    maximum_cycling_rate: Optional[float] = Field(0.0, ge=0.0, le=5.0)
    latent_capacity_time_constant: Optional[float] = Field(0.0, ge=0.0, le=500.0)
    condenser_air_inlet_node_name: Optional[str] = None
    condenser_type: Optional[CondenserType] = "AirCooled"
    evaporative_condenser_effectiveness: Optional[float] = Field(0.9, ge=0.0, le=1.0)
    evaporative_condenser_air_flow_rate: Optional[
        Union[EvaporativeCondenserAirFlowRateItem, Literal["Autosize"]]
    ] = None
    evaporative_condenser_pump_rated_power_consumption: Optional[
        Union[
            EvaporativeCondenserPumpRatedPowerConsumptionItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = 0.0
    crankcase_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation: Optional[
        float
    ] = Field(10.0, ge=0.0)
    supply_water_storage_tank_name: Optional[str] = None
    condensate_collection_water_storage_tank_name: Optional[str] = None
    basin_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    basin_heater_setpoint_temperature: Optional[float] = Field(2.0, ge=2.0)
    basin_heater_operating_schedule_name: Optional[str] = None
    sensible_heat_ratio_function_of_temperature_curve_name: Optional[str] = None
    sensible_heat_ratio_function_of_flow_fraction_curve_name: Optional[str] = None
    report_ashrae_standard_127_performance_ratings: Optional[
        DoZoneSizingCalculation
    ] = "No"
    zone_name_for_condenser_placement: Optional[str] = None


class HighSpeedGrossRatedTotalCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class HighSpeedRatedSensibleHeatRatioItem(GrossRatedSensibleHeatRatioItem):
    pass


class HighSpeedRatedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class LowSpeedGrossRatedTotalCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class LowSpeedGrossRatedSensibleHeatRatioItem(GrossRatedSensibleHeatRatioItem):
    pass


class LowSpeedRatedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class HighSpeedEvaporativeCondenserAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class HighSpeedEvaporativeCondenserPumpRatedPowerConsumptionItem(
    DesignOutdoorAirFlowRateItem
):
    pass


class LowSpeedEvaporativeCondenserAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class LowSpeedEvaporativeCondenserPumpRatedPowerConsumptionItem(
    DesignOutdoorAirFlowRateItem
):
    pass


class CoilCoolingDxTwoSpeed(BaseModel):
    availability_schedule_name: Optional[str] = None
    high_speed_gross_rated_total_cooling_capacity: Union[
        HighSpeedGrossRatedTotalCoolingCapacityItem, Literal["Autosize"]
    ]
    high_speed_rated_sensible_heat_ratio: Union[
        HighSpeedRatedSensibleHeatRatioItem, Literal["Autosize"]
    ]
    high_speed_gross_rated_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    high_speed_rated_air_flow_rate: Union[
        HighSpeedRatedAirFlowRateItem, Literal["Autosize"]
    ]
    unit_internal_static_air_pressure: Optional[float] = Field(None, gt=0.0)
    air_inlet_node_name: str
    air_outlet_node_name: str
    total_cooling_capacity_function_of_temperature_curve_name: str
    total_cooling_capacity_function_of_flow_fraction_curve_name: str
    energy_input_ratio_function_of_temperature_curve_name: str
    energy_input_ratio_function_of_flow_fraction_curve_name: str
    part_load_fraction_correlation_curve_name: str
    low_speed_gross_rated_total_cooling_capacity: Union[
        LowSpeedGrossRatedTotalCoolingCapacityItem, Literal["Autosize"]
    ]
    low_speed_gross_rated_sensible_heat_ratio: Union[
        LowSpeedGrossRatedSensibleHeatRatioItem, Literal["Autosize"]
    ]
    low_speed_gross_rated_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    low_speed_rated_air_flow_rate: Union[
        LowSpeedRatedAirFlowRateItem, Literal["Autosize"]
    ]
    low_speed_total_cooling_capacity_function_of_temperature_curve_name: str
    low_speed_energy_input_ratio_function_of_temperature_curve_name: str
    condenser_air_inlet_node_name: Optional[str] = None
    condenser_type: Optional[CondenserType] = "AirCooled"
    minimum_outdoor_dry_bulb_temperature_for_compressor_operation: Optional[
        float
    ] = -25.0
    high_speed_evaporative_condenser_effectiveness: Optional[float] = Field(
        0.9, ge=0.0, le=1.0
    )
    high_speed_evaporative_condenser_air_flow_rate: Optional[
        Union[HighSpeedEvaporativeCondenserAirFlowRateItem, Literal["Autosize"]]
    ] = None
    high_speed_evaporative_condenser_pump_rated_power_consumption: Optional[
        Union[
            HighSpeedEvaporativeCondenserPumpRatedPowerConsumptionItem,
            Literal["Autosize"],
        ]
    ] = None
    low_speed_evaporative_condenser_effectiveness: Optional[float] = Field(
        0.9, ge=0.0, le=1.0
    )
    low_speed_evaporative_condenser_air_flow_rate: Optional[
        Union[LowSpeedEvaporativeCondenserAirFlowRateItem, Literal["Autosize"]]
    ] = None
    low_speed_evaporative_condenser_pump_rated_power_consumption: Optional[
        Union[
            LowSpeedEvaporativeCondenserPumpRatedPowerConsumptionItem,
            Literal["Autosize"],
        ]
    ] = None
    supply_water_storage_tank_name: Optional[str] = None
    condensate_collection_water_storage_tank_name: Optional[str] = None
    basin_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    basin_heater_setpoint_temperature: Optional[float] = Field(2.0, ge=2.0)
    basin_heater_operating_schedule_name: Optional[str] = None
    sensible_heat_ratio_function_of_temperature_curve_name: Optional[str] = None
    sensible_heat_ratio_function_of_flow_fraction_curve_name: Optional[str] = None
    low_speed_sensible_heat_ratio_function_of_temperature_curve_name: Optional[
        str
    ] = None
    low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name: Optional[
        str
    ] = None
    zone_name_for_condenser_placement: Optional[str] = None


class FuelType2(Enum):
    diesel = "Diesel"
    electricity = "Electricity"
    fuel_oil_no1 = "FuelOilNo1"
    fuel_oil_no2 = "FuelOilNo2"
    gasoline = "Gasoline"
    natural_gas = "NaturalGas"
    other_fuel1 = "OtherFuel1"
    other_fuel2 = "OtherFuel2"
    propane = "Propane"


class Speed1GrossRatedTotalCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed1GrossRatedSensibleHeatRatioItem(GrossRatedSensibleHeatRatioItem):
    pass


class Speed1RatedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed1EvaporativeCondenserAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed1RatedEvaporativeCondenserPumpPowerConsumptionItem(
    DesignOutdoorAirFlowRateItem
):
    pass


class Speed2GrossRatedTotalCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed2GrossRatedSensibleHeatRatioItem(GrossRatedSensibleHeatRatioItem):
    pass


class Speed2RatedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed2EvaporativeCondenserAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed2RatedEvaporativeCondenserPumpPowerConsumptionItem(
    DesignOutdoorAirFlowRateItem
):
    pass


class Speed3GrossRatedTotalCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed3GrossRatedSensibleHeatRatioItem(GrossRatedSensibleHeatRatioItem):
    pass


class Speed3RatedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed3EvaporativeCondenserAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed3RatedEvaporativeCondenserPumpPowerConsumptionItem(
    DesignOutdoorAirFlowRateItem
):
    pass


class Speed4GrossRatedTotalCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed4GrossRatedSensibleHeatRatioItem(GrossRatedSensibleHeatRatioItem):
    pass


class Speed4RatedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed4EvaporativeCondenserAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class Speed4RatedEvaporativeCondenserPumpPowerConsumptionItem(
    DesignOutdoorAirFlowRateItem
):
    pass


class CoilCoolingDxMultiSpeed(BaseModel):
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    condenser_air_inlet_node_name: Optional[str] = None
    condenser_type: Optional[CondenserType] = "AirCooled"
    minimum_outdoor_dry_bulb_temperature_for_compressor_operation: Optional[
        float
    ] = -25.0
    supply_water_storage_tank_name: Optional[str] = None
    condensate_collection_water_storage_tank_name: Optional[str] = None
    apply_part_load_fraction_to_speeds_greater_than_1: Optional[
        DoZoneSizingCalculation
    ] = "No"
    apply_latent_degradation_to_speeds_greater_than_1: Optional[
        DoZoneSizingCalculation
    ] = "No"
    crankcase_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation: Optional[
        float
    ] = Field(10.0, ge=0.0)
    basin_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    basin_heater_setpoint_temperature: Optional[float] = Field(2.0, ge=2.0)
    basin_heater_operating_schedule_name: Optional[str] = None
    fuel_type: FuelType2
    number_of_speeds: int = Field(..., ge=2, le=4)
    speed_1_gross_rated_total_cooling_capacity: Union[
        Speed1GrossRatedTotalCoolingCapacityItem, Literal["Autosize"]
    ]
    speed_1_gross_rated_sensible_heat_ratio: Union[
        Speed1GrossRatedSensibleHeatRatioItem, Literal["Autosize"]
    ]
    speed_1_gross_rated_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    speed_1_rated_air_flow_rate: Union[Speed1RatedAirFlowRateItem, Literal["Autosize"]]
    field_2017_speed_1_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        773.3,
        alias="2017_speed_1_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1250.0,
    )
    field_2023_speed_1_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        934.4,
        alias="2023_speed_1_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1505.0,
    )
    speed_1_total_cooling_capacity_function_of_temperature_curve_name: str
    speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name: str
    speed_1_energy_input_ratio_function_of_temperature_curve_name: str
    speed_1_energy_input_ratio_function_of_flow_fraction_curve_name: str
    speed_1_part_load_fraction_correlation_curve_name: str
    speed_1_nominal_time_for_condensate_removal_to_begin: Optional[float] = Field(
        0.0, ge=0.0, le=3000.0
    )
    speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity: Optional[
        float
    ] = Field(
        0.0, ge=0.0, le=5.0
    )
    speed_1_maximum_cycling_rate: Optional[float] = Field(0.0, ge=0.0, le=5.0)
    speed_1_latent_capacity_time_constant: Optional[float] = Field(
        0.0, ge=0.0, le=500.0
    )
    speed_1_rated_waste_heat_fraction_of_power_input: Optional[float] = Field(
        0.2, gt=0.0, le=1.0
    )
    speed_1_waste_heat_function_of_temperature_curve_name: Optional[str] = None
    speed_1_evaporative_condenser_effectiveness: Optional[float] = Field(
        0.9, ge=0.0, le=1.0
    )
    speed_1_evaporative_condenser_air_flow_rate: Optional[
        Union[Speed1EvaporativeCondenserAirFlowRateItem, Literal["Autosize"]]
    ] = None
    speed_1_rated_evaporative_condenser_pump_power_consumption: Optional[
        Union[
            Speed1RatedEvaporativeCondenserPumpPowerConsumptionItem, Literal["Autosize"]
        ]
    ] = None
    speed_2_gross_rated_total_cooling_capacity: Union[
        Speed2GrossRatedTotalCoolingCapacityItem, Literal["Autosize"]
    ]
    speed_2_gross_rated_sensible_heat_ratio: Union[
        Speed2GrossRatedSensibleHeatRatioItem, Literal["Autosize"]
    ]
    speed_2_gross_rated_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    speed_2_rated_air_flow_rate: Union[Speed2RatedAirFlowRateItem, Literal["Autosize"]]
    field_2017_speed_2_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        773.3,
        alias="2017_speed_2_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1250.0,
    )
    field_2023_speed_2_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        934.4,
        alias="2023_speed_2_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1505.0,
    )
    speed_2_total_cooling_capacity_function_of_temperature_curve_name: str
    speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name: str
    speed_2_energy_input_ratio_function_of_temperature_curve_name: str
    speed_2_energy_input_ratio_function_of_flow_fraction_curve_name: str
    speed_2_part_load_fraction_correlation_curve_name: str
    speed_2_nominal_time_for_condensate_removal_to_begin: Optional[float] = Field(
        0.0, ge=0.0, le=3000.0
    )
    speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity: Optional[
        float
    ] = Field(
        0.0, ge=0.0, le=5.0
    )
    speed_2_maximum_cycling_rate: Optional[float] = Field(0.0, ge=0.0, le=5.0)
    speed_2_latent_capacity_time_constant: Optional[float] = Field(
        0.0, ge=0.0, le=500.0
    )
    speed_2_rated_waste_heat_fraction_of_power_input: Optional[float] = Field(
        0.2, gt=0.0, le=1.0
    )
    speed_2_waste_heat_function_of_temperature_curve_name: Optional[str] = None
    speed_2_evaporative_condenser_effectiveness: Optional[float] = Field(
        0.9, ge=0.0, le=1.0
    )
    speed_2_evaporative_condenser_air_flow_rate: Optional[
        Union[Speed2EvaporativeCondenserAirFlowRateItem, Literal["Autosize"]]
    ] = None
    speed_2_rated_evaporative_condenser_pump_power_consumption: Optional[
        Union[
            Speed2RatedEvaporativeCondenserPumpPowerConsumptionItem, Literal["Autosize"]
        ]
    ] = None
    speed_3_gross_rated_total_cooling_capacity: Optional[
        Union[Speed3GrossRatedTotalCoolingCapacityItem, Literal["Autosize"]]
    ] = None
    speed_3_gross_rated_sensible_heat_ratio: Optional[
        Union[Speed3GrossRatedSensibleHeatRatioItem, Literal["Autosize"]]
    ] = None
    speed_3_gross_rated_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    speed_3_rated_air_flow_rate: Optional[
        Union[Speed3RatedAirFlowRateItem, Literal["Autosize"]]
    ] = None
    field_2017_speed_3_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        773.3,
        alias="2017_speed_3_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1250.0,
    )
    field_2023_speed_3_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        934.4,
        alias="2023_speed_3_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1505.0,
    )
    speed_3_total_cooling_capacity_function_of_temperature_curve_name: Optional[
        str
    ] = None
    speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name: Optional[
        str
    ] = None
    speed_3_energy_input_ratio_function_of_temperature_curve_name: Optional[str] = None
    speed_3_energy_input_ratio_function_of_flow_fraction_curve_name: Optional[
        str
    ] = None
    speed_3_part_load_fraction_correlation_curve_name: Optional[str] = None
    speed_3_nominal_time_for_condensate_removal_to_begin: Optional[float] = Field(
        0.0, ge=0.0, le=3000.0
    )
    speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity: Optional[
        float
    ] = Field(
        0.0, ge=0.0, le=5.0
    )
    speed_3_maximum_cycling_rate: Optional[float] = Field(0.0, ge=0.0, le=5.0)
    speed_3_latent_capacity_time_constant: Optional[float] = Field(
        0.0, ge=0.0, le=500.0
    )
    speed_3_rated_waste_heat_fraction_of_power_input: Optional[float] = Field(
        0.2, gt=0.0, le=1.0
    )
    speed_3_waste_heat_function_of_temperature_curve_name: Optional[str] = None
    speed_3_evaporative_condenser_effectiveness: Optional[float] = Field(
        0.9, ge=0.0, le=1.0
    )
    speed_3_evaporative_condenser_air_flow_rate: Optional[
        Union[Speed3EvaporativeCondenserAirFlowRateItem, Literal["Autosize"]]
    ] = None
    speed_3_rated_evaporative_condenser_pump_power_consumption: Optional[
        Union[
            Speed3RatedEvaporativeCondenserPumpPowerConsumptionItem, Literal["Autosize"]
        ]
    ] = None
    speed_4_gross_rated_total_cooling_capacity: Optional[
        Union[Speed4GrossRatedTotalCoolingCapacityItem, Literal["Autosize"]]
    ] = None
    speed_4_gross_rated_sensible_heat_ratio: Optional[
        Union[Speed4GrossRatedSensibleHeatRatioItem, Literal["Autosize"]]
    ] = None
    speed_4_gross_rated_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    speed_4_rated_air_flow_rate: Optional[
        Union[Speed4RatedAirFlowRateItem, Literal["Autosize"]]
    ] = None
    field_2017_speed_4_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        773.3,
        alias="2017_speed_4_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1250.0,
    )
    field_2023_speed_4_rated_evaporator_fan_power_per_volume_flow_rate: Optional[
        float
    ] = Field(
        934.4,
        alias="2023_speed_4_rated_evaporator_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1505.0,
    )
    speed_4_total_cooling_capacity_function_of_temperature_curve_name: Optional[
        str
    ] = None
    speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name: Optional[
        str
    ] = None
    speed_4_energy_input_ratio_function_of_temperature_curve_name: Optional[str] = None
    speed_4_energy_input_ratio_function_of_flow_fraction_curve_name: Optional[
        str
    ] = None
    speed_4_part_load_fraction_correlation_curve_name: Optional[str] = None
    speed_4_nominal_time_for_condensate_removal_to_begin: Optional[float] = Field(
        0.0, ge=0.0, le=3000.0
    )
    speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity: Optional[
        float
    ] = Field(
        0.0, ge=0.0, le=5.0
    )
    speed_4_maximum_cycling_rate: Optional[float] = Field(0.0, ge=0.0, le=5.0)
    speed_4_latent_capacity_time_constant: Optional[float] = Field(
        0.0, ge=0.0, le=500.0
    )
    speed_4_rated_waste_heat_fraction_of_power_input: Optional[float] = Field(
        0.2, gt=0.0, le=1.0
    )
    speed_4_waste_heat_function_of_temperature_curve_name: Optional[str] = None
    speed_4_evaporative_condenser_effectiveness: Optional[float] = Field(
        0.9, ge=0.0, le=1.0
    )
    speed_4_evaporative_condenser_air_flow_rate: Optional[
        Union[Speed4EvaporativeCondenserAirFlowRateItem, Literal["Autosize"]]
    ] = None
    speed_4_rated_evaporative_condenser_pump_power_consumption: Optional[
        Union[
            Speed4RatedEvaporativeCondenserPumpPowerConsumptionItem, Literal["Autosize"]
        ]
    ] = None
    zone_name_for_condenser_placement: Optional[str] = None


class PerformanceInputMethod(Enum):
    field_ = ""
    nominal_capacity = "NominalCapacity"
    u_factor_times_area_and_design_water_flow_rate = (
        "UFactorTimesAreaAndDesignWaterFlowRate"
    )


class RatedCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class CoilHeatingWater(BaseModel):
    availability_schedule_name: Optional[str] = None
    u_factor_times_area_value: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    maximum_water_flow_rate: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    water_inlet_node_name: str
    water_outlet_node_name: str
    air_inlet_node_name: str
    air_outlet_node_name: str
    performance_input_method: Optional[
        PerformanceInputMethod
    ] = "UFactorTimesAreaAndDesignWaterFlowRate"
    rated_capacity: Optional[
        Union[RatedCapacityItem, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    rated_inlet_water_temperature: Optional[float] = 82.2
    rated_inlet_air_temperature: Optional[float] = 16.6
    rated_outlet_water_temperature: Optional[float] = 71.1
    rated_outlet_air_temperature: Optional[float] = 32.2
    rated_ratio_for_air_and_water_convection: Optional[float] = Field(0.5, gt=0.0)
    design_water_temperature_difference: Optional[float] = Field(None, gt=0.0)


class CoilHeatingElectric(BaseModel):
    availability_schedule_name: Optional[str] = None
    efficiency: Optional[float] = Field(1.0, gt=0.0, le=1.0)
    nominal_capacity: Optional[Union[float, Literal["Autosize"]]] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    temperature_setpoint_node_name: Optional[str] = None


class FuelType3(Enum):
    field_ = ""
    coal = "Coal"
    diesel = "Diesel"
    fuel_oil_no1 = "FuelOilNo1"
    fuel_oil_no2 = "FuelOilNo2"
    gasoline = "Gasoline"
    natural_gas = "NaturalGas"
    other_fuel1 = "OtherFuel1"
    other_fuel2 = "OtherFuel2"
    propane = "Propane"


class CoilHeatingFuel(BaseModel):
    availability_schedule_name: Optional[str] = None
    fuel_type: Optional[FuelType3] = "NaturalGas"
    burner_efficiency: Optional[float] = Field(0.8, ge=0.0, le=1.0)
    nominal_capacity: Optional[Union[float, Literal["Autosize"]]] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    temperature_setpoint_node_name: Optional[str] = None
    parasitic_electric_load: Optional[float] = None
    part_load_fraction_correlation_curve_name: Optional[str] = None
    parasitic_fuel_load: Optional[float] = None


class GrossRatedHeatingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class DefrostStrategy(Enum):
    field_ = ""
    resistive = "Resistive"
    reverse_cycle = "ReverseCycle"


class DefrostControl(Enum):
    field_ = ""
    on_demand = "OnDemand"
    timed = "Timed"


class ResistiveDefrostHeaterCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class SecondaryCoilAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class CoilHeatingDxSingleSpeed(BaseModel):
    availability_schedule_name: Optional[str] = None
    gross_rated_heating_capacity: Union[
        GrossRatedHeatingCapacityItem, Literal["Autosize"]
    ]
    gross_rated_heating_cop: float = Field(..., gt=0.0)
    rated_air_flow_rate: Union[RatedAirFlowRateItem, Literal["Autosize"]]
    field_2017_rated_supply_fan_power_per_volume_flow_rate: Optional[float] = Field(
        773.3,
        alias="2017_rated_supply_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1250.0,
    )
    field_2023_rated_supply_fan_power_per_volume_flow_rate: Optional[float] = Field(
        934.4,
        alias="2023_rated_supply_fan_power_per_volume_flow_rate",
        ge=0.0,
        le=1505.0,
    )
    air_inlet_node_name: str
    air_outlet_node_name: str
    heating_capacity_function_of_temperature_curve_name: str
    heating_capacity_function_of_flow_fraction_curve_name: str
    energy_input_ratio_function_of_temperature_curve_name: str
    energy_input_ratio_function_of_flow_fraction_curve_name: str
    part_load_fraction_correlation_curve_name: str
    defrost_energy_input_ratio_function_of_temperature_curve_name: Optional[str] = None
    minimum_outdoor_dry_bulb_temperature_for_compressor_operation: Optional[
        float
    ] = -8.0
    outdoor_dry_bulb_temperature_to_turn_on_compressor: Optional[float] = None
    maximum_outdoor_dry_bulb_temperature_for_defrost_operation: Optional[float] = Field(
        5.0, ge=0.0, le=7.22
    )
    crankcase_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation: Optional[
        float
    ] = Field(10.0, ge=0.0)
    defrost_strategy: Optional[DefrostStrategy] = "ReverseCycle"
    defrost_control: Optional[DefrostControl] = "Timed"
    defrost_time_period_fraction: Optional[float] = Field(0.058333, ge=0.0)
    resistive_defrost_heater_capacity: Optional[
        Union[
            ResistiveDefrostHeaterCapacityItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = 0.0
    region_number_for_calculating_hspf: Optional[int] = Field(4, ge=1, le=6)
    evaporator_air_inlet_node_name: Optional[str] = None
    zone_name_for_evaporator_placement: Optional[str] = None
    secondary_coil_air_flow_rate: Optional[
        Union[SecondaryCoilAirFlowRateItem, Literal["Autosize"]]
    ] = None
    secondary_coil_fan_flow_scaling_factor: Optional[float] = Field(1.25, gt=0.0)
    nominal_sensible_heat_ratio_of_secondary_coil: Optional[float] = Field(
        None, gt=0.0, le=1.0
    )
    sensible_heat_ratio_modifier_function_of_temperature_curve_name: Optional[
        str
    ] = None
    sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name: Optional[
        str
    ] = None


class RatedWaterFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class GrossRatedSensibleCoolingCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class CoilCoolingWaterToAirHeatPumpEquationFit(BaseModel):
    water_inlet_node_name: str
    water_outlet_node_name: str
    air_inlet_node_name: str
    air_outlet_node_name: str
    rated_air_flow_rate: Union[RatedAirFlowRateItem, Literal["Autosize"]]
    rated_water_flow_rate: Union[RatedWaterFlowRateItem, Literal["Autosize"]]
    gross_rated_total_cooling_capacity: Union[
        GrossRatedTotalCoolingCapacityItem, Literal["Autosize"]
    ]
    gross_rated_sensible_cooling_capacity: Union[
        GrossRatedSensibleCoolingCapacityItem, Literal["Autosize"]
    ]
    gross_rated_cooling_cop: float = Field(..., gt=0.0)
    rated_entering_water_temperature: Optional[float] = Field(30.0, gt=0.0)
    rated_entering_air_dry_bulb_temperature: Optional[float] = Field(27.0, gt=0.0)
    rated_entering_air_wet_bulb_temperature: Optional[float] = Field(19.0, gt=0.0)
    total_cooling_capacity_curve_name: str
    sensible_cooling_capacity_curve_name: str
    cooling_power_consumption_curve_name: str
    nominal_time_for_condensate_removal_to_begin: Optional[float] = Field(
        0.0, ge=0.0, le=3000.0
    )
    ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity: Optional[
        float
    ] = Field(
        0.0, ge=0.0, le=5.0
    )


class CoilHeatingWaterToAirHeatPumpEquationFit(BaseModel):
    water_inlet_node_name: str
    water_outlet_node_name: str
    air_inlet_node_name: str
    air_outlet_node_name: str
    rated_air_flow_rate: Union[RatedAirFlowRateItem, Literal["Autosize"]]
    rated_water_flow_rate: Union[RatedWaterFlowRateItem, Literal["Autosize"]]
    gross_rated_heating_capacity: Union[
        GrossRatedHeatingCapacityItem, Literal["Autosize"]
    ]
    gross_rated_heating_cop: float = Field(..., gt=0.0)
    rated_entering_water_temperature: Optional[float] = 20.0
    rated_entering_air_dry_bulb_temperature: Optional[float] = Field(20.0, gt=0.0)
    ratio_of_rated_heating_capacity_to_rated_cooling_capacity: Optional[float] = Field(
        1.0, gt=0.0
    )
    heating_capacity_curve_name: str
    heating_power_consumption_curve_name: str


class CoolingCoilObjectType2(Enum):
    coil_cooling_dx = "Coil:Cooling:DX"
    coil_cooling_dx_single_speed = "Coil:Cooling:DX:SingleSpeed"
    coil_cooling_dx_single_speed_thermal_storage = (
        "Coil:Cooling:DX:SingleSpeed:ThermalStorage"
    )
    coil_cooling_dx_two_speed = "Coil:Cooling:DX:TwoSpeed"
    coil_cooling_dx_two_stage_with_humidity_control_mode = (
        "Coil:Cooling:DX:TwoStageWithHumidityControlMode"
    )
    coil_cooling_dx_variable_speed = "Coil:Cooling:DX:VariableSpeed"
    coil_system_cooling_dx_heat_exchanger_assisted = (
        "CoilSystem:Cooling:DX:HeatExchangerAssisted"
    )


class DehumidificationControlType1(Enum):
    field_ = ""
    cool_reheat = "CoolReheat"
    multimode = "Multimode"
    none = "None"


class CoilSystemCoolingDx(BaseModel):
    availability_schedule_name: Optional[str] = None
    dx_cooling_coil_system_inlet_node_name: str
    dx_cooling_coil_system_outlet_node_name: str
    dx_cooling_coil_system_sensor_node_name: str
    cooling_coil_object_type: CoolingCoilObjectType2
    cooling_coil_name: str
    dehumidification_control_type: Optional[DehumidificationControlType1] = "None"
    run_on_sensible_load: Optional[DoZoneSizingCalculation] = "Yes"
    run_on_latent_load: Optional[DoZoneSizingCalculation] = "No"
    use_outdoor_air_dx_cooling_coil: Optional[DoZoneSizingCalculation] = "No"
    outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature: Optional[
        float
    ] = Field(2.0, ge=0.0, le=7.2)


class RatedPowerItem(DesignOutdoorAirFlowRateItem):
    pass


class HumidifierSteamElectric(BaseModel):
    availability_schedule_name: Optional[str] = None
    rated_capacity: Optional[Union[RatedCapacityItem, Literal["Autosize"]]] = None
    rated_power: Optional[Union[RatedPowerItem, Literal["Autosize"]]] = None
    rated_fan_power: Optional[float] = Field(None, ge=0.0)
    standby_power: Optional[float] = Field(None, ge=0.0)
    air_inlet_node_name: Optional[str] = None
    air_outlet_node_name: Optional[str] = None
    water_storage_tank_name: Optional[str] = None


class NominalSupplyAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class HeatExchangerType(Enum):
    field_ = ""
    plate = "Plate"
    rotary = "Rotary"


class FrostControlType(Enum):
    field_ = ""
    exhaust_air_recirculation = "ExhaustAirRecirculation"
    exhaust_only = "ExhaustOnly"
    minimum_exhaust_temperature = "MinimumExhaustTemperature"
    none = "None"


class HeatExchangerAirToAirSensibleAndLatent(BaseModel):
    availability_schedule_name: Optional[str] = None
    nominal_supply_air_flow_rate: Union[
        NominalSupplyAirFlowRateItem, Literal["Autosize"]
    ]
    sensible_effectiveness_at_100_heating_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    latent_effectiveness_at_100_heating_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    sensible_effectiveness_at_75_heating_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    latent_effectiveness_at_75_heating_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    sensible_effectiveness_at_100_cooling_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    latent_effectiveness_at_100_cooling_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    sensible_effectiveness_at_75_cooling_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    latent_effectiveness_at_75_cooling_air_flow: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    supply_air_inlet_node_name: str
    supply_air_outlet_node_name: str
    exhaust_air_inlet_node_name: str
    exhaust_air_outlet_node_name: str
    nominal_electric_power: Optional[float] = Field(0.0, ge=0.0)
    supply_air_outlet_temperature_control: Optional[DoZoneSizingCalculation] = "No"
    heat_exchanger_type: Optional[HeatExchangerType] = "Plate"
    frost_control_type: Optional[FrostControlType] = "None"
    threshold_temperature: Optional[float] = 1.7
    initial_defrost_time_fraction: Optional[float] = Field(0.083, ge=0.0, le=1.0)
    rate_of_defrost_time_fraction_increase: Optional[float] = Field(0.012, ge=0.0)
    economizer_lockout: Optional[DoZoneSizingCalculation] = "Yes"


class ControlType(Enum):
    field_ = ""
    load = "Load"
    set_point = "SetPoint"
    single_zone_vav = "SingleZoneVAV"


class SupplyFanObjectType(Enum):
    fan_component_model = "Fan:ComponentModel"
    fan_constant_volume = "Fan:ConstantVolume"
    fan_on_off = "Fan:OnOff"
    fan_system_model = "Fan:SystemModel"
    fan_variable_volume = "Fan:VariableVolume"


class FanPlacement1(Enum):
    blow_through = "BlowThrough"
    draw_through = "DrawThrough"


class HeatingCoilObjectType3(Enum):
    coil_heating_dx_multi_speed = "Coil:Heating:DX:MultiSpeed"
    coil_heating_dx_single_speed = "Coil:Heating:DX:SingleSpeed"
    coil_heating_dx_variable_speed = "Coil:Heating:DX:VariableSpeed"
    coil_heating_desuperheater = "Coil:Heating:Desuperheater"
    coil_heating_electric = "Coil:Heating:Electric"
    coil_heating_electric_multi_stage = "Coil:Heating:Electric:MultiStage"
    coil_heating_fuel = "Coil:Heating:Fuel"
    coil_heating_gas_multi_stage = "Coil:Heating:Gas:MultiStage"
    coil_heating_steam = "Coil:Heating:Steam"
    coil_heating_water = "Coil:Heating:Water"
    coil_heating_water_to_air_heat_pump_equation_fit = (
        "Coil:Heating:WaterToAirHeatPump:EquationFit"
    )
    coil_heating_water_to_air_heat_pump_parameter_estimation = (
        "Coil:Heating:WaterToAirHeatPump:ParameterEstimation"
    )
    coil_heating_water_to_air_heat_pump_variable_speed_equation_fit = (
        "Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit"
    )
    coil_user_defined = "Coil:UserDefined"


class CoolingCoilObjectType3(Enum):
    coil_cooling_dx = "Coil:Cooling:DX"
    coil_cooling_dx_multi_speed = "Coil:Cooling:DX:MultiSpeed"
    coil_cooling_dx_single_speed = "Coil:Cooling:DX:SingleSpeed"
    coil_cooling_dx_single_speed_thermal_storage = (
        "Coil:Cooling:DX:SingleSpeed:ThermalStorage"
    )
    coil_cooling_dx_two_speed = "Coil:Cooling:DX:TwoSpeed"
    coil_cooling_dx_two_stage_with_humidity_control_mode = (
        "Coil:Cooling:DX:TwoStageWithHumidityControlMode"
    )
    coil_cooling_dx_variable_speed = "Coil:Cooling:DX:VariableSpeed"
    coil_cooling_water = "Coil:Cooling:Water"
    coil_cooling_water_detailed_geometry = "Coil:Cooling:Water:DetailedGeometry"
    coil_cooling_water_to_air_heat_pump_equation_fit = (
        "Coil:Cooling:WaterToAirHeatPump:EquationFit"
    )
    coil_cooling_water_to_air_heat_pump_parameter_estimation = (
        "Coil:Cooling:WaterToAirHeatPump:ParameterEstimation"
    )
    coil_cooling_water_to_air_heat_pump_variable_speed_equation_fit = (
        "Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit"
    )
    coil_user_defined = "Coil:UserDefined"
    coil_system_cooling_dx_heat_exchanger_assisted = (
        "CoilSystem:Cooling:DX:HeatExchangerAssisted"
    )
    coil_system_cooling_water_heat_exchanger_assisted = (
        "CoilSystem:Cooling:Water:HeatExchangerAssisted"
    )


class MinimumSupplyAirTemperatureItem(RootModel):
    root: float = Field(..., ge=0.0, le=20.0)


class LatentLoadControl(Enum):
    field_ = ""
    latent_only_load_control = "LatentOnlyLoadControl"
    latent_or_sensible_load_control = "LatentOrSensibleLoadControl"
    latent_with_sensible_load_control = "LatentWithSensibleLoadControl"
    sensible_only_load_control = "SensibleOnlyLoadControl"


class SupplementalHeatingCoilObjectType(Enum):
    coil_heating_desuperheater = "Coil:Heating:Desuperheater"
    coil_heating_electric = "Coil:Heating:Electric"
    coil_heating_electric_multistage = "Coil:Heating:Electric:Multistage"
    coil_heating_fuel = "Coil:Heating:Fuel"
    coil_heating_steam = "Coil:Heating:Steam"
    coil_heating_water = "Coil:Heating:Water"
    coil_user_defined = "Coil:UserDefined"


class CoolingSupplyAirFlowRateMethod1(Enum):
    flow_per_cooling_capacity = "FlowPerCoolingCapacity"
    flow_per_floor_area = "FlowPerFloorArea"
    fraction_of_autosized_cooling_value = "FractionOfAutosizedCoolingValue"
    none = "None"
    supply_air_flow_rate = "SupplyAirFlowRate"


class CoolingSupplyAirFlowRateItem1(DesignOutdoorAirFlowRateItem):
    pass


class HeatingSupplyAirFlowRateMethod1(Enum):
    flow_per_floor_area = "FlowPerFloorArea"
    flow_per_heating_capacity = "FlowPerHeatingCapacity"
    fraction_of_autosized_heating_value = "FractionOfAutosizedHeatingValue"
    none = "None"
    supply_air_flow_rate = "SupplyAirFlowRate"


class HeatingSupplyAirFlowRateItem1(DesignOutdoorAirFlowRateItem):
    pass


class NoLoadSupplyAirFlowRateMethod(Enum):
    flow_per_cooling_capacity = "FlowPerCoolingCapacity"
    flow_per_floor_area = "FlowPerFloorArea"
    flow_per_heating_capacity = "FlowPerHeatingCapacity"
    fraction_of_autosized_cooling_value = "FractionOfAutosizedCoolingValue"
    fraction_of_autosized_heating_value = "FractionOfAutosizedHeatingValue"
    none = "None"
    supply_air_flow_rate = "SupplyAirFlowRate"


class AirLoopHvacUnitarySystem(BaseModel):
    control_type: Optional[ControlType] = "Load"
    controlling_zone_or_thermostat_location: Optional[str] = None
    dehumidification_control_type: Optional[DehumidificationControlType1] = "None"
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    supply_fan_object_type: Optional[SupplyFanObjectType] = None
    supply_fan_name: Optional[str] = None
    fan_placement: Optional[FanPlacement1] = None
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    heating_coil_object_type: Optional[HeatingCoilObjectType3] = None
    heating_coil_name: Optional[str] = None
    dx_heating_coil_sizing_ratio: Optional[float] = Field(1.0, gt=0.0)
    cooling_coil_object_type: Optional[CoolingCoilObjectType3] = None
    cooling_coil_name: Optional[str] = None
    use_doas_dx_cooling_coil: Optional[DoZoneSizingCalculation] = "No"
    minimum_supply_air_temperature: Optional[
        Union[
            MinimumSupplyAirTemperatureItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = 2.0
    latent_load_control: Optional[LatentLoadControl] = "SensibleOnlyLoadControl"
    supplemental_heating_coil_object_type: Optional[
        SupplementalHeatingCoilObjectType
    ] = None
    supplemental_heating_coil_name: Optional[str] = None
    cooling_supply_air_flow_rate_method: Optional[
        CoolingSupplyAirFlowRateMethod1
    ] = None
    cooling_supply_air_flow_rate: Optional[
        Union[CoolingSupplyAirFlowRateItem1, Literal["Autosize"]]
    ] = None
    cooling_supply_air_flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    cooling_fraction_of_autosized_cooling_supply_air_flow_rate: Optional[float] = Field(
        None, ge=0.0
    )
    cooling_supply_air_flow_rate_per_unit_of_capacity: Optional[float] = Field(
        None, ge=0.0
    )
    heating_supply_air_flow_rate_method: Optional[
        HeatingSupplyAirFlowRateMethod1
    ] = None
    heating_supply_air_flow_rate: Optional[
        Union[HeatingSupplyAirFlowRateItem1, Literal["Autosize"]]
    ] = None
    heating_supply_air_flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    heating_fraction_of_autosized_heating_supply_air_flow_rate: Optional[float] = Field(
        None, ge=0.0
    )
    heating_supply_air_flow_rate_per_unit_of_capacity: Optional[float] = Field(
        None, ge=0.0
    )
    no_load_supply_air_flow_rate_method: Optional[NoLoadSupplyAirFlowRateMethod] = None
    no_load_supply_air_flow_rate: Optional[
        Union[NoLoadSupplyAirFlowRateItem, Literal["Autosize"]]
    ] = None
    no_load_supply_air_flow_rate_per_floor_area: Optional[float] = Field(None, ge=0.0)
    no_load_fraction_of_autosized_cooling_supply_air_flow_rate: Optional[float] = Field(
        None, ge=0.0
    )
    no_load_fraction_of_autosized_heating_supply_air_flow_rate: Optional[float] = Field(
        None, ge=0.0
    )
    no_load_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation: Optional[
        float
    ] = Field(
        None, ge=0.0
    )
    no_load_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation: Optional[
        float
    ] = Field(
        None, ge=0.0
    )
    maximum_supply_air_temperature: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = 80.0
    maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation: Optional[
        float
    ] = 21.0
    outdoor_dry_bulb_temperature_sensor_node_name: Optional[str] = None
    maximum_cycling_rate: Optional[float] = Field(2.5, ge=0.0, le=5.0)
    heat_pump_time_constant: Optional[float] = Field(60.0, ge=0.0, le=500.0)
    fraction_of_on_cycle_power_use: Optional[float] = Field(0.01, ge=0.0, le=0.05)
    heat_pump_fan_delay_time: Optional[float] = Field(60.0, ge=0.0)
    ancillary_on_cycle_electric_power: Optional[float] = Field(0.0, ge=0.0)
    ancillary_off_cycle_electric_power: Optional[float] = Field(0.0, ge=0.0)
    design_heat_recovery_water_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    maximum_temperature_for_heat_recovery: Optional[float] = Field(
        80.0, ge=0.0, le=100.0
    )
    heat_recovery_water_inlet_node_name: Optional[str] = None
    heat_recovery_water_outlet_node_name: Optional[str] = None
    design_specification_multispeed_object_type: Optional[
        Literal["UnitarySystemPerformance:Multispeed"]
    ] = None
    design_specification_multispeed_object_name: Optional[str] = None


class HeatingSpeedSupplyAirFlowRatioItem(CoolingSupplyAirFlowRateItem):
    pass


class CoolingSpeedSupplyAirFlowRatioItem(CoolingSupplyAirFlowRateItem):
    pass


class FlowRatio(BaseModel):
    heating_speed_supply_air_flow_ratio: Union[
        HeatingSpeedSupplyAirFlowRatioItem, Literal["Autosize"]
    ]
    cooling_speed_supply_air_flow_ratio: Union[
        CoolingSpeedSupplyAirFlowRatioItem, Literal["Autosize"]
    ]


class UnitarySystemPerformanceMultispeed(BaseModel):
    number_of_speeds_for_heating: int = Field(..., ge=0, le=10)
    number_of_speeds_for_cooling: int = Field(..., ge=0, le=10)
    single_mode_operation: Optional[DoZoneSizingCalculation] = "No"
    no_load_supply_air_flow_rate_ratio: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    flow_ratios: Optional[List[FlowRatio]] = None


class CoolingSupplyAirFlowRateItem2(CoolingSupplyAirFlowRateItem):
    pass


class HeatingSupplyAirFlowRateItem2(CoolingSupplyAirFlowRateItem):
    pass


class SupplyFanObjectType1(Enum):
    fan_constant_volume = "Fan:ConstantVolume"
    fan_on_off = "Fan:OnOff"


class CoolingCoilObjectType4(Enum):
    coil_cooling_dx_single_speed = "Coil:Cooling:DX:SingleSpeed"
    coil_cooling_dx_variable_speed = "Coil:Cooling:DX:VariableSpeed"
    coil_system_cooling_dx_heat_exchanger_assisted = (
        "CoilSystem:Cooling:DX:HeatExchangerAssisted"
    )


class ReheatCoilObjectType1(Enum):
    coil_heating_desuperheater = "Coil:Heating:Desuperheater"
    coil_heating_electric = "Coil:Heating:Electric"
    coil_heating_fuel = "Coil:Heating:Fuel"
    coil_heating_steam = "Coil:Heating:Steam"
    coil_heating_water = "Coil:Heating:Water"


class AirLoopHvacUnitaryFurnaceHeatCool(BaseModel):
    availability_schedule_name: Optional[str] = None
    furnace_air_inlet_node_name: str
    furnace_air_outlet_node_name: str
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    maximum_supply_air_temperature: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = 80.0
    cooling_supply_air_flow_rate: Union[
        CoolingSupplyAirFlowRateItem2, Literal["Autosize"]
    ]
    heating_supply_air_flow_rate: Union[
        HeatingSupplyAirFlowRateItem2, Literal["Autosize"]
    ]
    no_load_supply_air_flow_rate: Optional[
        Union[NoLoadSupplyAirFlowRateItem, Literal["Autosize"]]
    ] = None
    controlling_zone_or_thermostat_location: str
    supply_fan_object_type: SupplyFanObjectType1
    supply_fan_name: str
    fan_placement: Optional[FanPlacement] = "BlowThrough"
    heating_coil_object_type: HeatingCoilObjectType1
    heating_coil_name: str
    cooling_coil_object_type: CoolingCoilObjectType4
    cooling_coil_name: str
    dehumidification_control_type: Optional[DehumidificationControlType1] = "None"
    reheat_coil_object_type: Optional[ReheatCoilObjectType1] = None
    reheat_coil_name: Optional[str] = None


class AirLoopHvacUnitaryHeatCool(BaseModel):
    availability_schedule_name: Optional[str] = None
    unitary_system_air_inlet_node_name: str
    unitary_system_air_outlet_node_name: str
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    maximum_supply_air_temperature: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = 80.0
    cooling_supply_air_flow_rate: Union[
        CoolingSupplyAirFlowRateItem2, Literal["Autosize"]
    ]
    heating_supply_air_flow_rate: Union[
        HeatingSupplyAirFlowRateItem2, Literal["Autosize"]
    ]
    no_load_supply_air_flow_rate: Optional[
        Union[NoLoadSupplyAirFlowRateItem, Literal["Autosize"]]
    ] = None
    controlling_zone_or_thermostat_location: str
    supply_fan_object_type: SupplyFanObjectType1
    supply_fan_name: str
    fan_placement: Optional[FanPlacement] = "BlowThrough"
    heating_coil_object_type: HeatingCoilObjectType1
    heating_coil_name: str
    cooling_coil_object_type: CoolingCoilObjectType4
    cooling_coil_name: str
    dehumidification_control_type: Optional[DehumidificationControlType1] = "None"
    reheat_coil_object_type: Optional[ReheatCoilObjectType1] = None
    reheat_coil_name: Optional[str] = None


class HeatingCoilObjectType6(Enum):
    coil_heating_dx_single_speed = "Coil:Heating:DX:SingleSpeed"
    coil_heating_dx_variable_speed = "Coil:Heating:DX:VariableSpeed"
    coil_system_integrated_heat_pump_air_source = (
        "CoilSystem:IntegratedHeatPump:AirSource"
    )


class CoolingCoilObjectType6(Enum):
    coil_cooling_dx_single_speed = "Coil:Cooling:DX:SingleSpeed"
    coil_cooling_dx_variable_speed = "Coil:Cooling:DX:VariableSpeed"
    coil_system_cooling_dx_heat_exchanger_assisted = (
        "CoilSystem:Cooling:DX:HeatExchangerAssisted"
    )
    coil_system_integrated_heat_pump_air_source = (
        "CoilSystem:IntegratedHeatPump:AirSource"
    )


class AirLoopHvacUnitaryHeatPumpAirToAir(BaseModel):
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    cooling_supply_air_flow_rate: Union[
        CoolingSupplyAirFlowRateItem2, Literal["Autosize"]
    ]
    heating_supply_air_flow_rate: Union[
        HeatingSupplyAirFlowRateItem2, Literal["Autosize"]
    ]
    no_load_supply_air_flow_rate: Optional[
        Union[NoLoadSupplyAirFlowRateItem, Literal["Autosize"]]
    ] = None
    controlling_zone_or_thermostat_location: str
    supply_air_fan_object_type: SupplyFanObjectType1
    supply_air_fan_name: str
    heating_coil_object_type: HeatingCoilObjectType6
    heating_coil_name: str
    cooling_coil_object_type: CoolingCoilObjectType6
    cooling_coil_name: str
    supplemental_heating_coil_object_type: HeatingCoilObjectType1
    supplemental_heating_coil_name: str
    maximum_supply_air_temperature_from_supplemental_heater: Union[
        float, Literal["Autosize"]
    ]
    maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation: Optional[
        float
    ] = Field(21.0, le=21.0)
    fan_placement: Optional[FanPlacement] = "BlowThrough"
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    dehumidification_control_type: Optional[DehumidificationControlType1] = "None"


class HeatingCoilObjectType7(Enum):
    coil_heating_water_to_air_heat_pump_equation_fit = (
        "Coil:Heating:WaterToAirHeatPump:EquationFit"
    )
    coil_heating_water_to_air_heat_pump_parameter_estimation = (
        "Coil:Heating:WaterToAirHeatPump:ParameterEstimation"
    )
    coil_heating_water_to_air_heat_pump_variable_speed_equation_fit = (
        "Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit"
    )


class CoolingCoilObjectType7(Enum):
    coil_cooling_water_to_air_heat_pump_equation_fit = (
        "Coil:Cooling:WaterToAirHeatPump:EquationFit"
    )
    coil_cooling_water_to_air_heat_pump_parameter_estimation = (
        "Coil:Cooling:WaterToAirHeatPump:ParameterEstimation"
    )
    coil_cooling_water_to_air_heat_pump_variable_speed_equation_fit = (
        "Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit"
    )


class DehumidificationControlType6(Enum):
    field_ = ""
    cool_reheat = "CoolReheat"
    none = "None"


class HeatPumpCoilWaterFlowMode(Enum):
    field_ = ""
    constant = "Constant"
    constant_on_demand = "ConstantOnDemand"
    cycling = "Cycling"


class AirLoopHvacUnitaryHeatPumpWaterToAir(BaseModel):
    availability_schedule_name: Optional[str] = None
    air_inlet_node_name: str
    air_outlet_node_name: str
    supply_air_flow_rate: Union[SupplyAirFlowRateItem, Literal["Autosize"]]
    controlling_zone_or_thermostat_location: str
    supply_air_fan_object_type: Literal["Fan:OnOff"]
    supply_air_fan_name: str
    heating_coil_object_type: HeatingCoilObjectType7
    heating_coil_name: str
    heating_convergence: Optional[float] = Field(0.001, gt=0.0)
    cooling_coil_object_type: CoolingCoilObjectType7
    cooling_coil_name: str
    cooling_convergence: Optional[float] = Field(0.001, gt=0.0)
    maximum_cycling_rate: Optional[float] = Field(2.5, ge=0.0, le=5.0)
    heat_pump_time_constant: Optional[float] = Field(60.0, ge=0.0, le=500.0)
    fraction_of_on_cycle_power_use: Optional[float] = Field(0.01, ge=0.0, le=0.05)
    heat_pump_fan_delay_time: Optional[float] = Field(60.0, ge=0.0)
    supplemental_heating_coil_object_type: HeatingCoilObjectType1
    supplemental_heating_coil_name: str
    maximum_supply_air_temperature_from_supplemental_heater: Union[
        float, Literal["Autosize"]
    ]
    maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation: Optional[
        float
    ] = Field(21.0, le=21.0)
    outdoor_dry_bulb_temperature_sensor_node_name: Optional[str] = None
    fan_placement: Optional[FanPlacement] = "BlowThrough"
    supply_air_fan_operating_mode_schedule_name: Optional[str] = None
    dehumidification_control_type: Optional[DehumidificationControlType6] = "None"
    heat_pump_coil_water_flow_mode: Optional[HeatPumpCoilWaterFlowMode] = "Cycling"


class ControlVariable(Enum):
    humidity_ratio = "HumidityRatio"
    temperature = "Temperature"
    temperature_and_humidity_ratio = "TemperatureAndHumidityRatio"


class Action(Enum):
    normal = "Normal"
    reverse = "Reverse"


class MaximumActuatedFlowItem(DesignOutdoorAirFlowRateItem):
    pass


class ControllerWaterCoil(BaseModel):
    control_variable: ControlVariable
    action: Optional[Action] = None
    actuator_variable: Literal["Flow"]
    sensor_node_name: str
    actuator_node_name: str
    controller_convergence_tolerance: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    maximum_actuated_flow: Optional[
        Union[
            MaximumActuatedFlowItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    minimum_actuated_flow: Optional[float] = Field(0.0, ge=0.0)


class EconomizerControlType(Enum):
    field_ = ""
    differential_dry_bulb = "DifferentialDryBulb"
    differential_dry_bulb_and_enthalpy = "DifferentialDryBulbAndEnthalpy"
    differential_enthalpy = "DifferentialEnthalpy"
    electronic_enthalpy = "ElectronicEnthalpy"
    fixed_dew_point_and_dry_bulb = "FixedDewPointAndDryBulb"
    fixed_dry_bulb = "FixedDryBulb"
    fixed_enthalpy = "FixedEnthalpy"
    no_economizer = "NoEconomizer"


class EconomizerControlActionType(Enum):
    field_ = ""
    minimum_flow_with_bypass = "MinimumFlowWithBypass"
    modulate_flow = "ModulateFlow"


class LockoutType(Enum):
    field_ = ""
    lockout_with_compressor = "LockoutWithCompressor"
    lockout_with_heating = "LockoutWithHeating"
    no_lockout = "NoLockout"


class MinimumLimitType(Enum):
    field_ = ""
    fixed_minimum = "FixedMinimum"
    proportional_minimum = "ProportionalMinimum"


class HeatRecoveryBypassControlType(Enum):
    field_ = ""
    bypass_when_oa_flow_greater_than_minimum = "BypassWhenOAFlowGreaterThanMinimum"
    bypass_when_within_economizer_limits = "BypassWhenWithinEconomizerLimits"


class ControllerOutdoorAir(BaseModel):
    relief_air_outlet_node_name: str
    return_air_node_name: str
    mixed_air_node_name: str
    actuator_node_name: str
    minimum_outdoor_air_flow_rate: Union[float, Literal["Autosize"]]
    maximum_outdoor_air_flow_rate: Union[float, Literal["Autosize"]]
    economizer_control_type: Optional[EconomizerControlType] = "NoEconomizer"
    economizer_control_action_type: Optional[
        EconomizerControlActionType
    ] = "ModulateFlow"
    economizer_maximum_limit_dry_bulb_temperature: Optional[float] = None
    economizer_maximum_limit_enthalpy: Optional[float] = None
    economizer_maximum_limit_dewpoint_temperature: Optional[float] = None
    electronic_enthalpy_limit_curve_name: Optional[str] = None
    economizer_minimum_limit_dry_bulb_temperature: Optional[float] = None
    lockout_type: Optional[LockoutType] = "NoLockout"
    minimum_limit_type: Optional[MinimumLimitType] = "ProportionalMinimum"
    minimum_outdoor_air_schedule_name: Optional[str] = None
    minimum_fraction_of_outdoor_air_schedule_name: Optional[str] = None
    maximum_fraction_of_outdoor_air_schedule_name: Optional[str] = None
    mechanical_ventilation_controller_name: Optional[str] = None
    time_of_day_economizer_control_schedule_name: Optional[str] = None
    high_humidity_control: Optional[DoZoneSizingCalculation] = "No"
    humidistat_control_zone_name: Optional[str] = None
    high_humidity_outdoor_air_flow_ratio: Optional[float] = Field(1.0, gt=0.0)
    control_high_indoor_humidity_based_on_outdoor_humidity_ratio: Optional[
        DoZoneSizingCalculation
    ] = "Yes"
    heat_recovery_bypass_control_type: Optional[
        HeatRecoveryBypassControlType
    ] = "BypassWhenWithinEconomizerLimits"


class SystemOutdoorAirMethod1(Enum):
    field_ = ""
    indoor_air_quality_procedure = "IndoorAirQualityProcedure"
    indoor_air_quality_procedure_combined = "IndoorAirQualityProcedureCombined"
    indoor_air_quality_procedure_generic_contaminant = (
        "IndoorAirQualityProcedureGenericContaminant"
    )
    proportional_control_based_on_design_oa_rate = (
        "ProportionalControlBasedOnDesignOARate"
    )
    proportional_control_based_on_design_occupancy = (
        "ProportionalControlBasedOnDesignOccupancy"
    )
    proportional_control_based_on_occupancy_schedule = (
        "ProportionalControlBasedOnOccupancySchedule"
    )
    standard62_1_ventilation_rate_procedure = "Standard62.1VentilationRateProcedure"
    standard62_1_ventilation_rate_procedure_with_limit = (
        "Standard62.1VentilationRateProcedureWithLimit"
    )
    zone_sum = "ZoneSum"


class ZoneSpecification(BaseModel):
    zone_or_zonelist_name: str
    design_specification_outdoor_air_object_name: Optional[str] = None
    design_specification_zone_air_distribution_object_name: Optional[str] = None


class ControllerMechanicalVentilation(BaseModel):
    availability_schedule_name: Optional[str] = None
    demand_controlled_ventilation: Optional[DoZoneSizingCalculation] = "No"
    system_outdoor_air_method: Optional[
        SystemOutdoorAirMethod1
    ] = "Standard62.1VentilationRateProcedure"
    zone_maximum_outdoor_air_fraction: Optional[float] = Field(1.0, gt=0.0)
    zone_specifications: Optional[List[ZoneSpecification]] = None


class Controller1ObjectType(Enum):
    controller_outdoor_air = "Controller:OutdoorAir"
    controller_water_coil = "Controller:WaterCoil"


class AirLoopHvacControllerList(BaseModel):
    controller_1_object_type: Controller1ObjectType
    controller_1_name: str
    controller_2_object_type: Optional[Controller1ObjectType] = None
    controller_2_name: Optional[str] = None
    controller_3_object_type: Optional[Controller1ObjectType] = None
    controller_3_name: Optional[str] = None
    controller_4_object_type: Optional[Controller1ObjectType] = None
    controller_4_name: Optional[str] = None
    controller_5_object_type: Optional[Controller1ObjectType] = None
    controller_5_name: Optional[str] = None
    controller_6_object_type: Optional[Controller1ObjectType] = None
    controller_6_name: Optional[str] = None
    controller_7_object_type: Optional[Controller1ObjectType] = None
    controller_7_name: Optional[str] = None
    controller_8_object_type: Optional[Controller1ObjectType] = None
    controller_8_name: Optional[str] = None


class AirLoopHvac(BaseModel):
    controller_list_name: Optional[str] = None
    availability_manager_list_name: Optional[str] = None
    design_supply_air_flow_rate: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = 0.0
    branch_list_name: str
    connector_list_name: Optional[str] = None
    supply_side_inlet_node_name: str
    demand_side_outlet_node_name: Optional[str] = None
    demand_side_inlet_node_names: str
    supply_side_outlet_node_names: str
    design_return_air_flow_fraction_of_supply_air_flow: Optional[float] = Field(
        1.0, ge=0.0
    )


class AirLoopHvacOutdoorAirSystemEquipmentList(BaseModel):
    component_1_object_type: str
    component_1_name: str
    component_2_object_type: Optional[str] = None
    component_2_name: Optional[str] = None
    component_3_object_type: Optional[str] = None
    component_3_name: Optional[str] = None
    component_4_object_type: Optional[str] = None
    component_4_name: Optional[str] = None
    component_5_object_type: Optional[str] = None
    component_5_name: Optional[str] = None
    component_6_object_type: Optional[str] = None
    component_6_name: Optional[str] = None
    component_7_object_type: Optional[str] = None
    component_7_name: Optional[str] = None
    component_8_object_type: Optional[str] = None
    component_8_name: Optional[str] = None
    component_9_object_type: Optional[str] = None
    component_9_name: Optional[str] = None


class AirLoopHvacOutdoorAirSystem(BaseModel):
    controller_list_name: Optional[str] = None
    outdoor_air_equipment_list_name: str


class OutdoorAirMixer(BaseModel):
    mixed_air_node_name: str
    outdoor_air_stream_node_name: str
    relief_air_stream_node_name: str
    return_air_stream_node_name: str


class Node(BaseModel):
    outlet_node_name: str


class AirLoopHvacZoneSplitter(BaseModel):
    inlet_node_name: str
    nodes: Optional[List[Node]] = None


class ComponentObjectType(Enum):
    air_loop_hvac_supply_plenum = "AirLoopHVAC:SupplyPlenum"
    air_loop_hvac_zone_splitter = "AirLoopHVAC:ZoneSplitter"


class Component(BaseModel):
    component_object_type: ComponentObjectType
    component_name: str


class AirLoopHvacSupplyPath(BaseModel):
    supply_air_path_inlet_node_name: str
    components: Optional[List[Component]] = None


class Node1(BaseModel):
    inlet_node_name: str


class AirLoopHvacZoneMixer(BaseModel):
    outlet_node_name: str
    nodes: Optional[List[Node1]] = None


class AirLoopHvacReturnPlenum(BaseModel):
    zone_name: str
    zone_node_name: str
    outlet_node_name: str
    induced_air_outlet_node_or_nodelist_name: Optional[str] = None
    nodes: Optional[List[Node1]] = None


class ComponentObjectType1(Enum):
    air_loop_hvac_return_plenum = "AirLoopHVAC:ReturnPlenum"
    air_loop_hvac_zone_mixer = "AirLoopHVAC:ZoneMixer"


class Component1(BaseModel):
    component_object_type: ComponentObjectType1
    component_name: str


class AirLoopHvacReturnPath(BaseModel):
    return_air_path_outlet_node_name: str
    components: Optional[List[Component1]] = None


class Component2(BaseModel):
    component_object_type: str
    component_name: str
    component_inlet_node_name: str
    component_outlet_node_name: str


class Branch(BaseModel):
    pressure_drop_curve_name: Optional[str] = None
    components: Optional[List[Component2]] = None


class Branch1(BaseModel):
    branch_name: str


class BranchList(BaseModel):
    branches: Optional[List[Branch1]] = None


class Branch2(BaseModel):
    outlet_branch_name: str


class ConnectorSplitter(BaseModel):
    inlet_branch_name: str
    branches: Optional[List[Branch2]] = None


class Branch3(BaseModel):
    inlet_branch_name: str


class ConnectorMixer(BaseModel):
    outlet_branch_name: str
    branches: Optional[List[Branch3]] = None


class Connector1ObjectType(Enum):
    connector_mixer = "Connector:Mixer"
    connector_splitter = "Connector:Splitter"


class ConnectorList(BaseModel):
    connector_1_object_type: Connector1ObjectType
    connector_1_name: str
    connector_2_object_type: Optional[Connector1ObjectType] = None
    connector_2_name: Optional[str] = None


class Node3(BaseModel):
    node_name: str


class NodeList(BaseModel):
    nodes: Optional[List[Node3]] = None


class WindAngleType(Enum):
    field_ = ""
    absolute = "Absolute"
    relative = "Relative"


class OutdoorAirNode(BaseModel):
    height_above_ground: Optional[float] = -1.0
    drybulb_temperature_schedule_name: Optional[str] = None
    wetbulb_temperature_schedule_name: Optional[str] = None
    wind_speed_schedule_name: Optional[str] = None
    wind_direction_schedule_name: Optional[str] = None
    wind_pressure_coefficient_curve_name: Optional[str] = None
    symmetric_wind_pressure_coefficient_curve: Optional[DoZoneSizingCalculation] = "No"
    wind_angle_type: Optional[WindAngleType] = "Absolute"


class Node4(BaseModel):
    node_or_nodelist_name: str


class OutdoorAirNodeList(BaseModel):
    nodes: Optional[List[Node4]] = None


class PipeAdiabatic(BaseModel):
    inlet_node_name: str
    outlet_node_name: str


class DesignMaximumFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class PumpControlType(Enum):
    field_ = ""
    continuous = "Continuous"
    intermittent = "Intermittent"


class VfdControlType(Enum):
    manual_control = "ManualControl"
    pressure_setpoint_control = "PressureSetpointControl"


class DesignPowerSizingMethod1(Enum):
    field_ = ""
    power_per_flow = "PowerPerFlow"
    power_per_flow_per_pressure = "PowerPerFlowPerPressure"


class PumpVariableSpeed(BaseModel):
    inlet_node_name: str
    outlet_node_name: str
    design_maximum_flow_rate: Optional[
        Union[DesignMaximumFlowRateItem, Literal["Autosize"]]
    ] = None
    design_pump_head: Optional[float] = 179352.0
    design_power_consumption: Optional[Union[float, Literal["Autosize"]]] = None
    motor_efficiency: Optional[float] = Field(0.9, gt=0.0, le=1.0)
    fraction_of_motor_inefficiencies_to_fluid_stream: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    coefficient_1_of_the_part_load_performance_curve: Optional[float] = 0.0
    coefficient_2_of_the_part_load_performance_curve: Optional[float] = 1.0
    coefficient_3_of_the_part_load_performance_curve: Optional[float] = 0.0
    coefficient_4_of_the_part_load_performance_curve: Optional[float] = 0.0
    design_minimum_flow_rate: Optional[
        Union[float, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = "Autosize"
    pump_control_type: Optional[PumpControlType] = "Continuous"
    pump_flow_rate_schedule_name: Optional[str] = None
    pump_curve_name: Optional[str] = None
    impeller_diameter: Optional[float] = None
    vfd_control_type: Optional[VfdControlType] = None
    pump_rpm_schedule_name: Optional[str] = None
    minimum_pressure_schedule: Optional[str] = None
    maximum_pressure_schedule: Optional[str] = None
    minimum_rpm_schedule: Optional[str] = None
    maximum_rpm_schedule: Optional[str] = None
    zone_name: Optional[str] = None
    skin_loss_radiative_fraction: Optional[float] = Field(None, ge=0.0, le=1.0)
    design_power_sizing_method: Optional[
        DesignPowerSizingMethod1
    ] = "PowerPerFlowPerPressure"
    design_electric_power_per_unit_flow_rate: Optional[float] = Field(348701.1, gt=0.0)
    design_shaft_power_per_unit_flow_rate_per_unit_head: Optional[float] = Field(
        1.282051282, gt=0.0
    )
    design_minimum_flow_rate_fraction: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    end_use_subcategory: Optional[str] = "General"


class DesignFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class PumpConstantSpeed(BaseModel):
    inlet_node_name: str
    outlet_node_name: str
    design_flow_rate: Optional[Union[DesignFlowRateItem, Literal["Autosize"]]] = None
    design_pump_head: Optional[float] = 179352.0
    design_power_consumption: Optional[Union[float, Literal["Autosize"]]] = None
    motor_efficiency: Optional[float] = Field(0.9, gt=0.0, le=1.0)
    fraction_of_motor_inefficiencies_to_fluid_stream: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    pump_control_type: Optional[PumpControlType] = "Continuous"
    pump_flow_rate_schedule_name: Optional[str] = None
    pump_curve_name: Optional[str] = None
    impeller_diameter: Optional[float] = None
    rotational_speed: Optional[float] = None
    zone_name: Optional[str] = None
    skin_loss_radiative_fraction: Optional[float] = Field(None, ge=0.0, le=1.0)
    design_power_sizing_method: Optional[
        DesignPowerSizingMethod1
    ] = "PowerPerFlowPerPressure"
    design_electric_power_per_unit_flow_rate: Optional[float] = Field(348701.1, gt=0.0)
    design_shaft_power_per_unit_flow_rate_per_unit_head: Optional[float] = Field(
        1.282051282, gt=0.0
    )
    end_use_subcategory: Optional[str] = "General"


class TotalDesignFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class FlowSequencingControlScheme(Enum):
    field_ = ""
    sequential = "Sequential"


class HeaderedPumpsVariableSpeed(BaseModel):
    inlet_node_name: str
    outlet_node_name: str
    total_design_flow_rate: Optional[
        Union[TotalDesignFlowRateItem, Literal["Autosize"]]
    ] = None
    number_of_pumps_in_bank: Optional[int] = None
    flow_sequencing_control_scheme: Optional[FlowSequencingControlScheme] = "Sequential"
    design_pump_head: Optional[float] = 179352.0
    design_power_consumption: Optional[Union[float, Literal["Autosize"]]] = None
    motor_efficiency: Optional[float] = Field(0.9, gt=0.0, le=1.0)
    fraction_of_motor_inefficiencies_to_fluid_stream: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    coefficient_1_of_the_part_load_performance_curve: Optional[float] = 0.0
    coefficient_2_of_the_part_load_performance_curve: Optional[float] = 1.0
    coefficient_3_of_the_part_load_performance_curve: Optional[float] = 0.0
    coefficient_4_of_the_part_load_performance_curve: Optional[float] = 0.0
    minimum_flow_rate_fraction: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    pump_control_type: Optional[PumpControlType] = "Continuous"
    pump_flow_rate_schedule_name: Optional[str] = None
    zone_name: Optional[str] = None
    skin_loss_radiative_fraction: Optional[float] = Field(None, ge=0.0, le=1.0)
    design_power_sizing_method: Optional[
        DesignPowerSizingMethod1
    ] = "PowerPerFlowPerPressure"
    design_electric_power_per_unit_flow_rate: Optional[float] = Field(348701.1, gt=0.0)
    design_shaft_power_per_unit_flow_rate_per_unit_head: Optional[float] = Field(
        1.282051282, gt=0.0
    )
    end_use_subcategory: Optional[str] = "General"


class FuelType4(Enum):
    coal = "Coal"
    diesel = "Diesel"
    electricity = "Electricity"
    fuel_oil_no1 = "FuelOilNo1"
    fuel_oil_no2 = "FuelOilNo2"
    gasoline = "Gasoline"
    natural_gas = "NaturalGas"
    other_fuel1 = "OtherFuel1"
    other_fuel2 = "OtherFuel2"
    propane = "Propane"


class NominalCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class EfficiencyCurveTemperatureEvaluationVariable(Enum):
    entering_boiler = "EnteringBoiler"
    leaving_boiler = "LeavingBoiler"


class BoilerFlowMode(Enum):
    field_ = ""
    constant_flow = "ConstantFlow"
    leaving_setpoint_modulated = "LeavingSetpointModulated"
    not_modulated = "NotModulated"


class BoilerHotWater(BaseModel):
    fuel_type: FuelType4
    nominal_capacity: Optional[Union[NominalCapacityItem, Literal["Autosize"]]] = None
    nominal_thermal_efficiency: float = Field(..., gt=0.0, le=1.0)
    efficiency_curve_temperature_evaluation_variable: Optional[
        EfficiencyCurveTemperatureEvaluationVariable
    ] = None
    normalized_boiler_efficiency_curve_name: Optional[str] = None
    design_water_flow_rate: Optional[
        Union[
            DesignWaterFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    minimum_part_load_ratio: Optional[float] = Field(0.0, ge=0.0)
    maximum_part_load_ratio: Optional[float] = Field(1.0, ge=0.0)
    optimum_part_load_ratio: Optional[float] = Field(1.0, ge=0.0)
    boiler_water_inlet_node_name: str
    boiler_water_outlet_node_name: str
    water_outlet_upper_temperature_limit: Optional[float] = 99.9
    boiler_flow_mode: Optional[BoilerFlowMode] = "NotModulated"
    parasitic_electric_load: Optional[float] = Field(0.0, ge=0.0)
    sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    end_use_subcategory: Optional[str] = "General"


class PerformanceInterpolationMethod(Enum):
    field_ = ""
    cubic = "Cubic"
    linear = "Linear"


class RatedCapacityItem2(CoolingSupplyAirFlowRateItem):
    pass


class AmbientTemperatureIndicator(Enum):
    outdoors = "Outdoors"
    schedule = "Schedule"
    zone = "Zone"


class ChilledWaterMaximumRequestedFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class CondenserMaximumRequestedFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class ChillerElectricAshrae205(BaseModel):
    representation_file_name: str
    performance_interpolation_method: Optional[
        PerformanceInterpolationMethod
    ] = "Linear"
    rated_capacity: Optional[
        Union[
            RatedCapacityItem2, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum
        ]
    ] = "Autosize"
    sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    ambient_temperature_indicator: AmbientTemperatureIndicator
    ambient_temperature_schedule_name: Optional[str] = None
    ambient_temperature_zone_name: Optional[str] = None
    ambient_temperature_outdoor_air_node_name: Optional[str] = None
    chilled_water_inlet_node_name: str
    chilled_water_outlet_node_name: str
    chilled_water_maximum_requested_flow_rate: Optional[
        Union[
            ChilledWaterMaximumRequestedFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    condenser_inlet_node_name: Optional[str] = None
    condenser_outlet_node_name: Optional[str] = None
    condenser_maximum_requested_flow_rate: Optional[
        Union[
            CondenserMaximumRequestedFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    chiller_flow_mode: Optional[BoilerFlowMode] = "NotModulated"
    oil_cooler_inlet_node_name: Optional[str] = None
    oil_cooler_outlet_node_name: Optional[str] = None
    oil_cooler_design_flow_rate: Optional[float] = Field(None, gt=0.0)
    auxiliary_inlet_node_name: Optional[str] = None
    auxiliary_outlet_node_name: Optional[str] = None
    auxiliary_cooling_design_flow_rate: Optional[float] = Field(None, gt=0.0)
    heat_recovery_inlet_node_name: Optional[str] = None
    heat_recovery_outlet_node_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"


class ReferenceCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class ReferenceChilledWaterFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class ReferenceCondenserFluidFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class CondenserType3(Enum):
    field_ = ""
    air_cooled = "AirCooled"
    evaporatively_cooled = "EvaporativelyCooled"
    water_cooled = "WaterCooled"


class DesignHeatRecoveryWaterFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class ChillerElectricEir(BaseModel):
    reference_capacity: Union[ReferenceCapacityItem, Literal["Autosize"]]
    reference_cop: float = Field(..., gt=0.0)
    reference_leaving_chilled_water_temperature: Optional[float] = 6.67
    reference_entering_condenser_fluid_temperature: Optional[float] = 29.4
    reference_chilled_water_flow_rate: Optional[
        Union[ReferenceChilledWaterFlowRateItem, Literal["Autosize"]]
    ] = None
    reference_condenser_fluid_flow_rate: Optional[
        Union[ReferenceCondenserFluidFlowRateItem, Literal["Autosize"]]
    ] = None
    cooling_capacity_function_of_temperature_curve_name: str
    electric_input_to_cooling_output_ratio_function_of_temperature_curve_name: str
    electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name: str
    minimum_part_load_ratio: Optional[float] = Field(0.1, ge=0.0)
    maximum_part_load_ratio: Optional[float] = Field(1.0, gt=0.0)
    optimum_part_load_ratio: Optional[float] = Field(1.0, gt=0.0)
    minimum_unloading_ratio: Optional[float] = Field(0.2, ge=0.0)
    chilled_water_inlet_node_name: str
    chilled_water_outlet_node_name: str
    condenser_inlet_node_name: Optional[str] = None
    condenser_outlet_node_name: Optional[str] = None
    condenser_type: Optional[CondenserType3] = "WaterCooled"
    condenser_fan_power_ratio: Optional[float] = Field(0.0, ge=0.0)
    fraction_of_compressor_electric_consumption_rejected_by_condenser: Optional[
        float
    ] = Field(1.0, gt=0.0, le=1.0)
    leaving_chilled_water_lower_temperature_limit: Optional[float] = 2.0
    chiller_flow_mode: Optional[BoilerFlowMode] = "NotModulated"
    design_heat_recovery_water_flow_rate: Optional[
        Union[
            DesignHeatRecoveryWaterFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = 0.0
    heat_recovery_inlet_node_name: Optional[str] = None
    heat_recovery_outlet_node_name: Optional[str] = None
    sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    basin_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    basin_heater_setpoint_temperature: Optional[float] = Field(2.0, ge=2.0)
    basin_heater_operating_schedule_name: Optional[str] = None
    condenser_heat_recovery_relative_capacity_fraction: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    heat_recovery_inlet_high_temperature_limit_schedule_name: Optional[str] = None
    heat_recovery_leaving_temperature_setpoint_node_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"


class ReferenceCondenserWaterFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType(Enum):
    field_ = ""
    leaving_condenser_water_temperature = "LeavingCondenserWaterTemperature"
    lift = "Lift"


class ChillerElectricReformulatedEir(BaseModel):
    reference_capacity: Union[ReferenceCapacityItem, Literal["Autosize"]]
    reference_cop: float = Field(..., gt=0.0)
    reference_leaving_chilled_water_temperature: Optional[float] = 6.67
    reference_leaving_condenser_water_temperature: Optional[float] = 35.0
    reference_chilled_water_flow_rate: Optional[
        Union[ReferenceChilledWaterFlowRateItem, Literal["Autosize"]]
    ] = None
    reference_condenser_water_flow_rate: Optional[
        Union[ReferenceCondenserWaterFlowRateItem, Literal["Autosize"]]
    ] = None
    cooling_capacity_function_of_temperature_curve_name: str
    electric_input_to_cooling_output_ratio_function_of_temperature_curve_name: str
    electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_type: Optional[
        ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType
    ] = "LeavingCondenserWaterTemperature"
    electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name: str
    minimum_part_load_ratio: Optional[float] = Field(0.1, ge=0.0)
    maximum_part_load_ratio: Optional[float] = Field(1.0, gt=0.0)
    optimum_part_load_ratio: Optional[float] = Field(1.0, gt=0.0)
    minimum_unloading_ratio: Optional[float] = Field(0.2, ge=0.0)
    chilled_water_inlet_node_name: str
    chilled_water_outlet_node_name: str
    condenser_inlet_node_name: str
    condenser_outlet_node_name: str
    fraction_of_compressor_electric_consumption_rejected_by_condenser: Optional[
        float
    ] = Field(1.0, gt=0.0, le=1.0)
    leaving_chilled_water_lower_temperature_limit: Optional[float] = 2.0
    chiller_flow_mode_type: Optional[BoilerFlowMode] = "NotModulated"
    design_heat_recovery_water_flow_rate: Optional[
        Union[
            DesignHeatRecoveryWaterFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = 0.0
    heat_recovery_inlet_node_name: Optional[str] = None
    heat_recovery_outlet_node_name: Optional[str] = None
    sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    condenser_heat_recovery_relative_capacity_fraction: Optional[float] = Field(
        None, ge=0.0, le=1.0
    )
    heat_recovery_inlet_high_temperature_limit_schedule_name: Optional[str] = None
    heat_recovery_leaving_temperature_setpoint_node_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"


class DesignWaterFlowRateItem2(CoolingSupplyAirFlowRateItem):
    pass


class DesignAirFlowRateItem1(CoolingSupplyAirFlowRateItem):
    pass


class DesignFanPowerItem(CoolingSupplyAirFlowRateItem):
    pass


class DesignUFactorTimesAreaValueItem(RootModel):
    root: float = Field(..., gt=0.0, le=2100000.0)


class FreeConvectionRegimeAirFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class FreeConvectionRegimeUFactorTimesAreaValueItem(RootModel):
    root: float = Field(..., ge=0.0, le=300000.0)


class FreeConvectionCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class DesignApproachTemperatureItem(CoolingSupplyAirFlowRateItem):
    pass


class DesignRangeTemperatureItem(CoolingSupplyAirFlowRateItem):
    pass


class EvaporationLossMode(Enum):
    field_ = ""
    loss_factor = "LossFactor"
    saturated_exit = "SaturatedExit"


class BlowdownCalculationMode(Enum):
    field_ = ""
    concentration_ratio = "ConcentrationRatio"
    scheduled_rate = "ScheduledRate"


class CapacityControl(Enum):
    field_ = ""
    fan_cycling = "FanCycling"
    fluid_bypass = "FluidBypass"


class CellControl(Enum):
    field_ = ""
    maximal_cell = "MaximalCell"
    minimal_cell = "MinimalCell"


class CoolingTowerSingleSpeed(BaseModel):
    water_inlet_node_name: str
    water_outlet_node_name: str
    design_water_flow_rate: Optional[
        Union[DesignWaterFlowRateItem2, Literal["Autosize"]]
    ] = None
    design_air_flow_rate: Union[DesignAirFlowRateItem1, Literal["Autosize"]]
    design_fan_power: Union[DesignFanPowerItem, Literal["Autosize"]]
    design_u_factor_times_area_value: Optional[
        Union[DesignUFactorTimesAreaValueItem, Literal["Autosize"]]
    ] = None
    free_convection_regime_air_flow_rate: Optional[
        Union[FreeConvectionRegimeAirFlowRateItem, CeilingHeightEnum]
    ] = 0.0
    free_convection_regime_air_flow_rate_sizing_factor: Optional[float] = Field(
        0.1, gt=0.0, lt=1.0
    )
    free_convection_regime_u_factor_times_area_value: Optional[
        Union[FreeConvectionRegimeUFactorTimesAreaValueItem, CeilingHeightEnum]
    ] = 0.0
    free_convection_u_factor_times_area_value_sizing_factor: Optional[float] = Field(
        0.1, gt=0.0, lt=1.0
    )
    performance_input_method: Optional[
        PerformanceInputMethod
    ] = "UFactorTimesAreaAndDesignWaterFlowRate"
    heat_rejection_capacity_and_nominal_capacity_sizing_ratio: Optional[float] = 1.25
    nominal_capacity: Optional[float] = Field(None, gt=0.0)
    free_convection_capacity: Optional[
        Union[FreeConvectionCapacityItem, Literal["Autocalculate"]]
    ] = None
    free_convection_nominal_capacity_sizing_factor: Optional[float] = Field(
        0.1, gt=0.0, lt=1.0
    )
    design_inlet_air_dry_bulb_temperature: Optional[float] = Field(35.0, ge=20.0)
    design_inlet_air_wet_bulb_temperature: Optional[float] = Field(25.6, ge=20.0)
    design_approach_temperature: Optional[
        Union[
            DesignApproachTemperatureItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    design_range_temperature: Optional[
        Union[
            DesignRangeTemperatureItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    basin_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    basin_heater_setpoint_temperature: Optional[float] = Field(2.0, ge=2.0)
    basin_heater_operating_schedule_name: Optional[str] = None
    evaporation_loss_mode: Optional[EvaporationLossMode] = "SaturatedExit"
    evaporation_loss_factor: Optional[float] = 0.2
    drift_loss_percent: Optional[float] = 0.008
    blowdown_calculation_mode: Optional[BlowdownCalculationMode] = "ConcentrationRatio"
    blowdown_concentration_ratio: Optional[float] = Field(3.0, ge=2.0)
    blowdown_makeup_water_usage_schedule_name: Optional[str] = None
    supply_water_storage_tank_name: Optional[str] = None
    outdoor_air_inlet_node_name: Optional[str] = None
    capacity_control: Optional[CapacityControl] = "FanCycling"
    number_of_cells: Optional[int] = Field(1, ge=1)
    cell_control: Optional[CellControl] = "MaximalCell"
    cell_minimum_water_flow_rate_fraction: Optional[float] = Field(0.33, gt=0.0, le=1.0)
    cell_maximum_water_flow_rate_fraction: Optional[float] = Field(2.5, ge=1.0)
    sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    end_use_subcategory: Optional[str] = "General"


class ModelType(Enum):
    field_ = ""
    cool_tools_cross_flow = "CoolToolsCrossFlow"
    cool_tools_user_defined = "CoolToolsUserDefined"
    york_calc = "YorkCalc"
    york_calc_user_defined = "YorkCalcUserDefined"


class CoolingTowerVariableSpeed(BaseModel):
    model_config = ConfigDict(protected_namespaces=())

    water_inlet_node_name: str
    water_outlet_node_name: str
    model_type: Optional[ModelType] = "YorkCalc"
    model_coefficient_name: Optional[str] = None
    design_inlet_air_wet_bulb_temperature: Optional[float] = Field(25.6, ge=20.0)
    design_approach_temperature: Optional[float] = Field(3.9, gt=0.0)
    design_range_temperature: Optional[float] = Field(5.6, gt=0.0)
    design_water_flow_rate: Union[DesignWaterFlowRateItem2, Literal["Autosize"]]
    design_air_flow_rate: Union[DesignAirFlowRateItem1, Literal["Autosize"]]
    design_fan_power: Union[DesignFanPowerItem, Literal["Autosize"]]
    fan_power_ratio_function_of_air_flow_rate_ratio_curve_name: Optional[str] = None
    minimum_air_flow_rate_ratio: Optional[float] = Field(0.2, ge=0.2, le=0.5)
    fraction_of_tower_capacity_in_free_convection_regime: Optional[float] = Field(
        0.125, ge=0.0, le=0.2
    )
    basin_heater_capacity: Optional[float] = Field(0.0, ge=0.0)
    basin_heater_setpoint_temperature: Optional[float] = Field(2.0, ge=2.0)
    basin_heater_operating_schedule_name: Optional[str] = None
    evaporation_loss_mode: Optional[EvaporationLossMode] = "SaturatedExit"
    evaporation_loss_factor: Optional[float] = 0.2
    drift_loss_percent: Optional[float] = 0.008
    blowdown_calculation_mode: Optional[BlowdownCalculationMode] = "ConcentrationRatio"
    blowdown_concentration_ratio: Optional[float] = Field(3.0, ge=2.0)
    blowdown_makeup_water_usage_schedule_name: Optional[str] = None
    supply_water_storage_tank_name: Optional[str] = None
    outdoor_air_inlet_node_name: Optional[str] = None
    number_of_cells: Optional[int] = Field(1, ge=1)
    cell_control: Optional[CellControl] = "MaximalCell"
    cell_minimum_water_flow_rate_fraction: Optional[float] = Field(0.33, gt=0.0, le=1.0)
    cell_maximum_water_flow_rate_fraction: Optional[float] = Field(2.5, ge=1.0)
    sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    end_use_subcategory: Optional[str] = "General"


class HighFanSpeedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class HighFanSpeedFanPowerItem(CoolingSupplyAirFlowRateItem):
    pass


class LowFanSpeedAirFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class LowFanSpeedFanPowerItem(CoolingSupplyAirFlowRateItem):
    pass


class PerformanceInputMethod2(Enum):
    standard_design_capacity = "StandardDesignCapacity"
    u_factor_times_area_and_design_water_flow_rate = (
        "UFactorTimesAreaAndDesignWaterFlowRate"
    )
    user_specified_design_capacity = "UserSpecifiedDesignCapacity"


class LowSpeedStandardDesignCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class HighFanSpeedUFactorTimesAreaValueItem(DesignUFactorTimesAreaValueItem):
    pass


class LowFanSpeedUFactorTimesAreaValueItem(RootModel):
    root: float = Field(..., gt=0.0, le=300000.0)


class LowSpeedUserSpecifiedDesignCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class EvaporativeFluidCoolerTwoSpeed(BaseModel):
    water_inlet_node_name: str
    water_outlet_node_name: str
    high_fan_speed_air_flow_rate: Union[
        HighFanSpeedAirFlowRateItem, Literal["Autosize"]
    ]
    high_fan_speed_fan_power: Union[HighFanSpeedFanPowerItem, Literal["Autosize"]]
    low_fan_speed_air_flow_rate: Union[
        LowFanSpeedAirFlowRateItem, Literal["Autocalculate"]
    ]
    low_fan_speed_air_flow_rate_sizing_factor: Optional[float] = 0.5
    low_fan_speed_fan_power: Union[LowFanSpeedFanPowerItem, Literal["Autocalculate"]]
    low_fan_speed_fan_power_sizing_factor: Optional[float] = 0.16
    design_spray_water_flow_rate: float = Field(..., gt=0.0)
    performance_input_method: PerformanceInputMethod2
    outdoor_air_inlet_node_name: Optional[str] = None
    heat_rejection_capacity_and_nominal_capacity_sizing_ratio: Optional[float] = 1.25
    high_speed_standard_design_capacity: Optional[float] = Field(None, gt=0.0)
    low_speed_standard_design_capacity: Optional[
        Union[LowSpeedStandardDesignCapacityItem, Literal["Autocalculate"]]
    ] = None
    low_speed_standard_capacity_sizing_factor: Optional[float] = 0.5
    high_fan_speed_u_factor_times_area_value: Optional[
        Union[HighFanSpeedUFactorTimesAreaValueItem, Literal["Autosize"]]
    ] = None
    low_fan_speed_u_factor_times_area_value: Optional[
        Union[LowFanSpeedUFactorTimesAreaValueItem, Literal["Autocalculate"]]
    ] = None
    low_fan_speed_u_factor_times_area_sizing_factor: Optional[float] = 0.6
    design_water_flow_rate: Optional[
        Union[DesignWaterFlowRateItem2, Literal["Autosize"]]
    ] = None
    high_speed_user_specified_design_capacity: Optional[float] = Field(None, gt=0.0)
    low_speed_user_specified_design_capacity: Optional[
        Union[LowSpeedUserSpecifiedDesignCapacityItem, Literal["Autocalculate"]]
    ] = None
    low_speed_user_specified_design_capacity_sizing_factor: Optional[float] = 0.5
    design_entering_water_temperature: Optional[float] = Field(None, gt=0.0)
    design_entering_air_temperature: Optional[float] = Field(None, gt=0.0)
    design_entering_air_wet_bulb_temperature: Optional[float] = Field(None, gt=0.0)
    high_speed_sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    evaporation_loss_mode: Optional[EvaporationLossMode] = "SaturatedExit"
    evaporation_loss_factor: Optional[float] = None
    drift_loss_percent: Optional[float] = 0.008
    blowdown_calculation_mode: Optional[BlowdownCalculationMode] = "ConcentrationRatio"
    blowdown_concentration_ratio: Optional[float] = Field(3.0, ge=2.0)
    blowdown_makeup_water_usage_schedule_name: Optional[str] = None
    supply_water_storage_tank_name: Optional[str] = None


class LowSpeedNominalCapacityItem(CoolingSupplyAirFlowRateItem):
    pass


class FluidCoolerTwoSpeed(BaseModel):
    water_inlet_node_name: str
    water_outlet_node_name: str
    performance_input_method: Optional[PerformanceInputMethod] = "NominalCapacity"
    high_fan_speed_u_factor_times_area_value: Optional[
        Union[HighFanSpeedUFactorTimesAreaValueItem, Literal["Autosize"]]
    ] = None
    low_fan_speed_u_factor_times_area_value: Optional[
        Union[LowFanSpeedUFactorTimesAreaValueItem, Literal["Autocalculate"]]
    ] = None
    low_fan_speed_u_factor_times_area_sizing_factor: Optional[float] = 0.6
    high_speed_nominal_capacity: Optional[float] = Field(None, gt=0.0)
    low_speed_nominal_capacity: Optional[
        Union[LowSpeedNominalCapacityItem, Literal["Autocalculate"]]
    ] = None
    low_speed_nominal_capacity_sizing_factor: Optional[float] = 0.5
    design_entering_water_temperature: float = Field(..., gt=0.0)
    design_entering_air_temperature: float = Field(..., gt=0.0)
    design_entering_air_wet_bulb_temperature: float = Field(..., gt=0.0)
    design_water_flow_rate: Union[DesignWaterFlowRateItem2, Literal["Autosize"]]
    high_fan_speed_air_flow_rate: Union[
        HighFanSpeedAirFlowRateItem, Literal["Autosize"]
    ]
    high_fan_speed_fan_power: Union[HighFanSpeedFanPowerItem, Literal["Autosize"]]
    low_fan_speed_air_flow_rate: Union[
        LowFanSpeedAirFlowRateItem, Literal["Autocalculate"]
    ]
    low_fan_speed_air_flow_rate_sizing_factor: Optional[float] = 0.5
    low_fan_speed_fan_power: Union[LowFanSpeedFanPowerItem, Literal["Autocalculate"]]
    low_fan_speed_fan_power_sizing_factor: Optional[float] = 0.16
    outdoor_air_inlet_node_name: Optional[str] = None


class LoopDemandSideDesignFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class LoopSupplySideDesignFlowRateItem(CoolingSupplyAirFlowRateItem):
    pass


class HeatExchangeModelType(Enum):
    field_ = ""
    counter_flow = "CounterFlow"
    cross_flow_both_mixed = "CrossFlowBothMixed"
    cross_flow_both_un_mixed = "CrossFlowBothUnMixed"
    cross_flow_supply_mixed_demand_un_mixed = "CrossFlowSupplyMixedDemandUnMixed"
    cross_flow_supply_un_mixed_demand_mixed = "CrossFlowSupplyUnMixedDemandMixed"
    ideal = "Ideal"
    parallel_flow = "ParallelFlow"


class HeatExchangerUFactorTimesAreaValueItem(CoolingSupplyAirFlowRateItem):
    pass


class ControlType1(Enum):
    field_ = ""
    cooling_differential_on_off = "CoolingDifferentialOnOff"
    cooling_setpoint_modulated = "CoolingSetpointModulated"
    cooling_setpoint_on_off = "CoolingSetpointOnOff"
    cooling_setpoint_on_off_with_component_override = (
        "CoolingSetpointOnOffWithComponentOverride"
    )
    dual_deadband_setpoint_modulated = "DualDeadbandSetpointModulated"
    dual_deadband_setpoint_on_off = "DualDeadbandSetpointOnOff"
    heating_setpoint_modulated = "HeatingSetpointModulated"
    heating_setpoint_on_off = "HeatingSetpointOnOff"
    operation_scheme_modulated = "OperationSchemeModulated"
    operation_scheme_on_off = "OperationSchemeOnOff"
    uncontrolled_on = "UncontrolledOn"


class HeatTransferMeteringEndUseType(Enum):
    field_ = ""
    free_cooling = "FreeCooling"
    heat_recovery = "HeatRecovery"
    heat_recovery_for_cooling = "HeatRecoveryForCooling"
    heat_recovery_for_heating = "HeatRecoveryForHeating"
    heat_rejection = "HeatRejection"
    loop_to_loop = "LoopToLoop"


class ComponentOverrideCoolingControlTemperatureMode(Enum):
    field_ = ""
    dry_bulb_temperature = "DryBulbTemperature"
    loop = "Loop"
    wet_bulb_temperature = "WetBulbTemperature"


class HeatExchangerFluidToFluid(BaseModel):
    availability_schedule_name: Optional[str] = None
    loop_demand_side_inlet_node_name: str
    loop_demand_side_outlet_node_name: str
    loop_demand_side_design_flow_rate: Union[
        LoopDemandSideDesignFlowRateItem, Literal["Autosize"]
    ]
    loop_supply_side_inlet_node_name: str
    loop_supply_side_outlet_node_name: str
    loop_supply_side_design_flow_rate: Union[
        LoopSupplySideDesignFlowRateItem, Literal["Autosize"]
    ]
    heat_exchange_model_type: Optional[HeatExchangeModelType] = "Ideal"
    heat_exchanger_u_factor_times_area_value: Union[
        HeatExchangerUFactorTimesAreaValueItem, Literal["Autosize"]
    ]
    control_type: Optional[ControlType1] = "UncontrolledOn"
    heat_exchanger_setpoint_node_name: Optional[str] = None
    minimum_temperature_difference_to_activate_heat_exchanger: Optional[float] = Field(
        0.01, ge=0.0, le=50.0
    )
    heat_transfer_metering_end_use_type: Optional[
        HeatTransferMeteringEndUseType
    ] = "LoopToLoop"
    component_override_loop_supply_side_inlet_node_name: Optional[str] = None
    component_override_loop_demand_side_inlet_node_name: Optional[str] = None
    component_override_cooling_control_temperature_mode: Optional[
        ComponentOverrideCoolingControlTemperatureMode
    ] = "Loop"
    sizing_factor: Optional[float] = Field(1.0, gt=0.0)
    operation_minimum_temperature_limit: Optional[float] = None
    operation_maximum_temperature_limit: Optional[float] = None


class TankVolumeItem(DesignOutdoorAirFlowRateItem):
    pass


class HeaterControlType(Enum):
    field_ = ""
    cycle = "Cycle"
    modulate = "Modulate"


class HeaterMaximumCapacityItem(DesignOutdoorAirFlowRateItem):
    pass


class HeaterFuelType(Enum):
    coal = "Coal"
    diesel = "Diesel"
    district_heating = "DistrictHeating"
    electricity = "Electricity"
    fuel_oil_no1 = "FuelOilNo1"
    fuel_oil_no2 = "FuelOilNo2"
    gasoline = "Gasoline"
    natural_gas = "NaturalGas"
    other_fuel1 = "OtherFuel1"
    other_fuel2 = "OtherFuel2"
    propane = "Propane"
    steam = "Steam"


class UseSideDesignFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class SourceSideDesignFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class SourceSideFlowControlMode(Enum):
    field_ = ""
    indirect_heat_alternate_setpoint = "IndirectHeatAlternateSetpoint"
    indirect_heat_primary_setpoint = "IndirectHeatPrimarySetpoint"
    storage_tank = "StorageTank"


class WaterHeaterMixed(BaseModel):
    tank_volume: Optional[
        Union[TankVolumeItem, DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum]
    ] = 0.0
    setpoint_temperature_schedule_name: str
    deadband_temperature_difference: Optional[float] = Field(0.0, ge=0.0)
    maximum_temperature_limit: Optional[float] = None
    heater_control_type: Optional[HeaterControlType] = "Cycle"
    heater_maximum_capacity: Optional[
        Union[HeaterMaximumCapacityItem, Literal["Autosize"]]
    ] = None
    heater_minimum_capacity: Optional[float] = Field(None, ge=0.0)
    heater_ignition_minimum_flow_rate: Optional[float] = Field(0.0, ge=0.0)
    heater_ignition_delay: Optional[float] = Field(0.0, ge=0.0)
    heater_fuel_type: HeaterFuelType
    heater_thermal_efficiency: float = Field(..., gt=0.0, le=1.0)
    part_load_factor_curve_name: Optional[str] = None
    off_cycle_parasitic_fuel_consumption_rate: Optional[float] = Field(0.0, ge=0.0)
    off_cycle_parasitic_fuel_type: Optional[HeaterFuelType] = None
    off_cycle_parasitic_heat_fraction_to_tank: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    on_cycle_parasitic_fuel_consumption_rate: Optional[float] = Field(0.0, ge=0.0)
    on_cycle_parasitic_fuel_type: Optional[HeaterFuelType] = None
    on_cycle_parasitic_heat_fraction_to_tank: Optional[float] = Field(
        0.0, ge=0.0, le=1.0
    )
    ambient_temperature_indicator: AmbientTemperatureIndicator
    ambient_temperature_schedule_name: Optional[str] = None
    ambient_temperature_zone_name: Optional[str] = None
    ambient_temperature_outdoor_air_node_name: Optional[str] = None
    off_cycle_loss_coefficient_to_ambient_temperature: Optional[float] = Field(
        None, ge=0.0
    )
    off_cycle_loss_fraction_to_zone: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    on_cycle_loss_coefficient_to_ambient_temperature: Optional[float] = Field(
        None, ge=0.0
    )
    on_cycle_loss_fraction_to_zone: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    peak_use_flow_rate: Optional[float] = Field(None, ge=0.0)
    use_flow_rate_fraction_schedule_name: Optional[str] = None
    cold_water_supply_temperature_schedule_name: Optional[str] = None
    use_side_inlet_node_name: Optional[str] = None
    use_side_outlet_node_name: Optional[str] = None
    use_side_effectiveness: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    source_side_inlet_node_name: Optional[str] = None
    source_side_outlet_node_name: Optional[str] = None
    source_side_effectiveness: Optional[float] = Field(1.0, gt=0.0, le=1.0)
    use_side_design_flow_rate: Optional[
        Union[
            UseSideDesignFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    source_side_design_flow_rate: Optional[
        Union[
            SourceSideDesignFlowRateItem,
            DedicatedOutdoorAirLowSetpointTemperatureForDesignEnum,
        ]
    ] = "Autosize"
    indirect_water_heating_recovery_time: Optional[float] = Field(1.5, gt=0.0)
    source_side_flow_control_mode: Optional[
        SourceSideFlowControlMode
    ] = "IndirectHeatPrimarySetpoint"
    indirect_alternate_setpoint_temperature_schedule_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"


class FluidType(Enum):
    field_ = ""
    steam = "Steam"
    user_defined_fluid_type = "UserDefinedFluidType"
    water = "Water"


class MaximumLoopFlowRateItem(DesignOutdoorAirFlowRateItem):
    pass


class PlantLoopVolumeItem(DesignOutdoorAirFlowRateItem):
    pass


class LoadDistributionScheme1(Enum):
    field_ = ""
    optimal = "Optimal"
    sequential_load = "SequentialLoad"
    sequential_uniform_plr = "SequentialUniformPLR"
    uniform_load = "UniformLoad"
    uniform_plr = "UniformPLR"


class PlantLoopDemandCalculationScheme(Enum):
    field_ = ""
    dual_setpoint_deadband = "DualSetpointDeadband"
    single_setpoint = "SingleSetpoint"


class CommonPipeSimulation(Enum):
    field_ = ""
    common_pipe = "CommonPipe"
    none = "None"
    two_way_common_pipe = "TwoWayCommonPipe"


class PressureSimulationType(Enum):
    field_ = ""
    loop_flow_correction = "LoopFlowCorrection"
    none = "None"
    pump_power_correction = "PumpPowerCorrection"


class PlantLoop(BaseModel):
    fluid_type: Optional[FluidType] = "Water"
    user_defined_fluid_type: Optional[str] = None
    plant_equipment_operation_scheme_name: str
    loop_temperature_setpoint_node_name: str
    maximum_loop_temperature: float
    minimum_loop_temperature: float
    maximum_loop_flow_rate: Union[MaximumLoopFlowRateItem, Literal["Autosize"]]
    minimum_loop_flow_rate: Optional[float] = 0.0
    plant_loop_volume: Optional[
        Union[PlantLoopVolumeItem, CeilingHeightEnum]
    ] = "Autocalculate"
    plant_side_inlet_node_name: str
    plant_side_outlet_node_name: str
    plant_side_branch_list_name: str
    plant_side_connector_list_name: Optional[str] = None
    demand_side_inlet_node_name: str
    demand_side_outlet_node_name: str
    demand_side_branch_list_name: str
    demand_side_connector_list_name: Optional[str] = None
    load_distribution_scheme: Optional[LoadDistributionScheme1] = "SequentialLoad"
    availability_manager_list_name: Optional[str] = None
    plant_loop_demand_calculation_scheme: Optional[
        PlantLoopDemandCalculationScheme
    ] = "SingleSetpoint"
    common_pipe_simulation: Optional[CommonPipeSimulation] = "None"
    pressure_simulation_type: Optional[PressureSimulationType] = "None"
    loop_circulation_time: Optional[float] = Field(2.0, ge=0.0)


class FluidType1(Enum):
    field_ = ""
    user_defined_fluid_type = "UserDefinedFluidType"
    water = "Water"


class MaximumLoopFlowRateItem1(CoolingSupplyAirFlowRateItem):
    pass


class CondenserLoopVolumeItem(DesignOutdoorAirFlowRateItem):
    pass


class CondenserLoop(BaseModel):
    fluid_type: Optional[FluidType1] = "Water"
    user_defined_fluid_type: Optional[str] = None
    condenser_equipment_operation_scheme_name: str
    condenser_loop_temperature_setpoint_node_name: str
    maximum_loop_temperature: float
    minimum_loop_temperature: float
    maximum_loop_flow_rate: Union[MaximumLoopFlowRateItem1, Literal["Autosize"]]
    minimum_loop_flow_rate: Optional[float] = 0.0
    condenser_loop_volume: Optional[
        Union[CondenserLoopVolumeItem, CeilingHeightEnum]
    ] = "Autocalculate"
    condenser_side_inlet_node_name: str
    condenser_side_outlet_node_name: str
    condenser_side_branch_list_name: str
    condenser_side_connector_list_name: str
    demand_side_inlet_node_name: str
    demand_side_outlet_node_name: str
    condenser_demand_side_branch_list_name: str
    condenser_demand_side_connector_list_name: str
    load_distribution_scheme: Optional[LoadDistributionScheme1] = "SequentialLoad"
    pressure_simulation_type: Optional[PressureSimulationType] = "None"
    loop_circulation_time: Optional[float] = Field(2.0, ge=0.0)


class EquipmentItem1(BaseModel):
    equipment_object_type: Optional[str] = None
    equipment_name: Optional[str] = None


class PlantEquipmentList(BaseModel):
    equipment: Optional[List[EquipmentItem1]] = None


class CondenserEquipmentList(PlantEquipmentList):
    pass


class PlantEquipmentOperationCoolingLoad(BaseModel):
    load_range_1_lower_limit: float = Field(..., ge=0.0)
    load_range_1_upper_limit: float = Field(..., ge=0.0)
    range_1_equipment_list_name: Optional[str] = None
    load_range_2_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_2_upper_limit: Optional[float] = None
    range_2_equipment_list_name: Optional[str] = None
    load_range_3_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_3_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_3_equipment_list_name: Optional[str] = None
    load_range_4_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_4_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_4_equipment_list_name: Optional[str] = None
    load_range_5_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_5_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_5_equipment_list_name: Optional[str] = None
    load_range_6_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_6_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_6_equipment_list_name: Optional[str] = None
    load_range_7_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_7_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_7_equipment_list_name: Optional[str] = None
    load_range_8_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_8_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_8_equipment_list_name: Optional[str] = None
    load_range_9_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_9_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_9_equipment_list_name: Optional[str] = None
    load_range_10_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_10_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_10_equipment_list_name: Optional[str] = None


class PlantEquipmentOperationHeatingLoad(BaseModel):
    load_range_1_lower_limit: float = Field(..., ge=0.0)
    load_range_1_upper_limit: float = Field(..., ge=0.0)
    range_1_equipment_list_name: str
    load_range_2_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_2_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_2_equipment_list_name: Optional[str] = None
    load_range_3_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_3_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_3_equipment_list_name: Optional[str] = None
    load_range_4_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_4_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_4_equipment_list_name: Optional[str] = None
    load_range_5_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_5_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_5_equipment_list_name: Optional[str] = None
    load_range_6_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_6_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_6_equipment_list_name: Optional[str] = None
    load_range_7_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_7_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_7_equipment_list_name: Optional[str] = None
    load_range_8_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_8_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_8_equipment_list_name: Optional[str] = None
    load_range_9_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_9_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_9_equipment_list_name: Optional[str] = None
    load_range_10_lower_limit: Optional[float] = Field(None, ge=0.0)
    load_range_10_upper_limit: Optional[float] = Field(None, ge=0.0)
    range_10_equipment_list_name: Optional[str] = None


class Operation1Type(Enum):
    cooling = "Cooling"
    dual = "Dual"
    heating = "Heating"


class PlantEquipmentOperationComponentSetpoint(BaseModel):
    equipment_1_object_type: str
    equipment_1_name: str
    demand_calculation_1_node_name: str
    setpoint_1_node_name: str
    component_1_flow_rate: Union[float, Literal["Autosize"]]
    operation_1_type: Operation1Type
    equipment_2_object_type: Optional[str] = None
    equipment_2_name: Optional[str] = None
    demand_calculation_2_node_name: Optional[str] = None
    setpoint_2_node_name: Optional[str] = None
    component_2_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_2_type: Optional[Operation1Type] = None
    equipment_3_object_type: Optional[str] = None
    equipment_3_name: Optional[str] = None
    demand_calculation_3_node_name: Optional[str] = None
    setpoint_3_node_name: Optional[str] = None
    component_3_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_3_type: Optional[Operation1Type] = None
    equipment_4_object_type: Optional[str] = None
    equipment_4_name: Optional[str] = None
    demand_calculation_4_node_name: Optional[str] = None
    setpoint_4_node_name: Optional[str] = None
    component_4_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_4_type: Optional[Operation1Type] = None
    equipment_5_object_type: Optional[str] = None
    equipment_5_name: Optional[str] = None
    demand_calculation_5_node_name: Optional[str] = None
    setpoint_5_node_name: Optional[str] = None
    component_5_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_5_type: Optional[Operation1Type] = None
    equipment_6_object_type: Optional[str] = None
    equipment_6_name: Optional[str] = None
    demand_calculation_6_node_name: Optional[str] = None
    setpoint_6_node_name: Optional[str] = None
    component_6_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_6_type: Optional[Operation1Type] = None
    equipment_7_object_type: Optional[str] = None
    equipment_7_name: Optional[str] = None
    demand_calculation_7_node_name: Optional[str] = None
    setpoint_7_node_name: Optional[str] = None
    component_7_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_7_type: Optional[Operation1Type] = None
    equipment_8_object_type: Optional[str] = None
    equipment_8_name: Optional[str] = None
    demand_calculation_8_node_name: Optional[str] = None
    setpoint_8_node_name: Optional[str] = None
    component_8_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_8_type: Optional[Operation1Type] = None
    equipment_9_object_type: Optional[str] = None
    equipment_9_name: Optional[str] = None
    demand_calculation_9_node_name: Optional[str] = None
    setpoint_9_node_name: Optional[str] = None
    component_9_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_9_type: Optional[Operation1Type] = None
    equipment_10_object_type: Optional[str] = None
    equipment_10_name: Optional[str] = None
    demand_calculation_10_node_name: Optional[str] = None
    setpoint_10_node_name: Optional[str] = None
    component_10_flow_rate: Optional[Union[float, Literal["Autosize"]]] = None
    operation_10_type: Optional[Operation1Type] = None


class ControlScheme1ObjectType(Enum):
    plant_equipment_operation_component_setpoint = (
        "PlantEquipmentOperation:ComponentSetpoint"
    )
    plant_equipment_operation_cooling_load = "PlantEquipmentOperation:CoolingLoad"
    plant_equipment_operation_heating_load = "PlantEquipmentOperation:HeatingLoad"
    plant_equipment_operation_outdoor_dewpoint = (
        "PlantEquipmentOperation:OutdoorDewpoint"
    )
    plant_equipment_operation_outdoor_dewpoint_difference = (
        "PlantEquipmentOperation:OutdoorDewpointDifference"
    )
    plant_equipment_operation_outdoor_dry_bulb = (
        "PlantEquipmentOperation:OutdoorDryBulb"
    )
    plant_equipment_operation_outdoor_dry_bulb_difference = (
        "PlantEquipmentOperation:OutdoorDryBulbDifference"
    )
    plant_equipment_operation_outdoor_relative_humidity = (
        "PlantEquipmentOperation:OutdoorRelativeHumidity"
    )
    plant_equipment_operation_outdoor_wet_bulb = (
        "PlantEquipmentOperation:OutdoorWetBulb"
    )
    plant_equipment_operation_outdoor_wet_bulb_difference = (
        "PlantEquipmentOperation:OutdoorWetBulbDifference"
    )
    plant_equipment_operation_thermal_energy_storage = (
        "PlantEquipmentOperation:ThermalEnergyStorage"
    )
    plant_equipment_operation_uncontrolled = "PlantEquipmentOperation:Uncontrolled"
    plant_equipment_operation_user_defined = "PlantEquipmentOperation:UserDefined"


class PlantEquipmentOperationSchemes(BaseModel):
    control_scheme_1_object_type: ControlScheme1ObjectType
    control_scheme_1_name: str
    control_scheme_1_schedule_name: str
    control_scheme_2_object_type: Optional[ControlScheme1ObjectType] = None
    control_scheme_2_name: Optional[str] = None
    control_scheme_2_schedule_name: Optional[str] = None
    control_scheme_3_object_type: Optional[ControlScheme1ObjectType] = None
    control_scheme_3_name: Optional[str] = None
    control_scheme_3_schedule_name: Optional[str] = None
    control_scheme_4_object_type: Optional[ControlScheme1ObjectType] = None
    control_scheme_4_name: Optional[str] = None
    control_scheme_4_schedule_name: Optional[str] = None
    control_scheme_5_object_type: Optional[ControlScheme1ObjectType] = None
    control_scheme_5_name: Optional[str] = None
    control_scheme_5_schedule_name: Optional[str] = None
    control_scheme_6_object_type: Optional[ControlScheme1ObjectType] = None
    control_scheme_6_name: Optional[str] = None
    control_scheme_6_schedule_name: Optional[str] = None
    control_scheme_7_object_type: Optional[ControlScheme1ObjectType] = None
    control_scheme_7_name: Optional[str] = None
    control_scheme_7_schedule_name: Optional[str] = None
    control_scheme_8_object_type: Optional[ControlScheme1ObjectType] = None
    control_scheme_8_name: Optional[str] = None
    control_scheme_8_schedule_name: Optional[str] = None


class ControlScheme1ObjectType1(Enum):
    plant_equipment_operation_cooling_load = "PlantEquipmentOperation:CoolingLoad"
    plant_equipment_operation_heating_load = "PlantEquipmentOperation:HeatingLoad"
    plant_equipment_operation_outdoor_dewpoint = (
        "PlantEquipmentOperation:OutdoorDewpoint"
    )
    plant_equipment_operation_outdoor_dewpoint_difference = (
        "PlantEquipmentOperation:OutdoorDewpointDifference"
    )
    plant_equipment_operation_outdoor_dry_bulb = (
        "PlantEquipmentOperation:OutdoorDryBulb"
    )
    plant_equipment_operation_outdoor_dry_bulb_difference = (
        "PlantEquipmentOperation:OutdoorDryBulbDifference"
    )
    plant_equipment_operation_outdoor_relative_humidity = (
        "PlantEquipmentOperation:OutdoorRelativeHumidity"
    )
    plant_equipment_operation_outdoor_wet_bulb = (
        "PlantEquipmentOperation:OutdoorWetBulb"
    )
    plant_equipment_operation_outdoor_wet_bulb_difference = (
        "PlantEquipmentOperation:OutdoorWetBulbDifference"
    )
    plant_equipment_operation_uncontrolled = "PlantEquipmentOperation:Uncontrolled"
    plant_equipment_operation_user_defined = "PlantEquipmentOperation:UserDefined"


class CondenserEquipmentOperationSchemes(BaseModel):
    control_scheme_1_object_type: ControlScheme1ObjectType1
    control_scheme_1_name: str
    control_scheme_1_schedule_name: str
    control_scheme_2_object_type: Optional[ControlScheme1ObjectType1] = None
    control_scheme_2_name: Optional[str] = None
    control_scheme_2_schedule_name: Optional[str] = None
    control_scheme_3_object_type: Optional[ControlScheme1ObjectType1] = None
    control_scheme_3_name: Optional[str] = None
    control_scheme_3_schedule_name: Optional[str] = None
    control_scheme_4_object_type: Optional[ControlScheme1ObjectType1] = None
    control_scheme_4_name: Optional[str] = None
    control_scheme_4_schedule_name: Optional[str] = None
    control_scheme_5_object_type: Optional[ControlScheme1ObjectType1] = None
    control_scheme_5_name: Optional[str] = None
    control_scheme_5_schedule_name: Optional[str] = None
    control_scheme_6_object_type: Optional[ControlScheme1ObjectType1] = None
    control_scheme_6_name: Optional[str] = None
    control_scheme_6_schedule_name: Optional[str] = None
    control_scheme_7_object_type: Optional[ControlScheme1ObjectType1] = None
    control_scheme_7_name: Optional[str] = None
    control_scheme_7_schedule_name: Optional[str] = None
    control_scheme_8_object_type: Optional[ControlScheme1ObjectType1] = None
    control_scheme_8_name: Optional[str] = None
    control_scheme_8_schedule_name: Optional[str] = None


class EnergyManagementSystemSensor(BaseModel):
    output_variable_or_output_meter_index_key_name: Optional[str] = None
    output_variable_or_output_meter_name: str


class EnergyManagementSystemActuator(BaseModel):
    actuated_component_unique_name: str
    actuated_component_type: str
    actuated_component_control_type: str


class EnergyplusModelCallingPoint(Enum):
    after_component_input_read_in = "AfterComponentInputReadIn"
    after_new_environment_warm_up_is_complete = "AfterNewEnvironmentWarmUpIsComplete"
    after_predictor_after_hvac_managers = "AfterPredictorAfterHVACManagers"
    after_predictor_before_hvac_managers = "AfterPredictorBeforeHVACManagers"
    begin_new_environment = "BeginNewEnvironment"
    begin_timestep_before_predictor = "BeginTimestepBeforePredictor"
    begin_zone_timestep_after_init_heat_balance = (
        "BeginZoneTimestepAfterInitHeatBalance"
    )
    begin_zone_timestep_before_init_heat_balance = (
        "BeginZoneTimestepBeforeInitHeatBalance"
    )
    begin_zone_timestep_before_set_current_weather = (
        "BeginZoneTimestepBeforeSetCurrentWeather"
    )
    end_of_system_sizing = "EndOfSystemSizing"
    end_of_system_timestep_after_hvac_reporting = (
        "EndOfSystemTimestepAfterHVACReporting"
    )
    end_of_system_timestep_before_hvac_reporting = (
        "EndOfSystemTimestepBeforeHVACReporting"
    )
    end_of_zone_sizing = "EndOfZoneSizing"
    end_of_zone_timestep_after_zone_reporting = "EndOfZoneTimestepAfterZoneReporting"
    end_of_zone_timestep_before_zone_reporting = "EndOfZoneTimestepBeforeZoneReporting"
    inside_hvac_system_iteration_loop = "InsideHVACSystemIterationLoop"
    unitary_system_sizing = "UnitarySystemSizing"
    user_defined_component_model = "UserDefinedComponentModel"


class Program(BaseModel):
    program_name: str


class EnergyManagementSystemProgramCallingManager(BaseModel):
    energyplus_model_calling_point: Optional[EnergyplusModelCallingPoint] = None
    programs: Optional[List[Program]] = None


class Line(BaseModel):
    program_line: Optional[str] = None


class EnergyManagementSystemProgram(BaseModel):
    lines: List[Line] = Field(..., min_length=1)


class Variable(BaseModel):
    erl_variable_name: str


class EnergyManagementSystemGlobalVariable(BaseModel):
    variables: Optional[List[Variable]] = None


class TypeOfDataInVariable(Enum):
    averaged = "Averaged"
    summed = "Summed"


class UpdateFrequency(Enum):
    system_timestep = "SystemTimestep"
    zone_timestep = "ZoneTimestep"


class EnergyManagementSystemOutputVariable(BaseModel):
    ems_variable_name: str
    type_of_data_in_variable: TypeOfDataInVariable
    update_frequency: UpdateFrequency
    ems_program_or_subroutine_name: Optional[str] = None
    units: Optional[str] = None


class EnergyManagementSystemInternalVariable(BaseModel):
    internal_data_index_key_name: Optional[str] = None
    internal_data_type: str


class AvailabilityManagerScheduled(BaseModel):
    schedule_name: str


class ControlType2(Enum):
    field_ = ""
    cycle_on_any = "CycleOnAny"
    cycle_on_any_cooling_or_heating_zone = "CycleOnAnyCoolingOrHeatingZone"
    cycle_on_any_cooling_zone = "CycleOnAnyCoolingZone"
    cycle_on_any_heating_zone = "CycleOnAnyHeatingZone"
    cycle_on_any_heating_zone_fans_only = "CycleOnAnyHeatingZoneFansOnly"
    cycle_on_any_zone_fans_only = "CycleOnAnyZoneFansOnly"
    cycle_on_control_zone = "CycleOnControlZone"
    stay_off = "StayOff"


class CyclingRunTimeControlType(Enum):
    field_ = ""
    fixed_run_time = "FixedRunTime"
    thermostat = "Thermostat"
    thermostat_with_minimum_run_time = "ThermostatWithMinimumRunTime"


class AvailabilityManagerNightCycle(BaseModel):
    applicability_schedule_name: str
    fan_schedule_name: str
    control_type: Optional[ControlType2] = "StayOff"
    thermostat_tolerance: Optional[float] = 1.0
    cycling_run_time_control_type: Optional[CyclingRunTimeControlType] = "FixedRunTime"
    cycling_run_time: Optional[float] = 3600.0
    control_zone_or_zone_list_name: Optional[str] = None
    cooling_control_zone_or_zone_list_name: Optional[str] = None
    heating_control_zone_or_zone_list_name: Optional[str] = None
    heating_zone_fans_only_zone_or_zone_list_name: Optional[str] = None


class AvailabilityManagerObjectType(Enum):
    availability_manager_differential_thermostat = (
        "AvailabilityManager:DifferentialThermostat"
    )
    availability_manager_high_temperature_turn_off = (
        "AvailabilityManager:HighTemperatureTurnOff"
    )
    availability_manager_high_temperature_turn_on = (
        "AvailabilityManager:HighTemperatureTurnOn"
    )
    availability_manager_low_temperature_turn_off = (
        "AvailabilityManager:LowTemperatureTurnOff"
    )
    availability_manager_low_temperature_turn_on = (
        "AvailabilityManager:LowTemperatureTurnOn"
    )
    availability_manager_night_cycle = "AvailabilityManager:NightCycle"
    availability_manager_night_ventilation = "AvailabilityManager:NightVentilation"
    availability_manager_optimum_start = "AvailabilityManager:OptimumStart"
    availability_manager_scheduled = "AvailabilityManager:Scheduled"
    availability_manager_scheduled_off = "AvailabilityManager:ScheduledOff"
    availability_manager_scheduled_on = "AvailabilityManager:ScheduledOn"


class Manager(BaseModel):
    availability_manager_object_type: AvailabilityManagerObjectType
    availability_manager_name: str


class AvailabilityManagerAssignmentList(BaseModel):
    managers: Optional[List[Manager]] = None


class ControlVariable1(Enum):
    humidity_ratio = "HumidityRatio"
    mass_flow_rate = "MassFlowRate"
    maximum_humidity_ratio = "MaximumHumidityRatio"
    maximum_mass_flow_rate = "MaximumMassFlowRate"
    maximum_temperature = "MaximumTemperature"
    minimum_humidity_ratio = "MinimumHumidityRatio"
    minimum_mass_flow_rate = "MinimumMassFlowRate"
    minimum_temperature = "MinimumTemperature"
    temperature = "Temperature"


class SetpointManagerScheduled(BaseModel):
    control_variable: ControlVariable1
    schedule_name: str
    setpoint_node_or_nodelist_name: str


class ControlVariable2(Enum):
    field_ = ""
    temperature = "Temperature"


class SetpointManagerScheduledDualSetpoint(BaseModel):
    control_variable: Optional[ControlVariable2] = "Temperature"
    high_setpoint_schedule_name: str
    low_setpoint_schedule_name: str
    setpoint_node_or_nodelist_name: str


class ControlVariable3(Enum):
    field_ = ""
    maximum_temperature = "MaximumTemperature"
    minimum_temperature = "MinimumTemperature"
    temperature = "Temperature"


class SetpointManagerOutdoorAirReset(BaseModel):
    control_variable: Optional[ControlVariable3] = "Temperature"
    setpoint_at_outdoor_low_temperature: float
    outdoor_low_temperature: float
    setpoint_at_outdoor_high_temperature: float
    outdoor_high_temperature: float
    setpoint_node_or_nodelist_name: str
    schedule_name: Optional[str] = None
    setpoint_at_outdoor_low_temperature_2: Optional[float] = None
    outdoor_low_temperature_2: Optional[float] = None
    setpoint_at_outdoor_high_temperature_2: Optional[float] = None
    outdoor_high_temperature_2: Optional[float] = None


class SetpointManagerSingleZoneReheat(BaseModel):
    control_variable: Optional[ControlVariable2] = "Temperature"
    minimum_supply_air_temperature: Optional[float] = -99.0
    maximum_supply_air_temperature: Optional[float] = 99.0
    control_zone_name: str
    zone_node_name: str
    zone_inlet_node_name: str
    setpoint_node_or_nodelist_name: str


class SetpointManagerSingleZoneHeating(SetpointManagerSingleZoneReheat):
    pass


class SetpointManagerSingleZoneCooling(SetpointManagerSingleZoneReheat):
    pass


class SetpointManagerSingleZoneHumidityMinimum(BaseModel):
    setpoint_node_or_nodelist_name: str
    control_zone_air_node_name: str


class SetpointManagerSingleZoneHumidityMaximum(
    SetpointManagerSingleZoneHumidityMinimum
):
    pass


class SetpointManagerMixedAir(BaseModel):
    control_variable: Optional[ControlVariable2] = "Temperature"
    reference_setpoint_node_name: str
    fan_inlet_node_name: str
    fan_outlet_node_name: str
    setpoint_node_or_nodelist_name: str
    cooling_coil_inlet_node_name: Optional[str] = None
    cooling_coil_outlet_node_name: Optional[str] = None
    minimum_temperature_at_cooling_coil_outlet_node: Optional[float] = Field(
        7.2, gt=0.0
    )


class ControlVariable8(Enum):
    humidity_ratio = "HumidityRatio"
    maximum_humidity_ratio = "MaximumHumidityRatio"
    minimum_humidity_ratio = "MinimumHumidityRatio"
    temperature = "Temperature"


class SetpointManagerOutdoorAirPretreat(BaseModel):
    control_variable: Optional[ControlVariable8] = None
    minimum_setpoint_temperature: Optional[float] = -99.0
    maximum_setpoint_temperature: Optional[float] = 99.0
    minimum_setpoint_humidity_ratio: Optional[float] = Field("1e-05", le=1.0)
    maximum_setpoint_humidity_ratio: Optional[float] = Field(1.0, le=1.0)
    reference_setpoint_node_name: Optional[str] = None
    mixed_air_stream_node_name: str
    outdoor_air_stream_node_name: str
    return_air_stream_node_name: str
    setpoint_node_or_nodelist_name: str


class SetpointManagerMultiZoneHumidityMinimum(BaseModel):
    hvac_air_loop_name: str
    minimum_setpoint_humidity_ratio: Optional[float] = Field(0.005, gt=0.0)
    maximum_setpoint_humidity_ratio: Optional[float] = Field(0.012, gt=0.0)
    setpoint_node_or_nodelist_name: str


class SetpointManagerMultiZoneHumidityMaximum(BaseModel):
    hvac_air_loop_name: str
    minimum_setpoint_humidity_ratio: Optional[float] = Field(0.008, gt=0.0)
    maximum_setpoint_humidity_ratio: Optional[float] = Field(0.015, gt=0.0)
    setpoint_node_or_nodelist_name: str


class ReferenceTemperatureType(Enum):
    field_ = ""
    outdoor_air_dry_bulb = "OutdoorAirDryBulb"
    outdoor_air_wet_bulb = "OutdoorAirWetBulb"


class SetpointManagerFollowOutdoorAirTemperature(BaseModel):
    control_variable: Optional[ControlVariable3] = "Temperature"
    reference_temperature_type: Optional[ReferenceTemperatureType] = "OutdoorAirWetBulb"
    offset_temperature_difference: Optional[float] = None
    maximum_setpoint_temperature: Optional[float] = None
    minimum_setpoint_temperature: Optional[float] = None
    setpoint_node_or_nodelist_name: str


class ReturnTemperatureSetpointInputType(Enum):
    constant = "Constant"
    return_temperature_setpoint = "ReturnTemperatureSetpoint"
    scheduled = "Scheduled"


class SetpointManagerReturnTemperatureChilledWater(BaseModel):
    plant_loop_supply_outlet_node: str
    plant_loop_supply_inlet_node: str
    minimum_supply_temperature_setpoint: Optional[float] = 5.0
    maximum_supply_temperature_setpoint: Optional[float] = 10.0
    return_temperature_setpoint_input_type: ReturnTemperatureSetpointInputType
    return_temperature_setpoint_constant_value: Optional[float] = 13.0
    return_temperature_setpoint_schedule_name: Optional[str] = None


class SetpointManagerReturnTemperatureHotWater(BaseModel):
    plant_loop_supply_outlet_node: str
    plant_loop_supply_inlet_node: str
    minimum_supply_temperature_setpoint: Optional[float] = 77.0
    maximum_supply_temperature_setpoint: Optional[float] = 82.0
    return_temperature_setpoint_input_type: ReturnTemperatureSetpointInputType
    return_temperature_setpoint_constant_value: Optional[float] = 71.0
    return_temperature_setpoint_schedule_name: Optional[str] = None


class LatentCaseCreditCurveType(Enum):
    field_ = ""
    case_temperature_method = "CaseTemperatureMethod"
    dewpoint_method = "DewpointMethod"
    relative_humidity_method = "RelativeHumidityMethod"


class AntiSweatHeaterControlType(Enum):
    field_ = ""
    constant = "Constant"
    dewpoint_method = "DewpointMethod"
    heat_balance_method = "HeatBalanceMethod"
    linear = "Linear"
    none = "None"


class CaseDefrostType(Enum):
    field_ = ""
    electric = "Electric"
    electric_with_temperature_termination = "ElectricWithTemperatureTermination"
    hot_fluid = "HotFluid"
    hot_fluid_with_temperature_termination = "HotFluidWithTemperatureTermination"
    hot_gas = "HotGas"
    hot_gas_with_temperature_termination = "HotGasWithTemperatureTermination"
    none = "None"
    off_cycle = "OffCycle"


class DefrostEnergyCorrectionCurveType(Enum):
    field_ = ""
    case_temperature_method = "CaseTemperatureMethod"
    dewpoint_method = "DewpointMethod"
    none = "None"
    relative_humidity_method = "RelativeHumidityMethod"


class RefrigerationCase(BaseModel):
    availability_schedule_name: Optional[str] = None
    zone_name: str
    rated_ambient_temperature: Optional[float] = Field(23.9, gt=0.0)
    rated_ambient_relative_humidity: Optional[float] = Field(55.0, gt=0.0, lt=100.0)
    rated_total_cooling_capacity_per_unit_length: Optional[float] = Field(
        1900.0, gt=0.0
    )
    rated_latent_heat_ratio: Optional[float] = Field(0.3, ge=0.0, le=1.0)
    rated_runtime_fraction: Optional[float] = Field(0.85, gt=0.0, le=1.0)
    case_length: Optional[float] = Field(3.0, gt=0.0)
    case_operating_temperature: Optional[float] = Field(1.1, lt=20.0)
    latent_case_credit_curve_type: Optional[
        LatentCaseCreditCurveType
    ] = "CaseTemperatureMethod"
    latent_case_credit_curve_name: str
    standard_case_fan_power_per_unit_length: Optional[float] = Field(75.0, ge=0.0)
    operating_case_fan_power_per_unit_length: Optional[float] = Field(75.0, ge=0.0)
    standard_case_lighting_power_per_unit_length: Optional[float] = 90.0
    installed_case_lighting_power_per_unit_length: Optional[float] = None
    case_lighting_schedule_name: Optional[str] = None
    fraction_of_lighting_energy_to_case: Optional[float] = Field(1.0, ge=0.0, le=1.0)
    case_anti_sweat_heater_power_per_unit_length: Optional[float] = Field(0.0, ge=0.0)
    minimum_anti_sweat_heater_power_per_unit_length: Optional[float] = Field(
        0.0, ge=0.0
    )
    anti_sweat_heater_control_type: Optional[AntiSweatHeaterControlType] = "None"
    humidity_at_zero_anti_sweat_heater_energy: Optional[float] = -10.0
    case_height: Optional[float] = Field(1.5, ge=0.0)
    fraction_of_anti_sweat_heater_energy_to_case: Optional[float] = Field(
        1.0, ge=0.0, le=1.0
    )
    case_defrost_power_per_unit_length: Optional[float] = Field(0.0, ge=0.0)
    case_defrost_type: Optional[CaseDefrostType] = "OffCycle"
    case_defrost_schedule_name: Optional[str] = None
    case_defrost_drip_down_schedule_name: Optional[str] = None
    defrost_energy_correction_curve_type: Optional[
        DefrostEnergyCorrectionCurveType
    ] = "None"
    defrost_energy_correction_curve_name: Optional[str] = None
    under_case_hvac_return_air_fraction: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    refrigerated_case_restocking_schedule_name: Optional[str] = None
    case_credit_fraction_schedule_name: Optional[str] = None
    design_evaporator_temperature_or_brine_inlet_temperature: Optional[float] = Field(
        None, ge=-70.0, le=40.0
    )
    average_refrigerant_charge_inventory: Optional[float] = 0.0
    under_case_hvac_return_air_node_name: Optional[str] = None


class HeatRejectionLocation(Enum):
    field_ = ""
    outdoors = "Outdoors"
    zone = "Zone"


class WaterCooledLoopFlowType(Enum):
    field_ = ""
    constant_flow = "ConstantFlow"
    variable_flow = "VariableFlow"


class DesignEvaporativeCondenserWaterPumpPowerItem(DesignOutdoorAirFlowRateItem):
    pass


class RefrigerationCompressorRack(BaseModel):
    heat_rejection_location: Optional[HeatRejectionLocation] = "Outdoors"
    design_compressor_rack_cop: Optional[float] = Field(2.0, gt=0.0)
    compressor_rack_cop_function_of_temperature_curve_name: str
    design_condenser_fan_power: Optional[float] = Field(250.0, ge=0.0)
    condenser_fan_power_function_of_temperature_curve_name: Optional[str] = None
    condenser_type: Optional[CondenserType3] = "AirCooled"
    water_cooled_condenser_inlet_node_name: Optional[str] = None
    water_cooled_condenser_outlet_node_name: Optional[str] = None
    water_cooled_loop_flow_type: Optional[WaterCooledLoopFlowType] = "VariableFlow"
    water_cooled_condenser_outlet_temperature_schedule_name: Optional[str] = None
    water_cooled_condenser_design_flow_rate: Optional[float] = Field(None, gt=0.0)
    water_cooled_condenser_maximum_flow_rate: Optional[float] = Field(None, gt=0.0)
    water_cooled_condenser_maximum_water_outlet_temperature: Optional[float] = Field(
        55.0, ge=10.0, le=60.0
    )
    water_cooled_condenser_minimum_water_inlet_temperature: Optional[float] = Field(
        10.0, ge=10.0, le=30.0
    )
    evaporative_condenser_availability_schedule_name: Optional[str] = None
    evaporative_condenser_effectiveness: Optional[float] = Field(0.9, ge=0.0, le=1.0)
    evaporative_condenser_air_flow_rate: Optional[
        Union[EvaporativeCondenserAirFlowRateItem, CeilingHeightEnum]
    ] = "Autocalculate"
    basin_heater_capacity: Optional[float] = Field(200.0, ge=0.0)
    basin_heater_setpoint_temperature: Optional[float] = Field(2.0, ge=2.0)
    design_evaporative_condenser_water_pump_power: Optional[
        Union[DesignEvaporativeCondenserWaterPumpPowerItem, CeilingHeightEnum]
    ] = 1000.0
    evaporative_water_supply_tank_name: Optional[str] = None
    condenser_air_inlet_node_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"
    refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name: Optional[
        str
    ] = None
    heat_rejection_zone_name: Optional[str] = None


class CasesAndWalkin(BaseModel):
    case_or_walkin_name: Optional[str] = None


class RefrigerationCaseAndWalkInList(BaseModel):
    cases_and_walkins: Optional[List[CasesAndWalkin]] = None


class CondenserFanSpeedControlType(Enum):
    field_ = ""
    fixed = "Fixed"
    fixed_linear = "FixedLinear"
    two_speed = "TwoSpeed"
    variable_speed = "VariableSpeed"


class RefrigerationCondenserAirCooled(BaseModel):
    rated_effective_total_heat_rejection_rate_curve_name: Optional[str] = None
    rated_subcooling_temperature_difference: Optional[float] = Field(0.0, ge=0.0)
    condenser_fan_speed_control_type: Optional[CondenserFanSpeedControlType] = "Fixed"
    rated_fan_power: Optional[float] = Field(250.0, ge=0.0)
    minimum_fan_air_flow_ratio: Optional[float] = Field(0.2, ge=0.0)
    air_inlet_node_name_or_zone_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"
    condenser_refrigerant_operating_charge_inventory: Optional[float] = 0.0
    condensate_receiver_refrigerant_inventory: Optional[float] = 0.0
    condensate_piping_refrigerant_inventory: Optional[float] = 0.0


class ModeOfOperation(Enum):
    field_ = ""
    subcritical = "Subcritical"
    transcritical = "Transcritical"


class RefrigerationCompressor(BaseModel):
    refrigeration_compressor_power_curve_name: str
    refrigeration_compressor_capacity_curve_name: str
    rated_superheat: Optional[float] = None
    rated_return_gas_temperature: Optional[float] = None
    rated_liquid_temperature: Optional[float] = None
    rated_subcooling: Optional[float] = None
    end_use_subcategory: Optional[str] = "General"
    mode_of_operation: Optional[ModeOfOperation] = "Subcritical"
    transcritical_compressor_power_curve_name: Optional[str] = None
    transcritical_compressor_capacity_curve_name: Optional[str] = None


class Compressor(BaseModel):
    refrigeration_compressor_name: str


class RefrigerationCompressorList(BaseModel):
    compressors: Optional[List[Compressor]] = None


class SuctionTemperatureControlType(Enum):
    field_ = ""
    constant_suction_temperature = "ConstantSuctionTemperature"
    float_suction_temperature = "FloatSuctionTemperature"


class NumberOfCompressorStage(Enum):
    number_1 = 1
    number_2 = 2


class IntercoolerType(Enum):
    field_ = ""
    flash_intercooler = "Flash Intercooler"
    none = "None"
    shell_and_coil_intercooler = "Shell-and-Coil Intercooler"


class RefrigerationSystem(BaseModel):
    refrigerated_case_or_walkin_or_caseandwalkinlist_name: Optional[str] = None
    refrigeration_transfer_load_or_transferload_list_name: Optional[str] = None
    refrigeration_condenser_name: str
    compressor_or_compressorlist_name: str
    minimum_condensing_temperature: float
    refrigeration_system_working_fluid_type: str
    suction_temperature_control_type: Optional[
        SuctionTemperatureControlType
    ] = "ConstantSuctionTemperature"
    mechanical_subcooler_name: Optional[str] = None
    liquid_suction_heat_exchanger_subcooler_name: Optional[str] = None
    sum_ua_suction_piping: Optional[float] = 0.0
    suction_piping_zone_name: Optional[str] = None
    end_use_subcategory: Optional[str] = "General"
    number_of_compressor_stages: Optional[
        Union[NumberOfCompressorStage, Literal[""]]
    ] = 1.0
    intercooler_type: Optional[IntercoolerType] = "None"
    shell_and_coil_intercooler_effectiveness: Optional[float] = 0.8
    high_stage_compressor_or_compressorlist_name: Optional[str] = None


class CapacityRatingType(Enum):
    capacity_total_specific_conditions = "CapacityTotalSpecificConditions"
    european_sc1_nominal_wet = "EuropeanSC1NominalWet"
    european_sc1_standard = "EuropeanSC1Standard"
    european_sc2_nominal_wet = "EuropeanSC2NominalWet"
    european_sc2_standard = "EuropeanSC2Standard"
    european_sc3_nominal_wet = "EuropeanSC3NominalWet"
    european_sc3_standard = "EuropeanSC3Standard"
    european_sc4_nominal_wet = "EuropeanSC4NominalWet"
    european_sc4_standard = "EuropeanSC4Standard"
    european_sc5_nominal_wet = "EuropeanSC5NominalWet"
    european_sc5_standard = "EuropeanSC5Standard"
    fixed_linear = "FixedLinear"
    unit_load_factor_sensible_only = "UnitLoadFactorSensibleOnly"


class CapacityCorrectionCurveType(Enum):
    european = "European"
    linear_shr60 = "LinearSHR60"
    quadratic_shr = "QuadraticSHR"
    tabular_r_hx_dt1x_t_room = "TabularRHxDT1xTRoom"


class DefrostType(Enum):
    field_ = ""
    electric = "Electric"
    hot_fluid = "HotFluid"
    none = "None"
    off_cycle = "OffCycle"


class DefrostControlType(Enum):
    field_ = ""
    temperature_termination = "TemperatureTermination"
    time_schedule = "TimeSchedule"


class VerticalLocation(Enum):
    field_ = ""
    ceiling = "Ceiling"
    floor = "Floor"
    middle = "Middle"


class RefrigerationAirChiller(BaseModel):
    availability_schedule_name: Optional[str] = None
    capacity_rating_type: CapacityRatingType
    rated_unit_load_factor: Optional[float] = None
    rated_capacity: Optional[float] = None
    rated_relative_humidity: Optional[float] = Field(85.0, le=100.0)
    rated_cooling_source_temperature: float = Field(..., ge=-70.0, le=40.0)
    rated_temperature_difference_dt1: float = Field(..., ge=0.0, le=20.0)
    maximum_temperature_difference_between_inlet_air_and_evaporating_temperature: Optional[
        float
    ] = Field(
        None, ge=0.0, le=25.0
    )
    coil_material_correction_factor: Optional[float] = 1.0
    refrigerant_correction_factor: Optional[float] = 1.0
    capacity_correction_curve_type: Optional[CapacityCorrectionCurveType] = None
    capacity_correction_curve_name: Optional[str] = None
    shr60_correction_factor: Optional[float] = Field(1.48, le=1.67)
    rated_total_heating_power: float
    heating_power_schedule_name: Optional[str] = None
    fan_speed_control_type: Optional[CondenserFanSpeedControlType] = "Fixed"
    rated_fan_power: Optional[float] = Field(375.0, ge=0.0)
    rated_air_flow: float
    minimum_fan_air_flow_ratio: Optional[float] = Field(0.2, ge=0.0)
    defrost_type: Optional[DefrostType] = "Electric"
    defrost_control_type: Optional[DefrostControlType] = "TimeSchedule"
    defrost_schedule_name: str
    defrost_drip_down_schedule_name: Optional[str] = None
    defrost_power: Optional[float] = Field(None, ge=0.0)
    temperature_termination_defrost_fraction_to_ice: Optional[float] = Field(
        None, gt=0.0, le=1.0
    )
    vertical_location: Optional[VerticalLocation] = "Middle"
    average_refrigerant_charge_inventory: Optional[float] = 0.0


class Chiller(BaseModel):
    air_chiller_name: Optional[str] = None


class ZoneHvacRefrigerationChillerSet(BaseModel):
    availability_schedule_name: Optional[str] = None
    zone_name: Optional[str] = None
    air_inlet_node_name: Optional[str] = None
    air_outlet_node_name: Optional[str] = None
    chillers: Optional[List[Chiller]] = None


class TransformerUsage(Enum):
    field_ = ""
    load_center_power_conditioning = "LoadCenterPowerConditioning"
    power_in_from_grid = "PowerInFromGrid"
    power_out_to_grid = "PowerOutToGrid"


class PhaseEnum(Enum):
    number_1 = 1
    number_3 = 3


class ConductorMaterial(Enum):
    field_ = ""
    aluminum = "Aluminum"
    copper = "Copper"


class PerformanceInputMethod4(Enum):
    field_ = ""
    nominal_efficiency = "NominalEfficiency"
    rated_losses = "RatedLosses"


class Meter(BaseModel):
    meter_name: Optional[str] = None


class ElectricLoadCenterTransformer(BaseModel):
    availability_schedule_name: Optional[str] = None
    transformer_usage: Optional[TransformerUsage] = "PowerInFromGrid"
    zone_name: Optional[str] = None
    radiative_fraction: Optional[float] = Field(0.0, ge=0.0, le=1.0)
    rated_capacity: Optional[float] = Field(None, ge=0.0)
    phase: Optional[Union[PhaseEnum, Literal[""]]] = 3.0
    conductor_material: Optional[ConductorMaterial] = "Aluminum"
    full_load_temperature_rise: Optional[float] = Field(150.0, ge=50.0, le=180.0)
    fraction_of_eddy_current_losses: Optional[float] = Field(0.1, ge=0.0, le=1.0)
    performance_input_method: Optional[PerformanceInputMethod4] = "RatedLosses"
    rated_no_load_loss: Optional[float] = Field(None, gt=0.0)
    rated_load_loss: Optional[float] = Field(None, ge=0.0)
    nameplate_efficiency: Optional[float] = Field(0.98, gt=0.0, le=1.0)
    per_unit_load_for_nameplate_efficiency: Optional[float] = Field(
        0.35, gt=0.0, le=1.0
    )
    reference_temperature_for_nameplate_efficiency: Optional[float] = Field(
        75.0, ge=20.0, le=150.0
    )
    per_unit_load_for_maximum_efficiency: Optional[float] = Field(None, gt=0.0, le=1.0)
    consider_transformer_loss_for_utility_cost: Optional[
        DoZoneSizingCalculation
    ] = "Yes"
    meters: Optional[List[Meter]] = None


class WaterUseEquipment(BaseModel):
    end_use_subcategory: Optional[str] = "General"
    peak_flow_rate: float = Field(..., ge=0.0)
    flow_rate_fraction_schedule_name: Optional[str] = None
    target_temperature_schedule_name: Optional[str] = None
    hot_water_supply_temperature_schedule_name: Optional[str] = None
    cold_water_supply_temperature_schedule_name: Optional[str] = None
    zone_name: Optional[str] = None
    sensible_fraction_schedule_name: Optional[str] = None
    latent_fraction_schedule_name: Optional[str] = None


class DrainWaterHeatExchangerType(Enum):
    field_ = ""
    counter_flow = "CounterFlow"
    cross_flow = "CrossFlow"
    ideal = "Ideal"
    none = "None"


class DrainWaterHeatExchangerDestination(Enum):
    field_ = ""
    equipment = "Equipment"
    plant = "Plant"
    plant_and_equipment = "PlantAndEquipment"


class Connection(BaseModel):
    water_use_equipment_name: str


class WaterUseConnections(BaseModel):
    inlet_node_name: Optional[str] = None
    outlet_node_name: Optional[str] = None
    supply_water_storage_tank_name: Optional[str] = None
    reclamation_water_storage_tank_name: Optional[str] = None
    hot_water_supply_temperature_schedule_name: Optional[str] = None
    cold_water_supply_temperature_schedule_name: Optional[str] = None
    drain_water_heat_exchanger_type: Optional[DrainWaterHeatExchangerType] = "None"
    drain_water_heat_exchanger_destination: Optional[
        DrainWaterHeatExchangerDestination
    ] = "Plant"
    drain_water_heat_exchanger_u_factor_times_area: Optional[float] = Field(
        None, ge=0.0
    )
    connections: Optional[List[Connection]] = None


class Value(BaseModel):
    value: Optional[float] = None


class MatrixTwoDimension(BaseModel):
    number_of_rows: int
    number_of_columns: int
    values: Optional[List[Value]] = None


class InputUnitTypeForX(Enum):
    field_ = ""
    dimensionless = "Dimensionless"
    distance = "Distance"
    mass_flow = "MassFlow"
    power = "Power"
    pressure = "Pressure"
    temperature = "Temperature"
    volumetric_flow = "VolumetricFlow"


class OutputUnitType(Enum):
    field_ = ""
    capacity = "Capacity"
    dimensionless = "Dimensionless"
    power = "Power"
    pressure = "Pressure"
    temperature = "Temperature"


class CurveLinear(BaseModel):
    coefficient1_constant: float
    coefficient2_x: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_x: Optional[InputUnitTypeForX] = "Dimensionless"
    output_unit_type: Optional[OutputUnitType] = "Dimensionless"


class InputUnitTypeForW(Enum):
    field_ = ""
    dimensionless = "Dimensionless"
    distance = "Distance"
    mass_flow = "MassFlow"
    power = "Power"
    temperature = "Temperature"
    volumetric_flow = "VolumetricFlow"
    volumetric_flow_per_power = "VolumetricFlowPerPower"


class CurveQuadLinear(BaseModel):
    coefficient1_constant: float
    coefficient2_w: float
    coefficient3_x: float
    coefficient4_y: float
    coefficient5_z: float
    minimum_value_of_w: float
    maximum_value_of_w: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_value_of_y: float
    maximum_value_of_y: float
    minimum_value_of_z: float
    maximum_value_of_z: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_w: Optional[InputUnitTypeForW] = "Dimensionless"
    input_unit_type_for_x: Optional[InputUnitTypeForW] = "Dimensionless"
    input_unit_type_for_y: Optional[InputUnitTypeForW] = "Dimensionless"
    input_unit_type_for_z: Optional[InputUnitTypeForW] = "Dimensionless"


class CurveQuintLinear(BaseModel):
    coefficient1_constant: float
    coefficient2_v: float
    coefficient3_w: float
    coefficient4_x: float
    coefficient5_y: float
    coefficient6_z: float
    minimum_value_of_v: float
    maximum_value_of_v: float
    minimum_value_of_w: float
    maximum_value_of_w: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_value_of_y: float
    maximum_value_of_y: float
    minimum_value_of_z: float
    maximum_value_of_z: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_v: Optional[InputUnitTypeForW] = "Dimensionless"
    input_unit_type_for_w: Optional[InputUnitTypeForW] = "Dimensionless"
    input_unit_type_for_x: Optional[InputUnitTypeForW] = "Dimensionless"
    input_unit_type_for_y: Optional[InputUnitTypeForW] = "Dimensionless"
    input_unit_type_for_z: Optional[InputUnitTypeForW] = "Dimensionless"


class InputUnitTypeForX3(Enum):
    field_ = ""
    dimensionless = "Dimensionless"
    distance = "Distance"
    mass_flow = "MassFlow"
    power = "Power"
    temperature = "Temperature"
    volumetric_flow = "VolumetricFlow"


class CurveQuadratic(BaseModel):
    coefficient1_constant: float
    coefficient2_x: float
    coefficient3_x_2: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_x: Optional[InputUnitTypeForX3] = "Dimensionless"
    output_unit_type: Optional[OutputUnitType] = "Dimensionless"


class CurveCubic(BaseModel):
    coefficient1_constant: float
    coefficient2_x: float
    coefficient3_x_2: float
    coefficient4_x_3: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_x: Optional[InputUnitTypeForX3] = "Dimensionless"
    output_unit_type: Optional[OutputUnitType] = "Dimensionless"


class CurveQuartic(BaseModel):
    coefficient1_constant: float
    coefficient2_x: float
    coefficient3_x_2: float
    coefficient4_x_3: float
    coefficient5_x_4: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_x: Optional[InputUnitTypeForX3] = "Dimensionless"
    output_unit_type: Optional[OutputUnitType] = "Dimensionless"


class CurveBicubic(BaseModel):
    coefficient1_constant: float
    coefficient2_x: float
    coefficient3_x_2: float
    coefficient4_y: float
    coefficient5_y_2: float
    coefficient6_x_y: float
    coefficient7_x_3: float
    coefficient8_y_3: float
    coefficient9_x_2_y: float
    coefficient10_x_y_2: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_value_of_y: float
    maximum_value_of_y: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_x: Optional[InputUnitTypeForX3] = "Dimensionless"
    input_unit_type_for_y: Optional[InputUnitTypeForX3] = "Dimensionless"
    output_unit_type: Optional[OutputUnitType] = "Dimensionless"


class CurveBiquadratic(BaseModel):
    coefficient1_constant: float
    coefficient2_x: float
    coefficient3_x_2: float
    coefficient4_y: float
    coefficient5_y_2: float
    coefficient6_x_y: float
    minimum_value_of_x: float
    maximum_value_of_x: float
    minimum_value_of_y: float
    maximum_value_of_y: float
    minimum_curve_output: Optional[float] = None
    maximum_curve_output: Optional[float] = None
    input_unit_type_for_x: Optional[InputUnitTypeForX3] = "Dimensionless"
    input_unit_type_for_y: Optional[InputUnitTypeForX3] = "Dimensionless"
    output_unit_type: Optional[OutputUnitType] = "Dimensionless"


class ExtrapolationMethod(Enum):
    field_ = ""
    constant = "Constant"
    linear = "Linear"


class UnitType1(Enum):
    field_ = ""
    angle = "Angle"
    dimensionless = "Dimensionless"
    distance = "Distance"
    mass_flow = "MassFlow"
    power = "Power"
    temperature = "Temperature"
    volumetric_flow = "VolumetricFlow"


class TableIndependentVariable(BaseModel):
    interpolation_method: Optional[PerformanceInterpolationMethod] = "Linear"
    extrapolation_method: Optional[ExtrapolationMethod] = "Constant"
    minimum_value: Optional[float] = None
    maximum_value: Optional[float] = None
    normalization_reference_value: Optional[float] = None
    unit_type: Optional[UnitType1] = "Dimensionless"
    external_file_name: Optional[str] = None
    external_file_column_number: Optional[int] = Field(None, ge=1)
    external_file_starting_row_number: Optional[int] = Field(None, ge=1)
    values: Optional[List[Value]] = None


class IndependentVariable(BaseModel):
    independent_variable_name: str


class TableIndependentVariableList(BaseModel):
    independent_variables: Optional[List[IndependentVariable]] = None


class NormalizationMethod(Enum):
    field_ = ""
    automatic_with_divisor = "AutomaticWithDivisor"
    divisor_only = "DivisorOnly"
    none = "None"


class Value2(BaseModel):
    output_value: Optional[float] = None


class TableLookup(BaseModel):
    independent_variable_list_name: str
    normalization_method: Optional[NormalizationMethod] = "None"
    normalization_divisor: Optional[float] = 1.0
    minimum_output: Optional[float] = None
    maximum_output: Optional[float] = None
    output_unit_type: Optional[OutputUnitType] = "Dimensionless"
    external_file_name: Optional[str] = None
    external_file_column_number: Optional[int] = Field(None, ge=1)
    external_file_starting_row_number: Optional[int] = Field(None, ge=1)
    values: Optional[List[Value2]] = None


class FluidType2(Enum):
    glycol = "Glycol"
    refrigerant = "Refrigerant"


class FluidPropertiesName(BaseModel):
    fluid_name: str
    fluid_type: FluidType2


class GlycolType(Enum):
    ethylene_glycol = "EthyleneGlycol"
    propylene_glycol = "PropyleneGlycol"
    user_defined_glycol_type = "UserDefinedGlycolType"


class FluidPropertiesGlycolConcentration(BaseModel):
    glycol_type: GlycolType
    user_defined_glycol_name: Optional[str] = None
    glycol_concentration: Optional[float] = Field(None, ge=0.0, le=1.0)


class FluidPropertiesTemperatures(BaseModel):
    temperature_1: Optional[float] = None
    temperature_2: Optional[float] = None
    temperature_3: Optional[float] = None
    temperature_4: Optional[float] = None
    temperature_5: Optional[float] = None
    temperature_6: Optional[float] = None
    temperature_7: Optional[float] = None
    temperature_8: Optional[float] = None
    temperature_9: Optional[float] = None
    temperature_10: Optional[float] = None
    temperature_11: Optional[float] = None
    temperature_12: Optional[float] = None
    temperature_13: Optional[float] = None
    temperature_14: Optional[float] = None
    temperature_15: Optional[float] = None
    temperature_16: Optional[float] = None
    temperature_17: Optional[float] = None
    temperature_18: Optional[float] = None
    temperature_19: Optional[float] = None
    temperature_20: Optional[float] = None
    temperature_21: Optional[float] = None
    temperature_22: Optional[float] = None
    temperature_23: Optional[float] = None
    temperature_24: Optional[float] = None
    temperature_25: Optional[float] = None
    temperature_26: Optional[float] = None
    temperature_27: Optional[float] = None
    temperature_28: Optional[float] = None
    temperature_29: Optional[float] = None
    temperature_30: Optional[float] = None
    temperature_31: Optional[float] = None
    temperature_32: Optional[float] = None
    temperature_33: Optional[float] = None
    temperature_34: Optional[float] = None
    temperature_35: Optional[float] = None
    temperature_36: Optional[float] = None
    temperature_37: Optional[float] = None
    temperature_38: Optional[float] = None
    temperature_39: Optional[float] = None
    temperature_40: Optional[float] = None
    temperature_41: Optional[float] = None
    temperature_42: Optional[float] = None
    temperature_43: Optional[float] = None
    temperature_44: Optional[float] = None
    temperature_45: Optional[float] = None
    temperature_46: Optional[float] = None
    temperature_47: Optional[float] = None
    temperature_48: Optional[float] = None
    temperature_49: Optional[float] = None
    temperature_50: Optional[float] = None
    temperature_51: Optional[float] = None
    temperature_52: Optional[float] = None
    temperature_53: Optional[float] = None
    temperature_54: Optional[float] = None
    temperature_55: Optional[float] = None
    temperature_56: Optional[float] = None
    temperature_57: Optional[float] = None
    temperature_58: Optional[float] = None
    temperature_59: Optional[float] = None
    temperature_60: Optional[float] = None
    temperature_61: Optional[float] = None
    temperature_62: Optional[float] = None
    temperature_63: Optional[float] = None
    temperature_64: Optional[float] = None
    temperature_65: Optional[float] = None
    temperature_66: Optional[float] = None
    temperature_67: Optional[float] = None
    temperature_68: Optional[float] = None
    temperature_69: Optional[float] = None
    temperature_70: Optional[float] = None
    temperature_71: Optional[float] = None
    temperature_72: Optional[float] = None
    temperature_73: Optional[float] = None
    temperature_74: Optional[float] = None
    temperature_75: Optional[float] = None
    temperature_76: Optional[float] = None
    temperature_77: Optional[float] = None
    temperature_78: Optional[float] = None
    temperature_79: Optional[float] = None
    temperature_80: Optional[float] = None
    temperature_81: Optional[float] = None
    temperature_82: Optional[float] = None
    temperature_83: Optional[float] = None
    temperature_84: Optional[float] = None
    temperature_85: Optional[float] = None
    temperature_86: Optional[float] = None
    temperature_87: Optional[float] = None
    temperature_88: Optional[float] = None
    temperature_89: Optional[float] = None
    temperature_90: Optional[float] = None
    temperature_91: Optional[float] = None
    temperature_92: Optional[float] = None
    temperature_93: Optional[float] = None
    temperature_94: Optional[float] = None
    temperature_95: Optional[float] = None
    temperature_96: Optional[float] = None
    temperature_97: Optional[float] = None
    temperature_98: Optional[float] = None
    temperature_99: Optional[float] = None
    temperature_100: Optional[float] = None
    temperature_101: Optional[float] = None
    temperature_102: Optional[float] = None
    temperature_103: Optional[float] = None
    temperature_104: Optional[float] = None
    temperature_105: Optional[float] = None
    temperature_106: Optional[float] = None
    temperature_107: Optional[float] = None
    temperature_108: Optional[float] = None
    temperature_109: Optional[float] = None
    temperature_110: Optional[float] = None
    temperature_111: Optional[float] = None
    temperature_112: Optional[float] = None
    temperature_113: Optional[float] = None
    temperature_114: Optional[float] = None
    temperature_115: Optional[float] = None
    temperature_116: Optional[float] = None
    temperature_117: Optional[float] = None
    temperature_118: Optional[float] = None
    temperature_119: Optional[float] = None
    temperature_120: Optional[float] = None
    temperature_121: Optional[float] = None
    temperature_122: Optional[float] = None
    temperature_123: Optional[float] = None
    temperature_124: Optional[float] = None
    temperature_125: Optional[float] = None
    temperature_126: Optional[float] = None
    temperature_127: Optional[float] = None
    temperature_128: Optional[float] = None
    temperature_129: Optional[float] = None
    temperature_130: Optional[float] = None
    temperature_131: Optional[float] = None
    temperature_132: Optional[float] = None
    temperature_133: Optional[float] = None
    temperature_134: Optional[float] = None
    temperature_135: Optional[float] = None
    temperature_136: Optional[float] = None
    temperature_137: Optional[float] = None
    temperature_138: Optional[float] = None
    temperature_139: Optional[float] = None
    temperature_140: Optional[float] = None
    temperature_141: Optional[float] = None
    temperature_142: Optional[float] = None
    temperature_143: Optional[float] = None
    temperature_144: Optional[float] = None
    temperature_145: Optional[float] = None
    temperature_146: Optional[float] = None
    temperature_147: Optional[float] = None
    temperature_148: Optional[float] = None
    temperature_149: Optional[float] = None
    temperature_150: Optional[float] = None
    temperature_151: Optional[float] = None
    temperature_152: Optional[float] = None
    temperature_153: Optional[float] = None
    temperature_154: Optional[float] = None
    temperature_155: Optional[float] = None
    temperature_156: Optional[float] = None
    temperature_157: Optional[float] = None
    temperature_158: Optional[float] = None
    temperature_159: Optional[float] = None
    temperature_160: Optional[float] = None
    temperature_161: Optional[float] = None
    temperature_162: Optional[float] = None
    temperature_163: Optional[float] = None
    temperature_164: Optional[float] = None
    temperature_165: Optional[float] = None
    temperature_166: Optional[float] = None
    temperature_167: Optional[float] = None
    temperature_168: Optional[float] = None
    temperature_169: Optional[float] = None
    temperature_170: Optional[float] = None
    temperature_171: Optional[float] = None
    temperature_172: Optional[float] = None
    temperature_173: Optional[float] = None
    temperature_174: Optional[float] = None
    temperature_175: Optional[float] = None
    temperature_176: Optional[float] = None
    temperature_177: Optional[float] = None
    temperature_178: Optional[float] = None
    temperature_179: Optional[float] = None
    temperature_180: Optional[float] = None
    temperature_181: Optional[float] = None
    temperature_182: Optional[float] = None
    temperature_183: Optional[float] = None
    temperature_184: Optional[float] = None
    temperature_185: Optional[float] = None
    temperature_186: Optional[float] = None
    temperature_187: Optional[float] = None
    temperature_188: Optional[float] = None
    temperature_189: Optional[float] = None
    temperature_190: Optional[float] = None
    temperature_191: Optional[float] = None
    temperature_192: Optional[float] = None
    temperature_193: Optional[float] = None
    temperature_194: Optional[float] = None
    temperature_195: Optional[float] = None
    temperature_196: Optional[float] = None
    temperature_197: Optional[float] = None
    temperature_198: Optional[float] = None
    temperature_199: Optional[float] = None
    temperature_200: Optional[float] = None
    temperature_201: Optional[float] = None
    temperature_202: Optional[float] = None
    temperature_203: Optional[float] = None
    temperature_204: Optional[float] = None
    temperature_205: Optional[float] = None
    temperature_206: Optional[float] = None
    temperature_207: Optional[float] = None
    temperature_208: Optional[float] = None
    temperature_209: Optional[float] = None
    temperature_210: Optional[float] = None
    temperature_211: Optional[float] = None
    temperature_212: Optional[float] = None
    temperature_213: Optional[float] = None
    temperature_214: Optional[float] = None
    temperature_215: Optional[float] = None
    temperature_216: Optional[float] = None
    temperature_217: Optional[float] = None
    temperature_218: Optional[float] = None
    temperature_219: Optional[float] = None
    temperature_220: Optional[float] = None
    temperature_221: Optional[float] = None
    temperature_222: Optional[float] = None
    temperature_223: Optional[float] = None
    temperature_224: Optional[float] = None
    temperature_225: Optional[float] = None
    temperature_226: Optional[float] = None
    temperature_227: Optional[float] = None
    temperature_228: Optional[float] = None
    temperature_229: Optional[float] = None
    temperature_230: Optional[float] = None
    temperature_231: Optional[float] = None
    temperature_232: Optional[float] = None
    temperature_233: Optional[float] = None
    temperature_234: Optional[float] = None
    temperature_235: Optional[float] = None
    temperature_236: Optional[float] = None
    temperature_237: Optional[float] = None
    temperature_238: Optional[float] = None
    temperature_239: Optional[float] = None
    temperature_240: Optional[float] = None
    temperature_241: Optional[float] = None
    temperature_242: Optional[float] = None
    temperature_243: Optional[float] = None
    temperature_244: Optional[float] = None
    temperature_245: Optional[float] = None
    temperature_246: Optional[float] = None
    temperature_247: Optional[float] = None
    temperature_248: Optional[float] = None
    temperature_249: Optional[float] = None
    temperature_250: Optional[float] = None


class FluidPropertyType(Enum):
    density = "Density"
    enthalpy = "Enthalpy"
    pressure = "Pressure"
    specific_heat = "SpecificHeat"


class FluidPhase(Enum):
    fluid = "Fluid"
    fluid_gas = "FluidGas"


class FluidPropertiesSaturated(BaseModel):
    fluid_name: Optional[str] = None
    fluid_property_type: Optional[FluidPropertyType] = None
    fluid_phase: Optional[FluidPhase] = None
    temperature_values_name: Optional[str] = None
    property_value_1: Optional[float] = None
    property_value_2: Optional[float] = None
    property_value_3: Optional[float] = None
    property_value_4: Optional[float] = None
    property_value_5: Optional[float] = None
    property_value_6: Optional[float] = None
    property_value_7: Optional[float] = None
    property_value_8: Optional[float] = None
    property_value_9: Optional[float] = None
    property_value_10: Optional[float] = None
    property_value_11: Optional[float] = None
    property_value_12: Optional[float] = None
    property_value_13: Optional[float] = None
    property_value_14: Optional[float] = None
    property_value_15: Optional[float] = None
    property_value_16: Optional[float] = None
    property_value_17: Optional[float] = None
    property_value_18: Optional[float] = None
    property_value_19: Optional[float] = None
    property_value_20: Optional[float] = None
    property_value_21: Optional[float] = None
    property_value_22: Optional[float] = None
    property_value_23: Optional[float] = None
    property_value_24: Optional[float] = None
    property_value_25: Optional[float] = None
    property_value_26: Optional[float] = None
    property_value_27: Optional[float] = None
    property_value_28: Optional[float] = None
    property_value_29: Optional[float] = None
    property_value_30: Optional[float] = None
    property_value_31: Optional[float] = None
    property_value_32: Optional[float] = None
    property_value_33: Optional[float] = None
    property_value_34: Optional[float] = None
    property_value_35: Optional[float] = None
    property_value_36: Optional[float] = None
    property_value_37: Optional[float] = None
    property_value_38: Optional[float] = None
    property_value_39: Optional[float] = None
    property_value_40: Optional[float] = None
    property_value_41: Optional[float] = None
    property_value_42: Optional[float] = None
    property_value_43: Optional[float] = None
    property_value_44: Optional[float] = None
    property_value_45: Optional[float] = None
    property_value_46: Optional[float] = None
    property_value_47: Optional[float] = None
    property_value_48: Optional[float] = None
    property_value_49: Optional[float] = None
    property_value_50: Optional[float] = None
    property_value_51: Optional[float] = None
    property_value_52: Optional[float] = None
    property_value_53: Optional[float] = None
    property_value_54: Optional[float] = None
    property_value_55: Optional[float] = None
    property_value_56: Optional[float] = None
    property_value_57: Optional[float] = None
    property_value_58: Optional[float] = None
    property_value_59: Optional[float] = None
    property_value_60: Optional[float] = None
    property_value_61: Optional[float] = None
    property_value_62: Optional[float] = None
    property_value_63: Optional[float] = None
    property_value_64: Optional[float] = None
    property_value_65: Optional[float] = None
    property_value_66: Optional[float] = None
    property_value_67: Optional[float] = None
    property_value_68: Optional[float] = None
    property_value_69: Optional[float] = None
    property_value_70: Optional[float] = None
    property_value_71: Optional[float] = None
    property_value_72: Optional[float] = None
    property_value_73: Optional[float] = None
    property_value_74: Optional[float] = None
    property_value_75: Optional[float] = None
    property_value_76: Optional[float] = None
    property_value_77: Optional[float] = None
    property_value_78: Optional[float] = None
    property_value_79: Optional[float] = None
    property_value_80: Optional[float] = None
    property_value_81: Optional[float] = None
    property_value_82: Optional[float] = None
    property_value_83: Optional[float] = None
    property_value_84: Optional[float] = None
    property_value_85: Optional[float] = None
    property_value_86: Optional[float] = None
    property_value_87: Optional[float] = None
    property_value_88: Optional[float] = None
    property_value_89: Optional[float] = None
    property_value_90: Optional[float] = None
    property_value_91: Optional[float] = None
    property_value_92: Optional[float] = None
    property_value_93: Optional[float] = None
    property_value_94: Optional[float] = None
    property_value_95: Optional[float] = None
    property_value_96: Optional[float] = None
    property_value_97: Optional[float] = None
    property_value_98: Optional[float] = None
    property_value_99: Optional[float] = None
    property_value_100: Optional[float] = None
    property_value_101: Optional[float] = None
    property_value_102: Optional[float] = None
    property_value_103: Optional[float] = None
    property_value_104: Optional[float] = None
    property_value_105: Optional[float] = None
    property_value_106: Optional[float] = None
    property_value_107: Optional[float] = None
    property_value_108: Optional[float] = None
    property_value_109: Optional[float] = None
    property_value_110: Optional[float] = None
    property_value_111: Optional[float] = None
    property_value_112: Optional[float] = None
    property_value_113: Optional[float] = None
    property_value_114: Optional[float] = None
    property_value_115: Optional[float] = None
    property_value_116: Optional[float] = None
    property_value_117: Optional[float] = None
    property_value_118: Optional[float] = None
    property_value_119: Optional[float] = None
    property_value_120: Optional[float] = None
    property_value_121: Optional[float] = None
    property_value_122: Optional[float] = None
    property_value_123: Optional[float] = None
    property_value_124: Optional[float] = None
    property_value_125: Optional[float] = None
    property_value_126: Optional[float] = None
    property_value_127: Optional[float] = None
    property_value_128: Optional[float] = None
    property_value_129: Optional[float] = None
    property_value_130: Optional[float] = None
    property_value_131: Optional[float] = None
    property_value_132: Optional[float] = None
    property_value_133: Optional[float] = None
    property_value_134: Optional[float] = None
    property_value_135: Optional[float] = None
    property_value_136: Optional[float] = None
    property_value_137: Optional[float] = None
    property_value_138: Optional[float] = None
    property_value_139: Optional[float] = None
    property_value_140: Optional[float] = None
    property_value_141: Optional[float] = None
    property_value_142: Optional[float] = None
    property_value_143: Optional[float] = None
    property_value_144: Optional[float] = None
    property_value_145: Optional[float] = None
    property_value_146: Optional[float] = None
    property_value_147: Optional[float] = None
    property_value_148: Optional[float] = None
    property_value_149: Optional[float] = None
    property_value_150: Optional[float] = None
    property_value_151: Optional[float] = None
    property_value_152: Optional[float] = None
    property_value_153: Optional[float] = None
    property_value_154: Optional[float] = None
    property_value_155: Optional[float] = None
    property_value_156: Optional[float] = None
    property_value_157: Optional[float] = None
    property_value_158: Optional[float] = None
    property_value_159: Optional[float] = None
    property_value_160: Optional[float] = None
    property_value_161: Optional[float] = None
    property_value_162: Optional[float] = None
    property_value_163: Optional[float] = None
    property_value_164: Optional[float] = None
    property_value_165: Optional[float] = None
    property_value_166: Optional[float] = None
    property_value_167: Optional[float] = None
    property_value_168: Optional[float] = None
    property_value_169: Optional[float] = None
    property_value_170: Optional[float] = None
    property_value_171: Optional[float] = None
    property_value_172: Optional[float] = None
    property_value_173: Optional[float] = None
    property_value_174: Optional[float] = None
    property_value_175: Optional[float] = None
    property_value_176: Optional[float] = None
    property_value_177: Optional[float] = None
    property_value_178: Optional[float] = None
    property_value_179: Optional[float] = None
    property_value_180: Optional[float] = None
    property_value_181: Optional[float] = None
    property_value_182: Optional[float] = None
    property_value_183: Optional[float] = None
    property_value_184: Optional[float] = None
    property_value_185: Optional[float] = None
    property_value_186: Optional[float] = None
    property_value_187: Optional[float] = None
    property_value_188: Optional[float] = None
    property_value_189: Optional[float] = None
    property_value_190: Optional[float] = None
    property_value_191: Optional[float] = None
    property_value_192: Optional[float] = None
    property_value_193: Optional[float] = None
    property_value_194: Optional[float] = None
    property_value_195: Optional[float] = None
    property_value_196: Optional[float] = None
    property_value_197: Optional[float] = None
    property_value_198: Optional[float] = None
    property_value_199: Optional[float] = None
    property_value_200: Optional[float] = None
    property_value_201: Optional[float] = None
    property_value_202: Optional[float] = None
    property_value_203: Optional[float] = None
    property_value_204: Optional[float] = None
    property_value_205: Optional[float] = None
    property_value_206: Optional[float] = None
    property_value_207: Optional[float] = None
    property_value_208: Optional[float] = None
    property_value_209: Optional[float] = None
    property_value_210: Optional[float] = None
    property_value_211: Optional[float] = None
    property_value_212: Optional[float] = None
    property_value_213: Optional[float] = None
    property_value_214: Optional[float] = None
    property_value_215: Optional[float] = None
    property_value_216: Optional[float] = None
    property_value_217: Optional[float] = None
    property_value_218: Optional[float] = None
    property_value_219: Optional[float] = None
    property_value_220: Optional[float] = None
    property_value_221: Optional[float] = None
    property_value_222: Optional[float] = None
    property_value_223: Optional[float] = None
    property_value_224: Optional[float] = None
    property_value_225: Optional[float] = None
    property_value_226: Optional[float] = None
    property_value_227: Optional[float] = None
    property_value_228: Optional[float] = None
    property_value_229: Optional[float] = None
    property_value_230: Optional[float] = None
    property_value_231: Optional[float] = None
    property_value_232: Optional[float] = None
    property_value_233: Optional[float] = None
    property_value_234: Optional[float] = None
    property_value_235: Optional[float] = None
    property_value_236: Optional[float] = None
    property_value_237: Optional[float] = None
    property_value_238: Optional[float] = None
    property_value_239: Optional[float] = None
    property_value_240: Optional[float] = None
    property_value_241: Optional[float] = None
    property_value_242: Optional[float] = None
    property_value_243: Optional[float] = None
    property_value_244: Optional[float] = None
    property_value_245: Optional[float] = None
    property_value_246: Optional[float] = None
    property_value_247: Optional[float] = None
    property_value_248: Optional[float] = None
    property_value_249: Optional[float] = None
    property_value_250: Optional[float] = None


class FluidPropertyType1(Enum):
    density = "Density"
    enthalpy = "Enthalpy"


class FluidPropertiesSuperheated(BaseModel):
    fluid_name: Optional[str] = None
    fluid_property_type: Optional[FluidPropertyType1] = None
    temperature_values_name: Optional[str] = None
    pressure: Optional[float] = Field(None, gt=0.0)
    property_value_1: Optional[float] = None
    property_value_2: Optional[float] = None
    property_value_3: Optional[float] = None
    property_value_4: Optional[float] = None
    property_value_5: Optional[float] = None
    property_value_6: Optional[float] = None
    property_value_7: Optional[float] = None
    property_value_8: Optional[float] = None
    property_value_9: Optional[float] = None
    property_value_10: Optional[float] = None
    property_value_11: Optional[float] = None
    property_value_12: Optional[float] = None
    property_value_13: Optional[float] = None
    property_value_14: Optional[float] = None
    property_value_15: Optional[float] = None
    property_value_16: Optional[float] = None
    property_value_17: Optional[float] = None
    property_value_18: Optional[float] = None
    property_value_19: Optional[float] = None
    property_value_20: Optional[float] = None
    property_value_21: Optional[float] = None
    property_value_22: Optional[float] = None
    property_value_23: Optional[float] = None
    property_value_24: Optional[float] = None
    property_value_25: Optional[float] = None
    property_value_26: Optional[float] = None
    property_value_27: Optional[float] = None
    property_value_28: Optional[float] = None
    property_value_29: Optional[float] = None
    property_value_30: Optional[float] = None
    property_value_31: Optional[float] = None
    property_value_32: Optional[float] = None
    property_value_33: Optional[float] = None
    property_value_34: Optional[float] = None
    property_value_35: Optional[float] = None
    property_value_36: Optional[float] = None
    property_value_37: Optional[float] = None
    property_value_38: Optional[float] = None
    property_value_39: Optional[float] = None
    property_value_40: Optional[float] = None
    property_value_41: Optional[float] = None
    property_value_42: Optional[float] = None
    property_value_43: Optional[float] = None
    property_value_44: Optional[float] = None
    property_value_45: Optional[float] = None
    property_value_46: Optional[float] = None
    property_value_47: Optional[float] = None
    property_value_48: Optional[float] = None
    property_value_49: Optional[float] = None
    property_value_50: Optional[float] = None
    property_value_51: Optional[float] = None
    property_value_52: Optional[float] = None
    property_value_53: Optional[float] = None
    property_value_54: Optional[float] = None
    property_value_55: Optional[float] = None
    property_value_56: Optional[float] = None
    property_value_57: Optional[float] = None
    property_value_58: Optional[float] = None
    property_value_59: Optional[float] = None
    property_value_60: Optional[float] = None
    property_value_61: Optional[float] = None
    property_value_62: Optional[float] = None
    property_value_63: Optional[float] = None
    property_value_64: Optional[float] = None
    property_value_65: Optional[float] = None
    property_value_66: Optional[float] = None
    property_value_67: Optional[float] = None
    property_value_68: Optional[float] = None
    property_value_69: Optional[float] = None
    property_value_70: Optional[float] = None
    property_value_71: Optional[float] = None
    property_value_72: Optional[float] = None
    property_value_73: Optional[float] = None
    property_value_74: Optional[float] = None
    property_value_75: Optional[float] = None
    property_value_76: Optional[float] = None
    property_value_77: Optional[float] = None
    property_value_78: Optional[float] = None
    property_value_79: Optional[float] = None
    property_value_80: Optional[float] = None
    property_value_81: Optional[float] = None
    property_value_82: Optional[float] = None
    property_value_83: Optional[float] = None
    property_value_84: Optional[float] = None
    property_value_85: Optional[float] = None
    property_value_86: Optional[float] = None
    property_value_87: Optional[float] = None
    property_value_88: Optional[float] = None
    property_value_89: Optional[float] = None
    property_value_90: Optional[float] = None
    property_value_91: Optional[float] = None
    property_value_92: Optional[float] = None
    property_value_93: Optional[float] = None
    property_value_94: Optional[float] = None
    property_value_95: Optional[float] = None
    property_value_96: Optional[float] = None
    property_value_97: Optional[float] = None
    property_value_98: Optional[float] = None
    property_value_99: Optional[float] = None
    property_value_100: Optional[float] = None
    property_value_101: Optional[float] = None
    property_value_102: Optional[float] = None
    property_value_103: Optional[float] = None
    property_value_104: Optional[float] = None
    property_value_105: Optional[float] = None
    property_value_106: Optional[float] = None
    property_value_107: Optional[float] = None
    property_value_108: Optional[float] = None
    property_value_109: Optional[float] = None
    property_value_110: Optional[float] = None
    property_value_111: Optional[float] = None
    property_value_112: Optional[float] = None
    property_value_113: Optional[float] = None
    property_value_114: Optional[float] = None
    property_value_115: Optional[float] = None
    property_value_116: Optional[float] = None
    property_value_117: Optional[float] = None
    property_value_118: Optional[float] = None
    property_value_119: Optional[float] = None
    property_value_120: Optional[float] = None
    property_value_121: Optional[float] = None
    property_value_122: Optional[float] = None
    property_value_123: Optional[float] = None
    property_value_124: Optional[float] = None
    property_value_125: Optional[float] = None
    property_value_126: Optional[float] = None
    property_value_127: Optional[float] = None
    property_value_128: Optional[float] = None
    property_value_129: Optional[float] = None
    property_value_130: Optional[float] = None
    property_value_131: Optional[float] = None
    property_value_132: Optional[float] = None
    property_value_133: Optional[float] = None
    property_value_134: Optional[float] = None
    property_value_135: Optional[float] = None
    property_value_136: Optional[float] = None
    property_value_137: Optional[float] = None
    property_value_138: Optional[float] = None
    property_value_139: Optional[float] = None
    property_value_140: Optional[float] = None
    property_value_141: Optional[float] = None
    property_value_142: Optional[float] = None
    property_value_143: Optional[float] = None
    property_value_144: Optional[float] = None
    property_value_145: Optional[float] = None
    property_value_146: Optional[float] = None
    property_value_147: Optional[float] = None
    property_value_148: Optional[float] = None
    property_value_149: Optional[float] = None
    property_value_150: Optional[float] = None
    property_value_151: Optional[float] = None
    property_value_152: Optional[float] = None
    property_value_153: Optional[float] = None
    property_value_154: Optional[float] = None
    property_value_155: Optional[float] = None
    property_value_156: Optional[float] = None
    property_value_157: Optional[float] = None
    property_value_158: Optional[float] = None
    property_value_159: Optional[float] = None
    property_value_160: Optional[float] = None
    property_value_161: Optional[float] = None
    property_value_162: Optional[float] = None
    property_value_163: Optional[float] = None
    property_value_164: Optional[float] = None
    property_value_165: Optional[float] = None
    property_value_166: Optional[float] = None
    property_value_167: Optional[float] = None
    property_value_168: Optional[float] = None
    property_value_169: Optional[float] = None
    property_value_170: Optional[float] = None
    property_value_171: Optional[float] = None
    property_value_172: Optional[float] = None
    property_value_173: Optional[float] = None
    property_value_174: Optional[float] = None
    property_value_175: Optional[float] = None
    property_value_176: Optional[float] = None
    property_value_177: Optional[float] = None
    property_value_178: Optional[float] = None
    property_value_179: Optional[float] = None
    property_value_180: Optional[float] = None
    property_value_181: Optional[float] = None
    property_value_182: Optional[float] = None
    property_value_183: Optional[float] = None
    property_value_184: Optional[float] = None
    property_value_185: Optional[float] = None
    property_value_186: Optional[float] = None
    property_value_187: Optional[float] = None
    property_value_188: Optional[float] = None
    property_value_189: Optional[float] = None
    property_value_190: Optional[float] = None
    property_value_191: Optional[float] = None
    property_value_192: Optional[float] = None
    property_value_193: Optional[float] = None
    property_value_194: Optional[float] = None
    property_value_195: Optional[float] = None
    property_value_196: Optional[float] = None
    property_value_197: Optional[float] = None
    property_value_198: Optional[float] = None
    property_value_199: Optional[float] = None
    property_value_200: Optional[float] = None
    property_value_201: Optional[float] = None
    property_value_202: Optional[float] = None
    property_value_203: Optional[float] = None
    property_value_204: Optional[float] = None
    property_value_205: Optional[float] = None
    property_value_206: Optional[float] = None
    property_value_207: Optional[float] = None
    property_value_208: Optional[float] = None
    property_value_209: Optional[float] = None
    property_value_210: Optional[float] = None
    property_value_211: Optional[float] = None
    property_value_212: Optional[float] = None
    property_value_213: Optional[float] = None
    property_value_214: Optional[float] = None
    property_value_215: Optional[float] = None
    property_value_216: Optional[float] = None
    property_value_217: Optional[float] = None
    property_value_218: Optional[float] = None
    property_value_219: Optional[float] = None
    property_value_220: Optional[float] = None
    property_value_221: Optional[float] = None
    property_value_222: Optional[float] = None
    property_value_223: Optional[float] = None
    property_value_224: Optional[float] = None
    property_value_225: Optional[float] = None
    property_value_226: Optional[float] = None
    property_value_227: Optional[float] = None
    property_value_228: Optional[float] = None
    property_value_229: Optional[float] = None
    property_value_230: Optional[float] = None
    property_value_231: Optional[float] = None
    property_value_232: Optional[float] = None
    property_value_233: Optional[float] = None
    property_value_234: Optional[float] = None
    property_value_235: Optional[float] = None
    property_value_236: Optional[float] = None
    property_value_237: Optional[float] = None
    property_value_238: Optional[float] = None
    property_value_239: Optional[float] = None
    property_value_240: Optional[float] = None
    property_value_241: Optional[float] = None
    property_value_242: Optional[float] = None
    property_value_243: Optional[float] = None
    property_value_244: Optional[float] = None
    property_value_245: Optional[float] = None
    property_value_246: Optional[float] = None
    property_value_247: Optional[float] = None
    property_value_248: Optional[float] = None
    property_value_249: Optional[float] = None
    property_value_250: Optional[float] = None


class ConversionFactorChoice(Enum):
    ccf = "CCF"
    mcf = "MCF"
    mj = "MJ"
    mm_btu = "MMBtu"
    therm = "Therm"
    user_defined = "UserDefined"
    gal = "gal"
    k_btu = "kBtu"
    k_wh = "kWh"
    kgal = "kgal"
    m3 = "m3"


class DemandWindowLength(Enum):
    day = "Day"
    full_hour = "FullHour"
    half_hour = "HalfHour"
    quarter_hour = "QuarterHour"
    week = "Week"


class BuyOrSell(Enum):
    field_ = ""
    buy_from_utility = "BuyFromUtility"
    net_metering = "NetMetering"
    sell_to_utility = "SellToUtility"


class UtilityCostTariff(BaseModel):
    output_meter_name: str
    conversion_factor_choice: Optional[ConversionFactorChoice] = None
    energy_conversion_factor: Optional[float] = None
    demand_conversion_factor: Optional[float] = None
    time_of_use_period_schedule_name: Optional[str] = None
    season_schedule_name: Optional[str] = None
    month_schedule_name: Optional[str] = None
    demand_window_length: Optional[DemandWindowLength] = None
    monthly_charge_or_variable_name: Optional[Union[float, str]] = None
    minimum_monthly_charge_or_variable_name: Optional[Union[float, str]] = None
    real_time_pricing_charge_schedule_name: Optional[str] = None
    customer_baseline_load_schedule_name: Optional[str] = None
    group_name: Optional[str] = None
    buy_or_sell: Optional[BuyOrSell] = "BuyFromUtility"


class QualifyType(Enum):
    field_ = ""
    maximum = "Maximum"
    minimum = "Minimum"


class Season(Enum):
    annual = "Annual"
    fall = "Fall"
    spring = "Spring"
    summer = "Summer"
    winter = "Winter"


class ThresholdTest(Enum):
    field_ = ""
    consecutive = "Consecutive"
    count = "Count"


class UtilityCostQualify(BaseModel):
    utility_cost_qualify_name: str
    tariff_name: str
    variable_name: str
    qualify_type: Optional[QualifyType] = "Maximum"
    threshold_value_or_variable_name: Union[float, str]
    season: Optional[Season] = None
    threshold_test: Optional[ThresholdTest] = "Consecutive"
    number_of_months: Optional[float] = Field(None, ge=1.0, le=12.0)


class CategoryVariableName(Enum):
    adjustment = "Adjustment"
    basis = "Basis"
    demand_charges = "DemandCharges"
    energy_charges = "EnergyCharges"
    not_included = "NotIncluded"
    service_charges = "ServiceCharges"
    subtotal = "Subtotal"
    surcharge = "Surcharge"
    taxes = "Taxes"
    total = "Total"


class UtilityCostChargeSimple(BaseModel):
    utility_cost_charge_simple_name: str
    tariff_name: str
    source_variable: str
    season: Optional[Season] = None
    category_variable_name: CategoryVariableName
    cost_per_unit_value_or_variable_name: Union[float, str]


class Season2(Enum):
    field_ = ""
    annual = "Annual"
    fall = "Fall"
    spring = "Spring"
    summer = "Summer"
    winter = "Winter"


class UtilityCostChargeBlock(BaseModel):
    utility_cost_charge_block_name: str
    tariff_name: str
    source_variable: str
    season: Optional[Season2] = "Annual"
    category_variable_name: CategoryVariableName
    remaining_into_variable: Optional[str] = None
    block_size_multiplier_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_1_value_or_variable_name: Optional[Union[float, str]] = None
    block_1_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_2_value_or_variable_name: Optional[Union[float, str]] = None
    block_2_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_3_value_or_variable_name: Optional[Union[float, str]] = None
    block_3_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_4_value_or_variable_name: Optional[Union[float, str]] = None
    block_4_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_5_value_or_variable_name: Optional[Union[float, str]] = None
    block_5_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_6_value_or_variable_name: Optional[Union[float, str]] = None
    block_6_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_7_value_or_variable_name: Optional[Union[float, str]] = None
    block_7_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_8_value_or_variable_name: Optional[Union[float, str]] = None
    block_8_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_9_value_or_variable_name: Optional[Union[float, str]] = None
    block_9_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_10_value_or_variable_name: Optional[Union[float, str]] = None
    block_10_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_11_value_or_variable_name: Optional[Union[float, str]] = None
    block_11_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_12_value_or_variable_name: Optional[Union[float, str]] = None
    block_12_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_13_value_or_variable_name: Optional[Union[float, str]] = None
    block_13_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_14_value_or_variable_name: Optional[Union[float, str]] = None
    block_14_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None
    block_size_15_value_or_variable_name: Optional[Union[float, str]] = None
    block_15_cost_per_unit_value_or_variable_name: Optional[Union[float, str]] = None


class VariableType(Enum):
    field_ = ""
    currency = "Currency"
    demand = "Demand"
    dimensionless = "Dimensionless"
    energy = "Energy"


class UtilityCostVariable(BaseModel):
    tariff_name: str
    variable_type: Optional[VariableType] = "Dimensionless"
    january_value: Optional[float] = None
    february_value: Optional[float] = None
    march_value: Optional[float] = None
    april_value: Optional[float] = None
    may_value: Optional[float] = None
    june_value: Optional[float] = None
    july_value: Optional[float] = None
    august_value: Optional[float] = None
    september_value: Optional[float] = None
    october_value: Optional[float] = None
    november_value: Optional[float] = None
    december_value: Optional[float] = None


class KeyField(Enum):
    field_ = ""
    idf = "IDF"
    regular = "regular"


class SortOption(Enum):
    name = "Name"
    unsorted = "Unsorted"


class OutputVariableDictionary(BaseModel):
    key_field: Optional[KeyField] = "regular"
    sort_option: Optional[SortOption] = None


class ReportType(Enum):
    cost_info = "CostInfo"
    decay_curves_from_component_loads_summary = "DecayCurvesFromComponentLoadsSummary"
    details = "Details"
    details_with_vertices = "DetailsWithVertices"
    lines = "Lines"
    vertices = "Vertices"
    view_factor_info = "ViewFactorInfo"


class OutputSurfacesList(BaseModel):
    report_type: ReportType
    report_specifications: Optional[Literal["IDF"]] = None


class ReportType1(Enum):
    dxf = "DXF"
    dxf_wire_frame = "DXF:WireFrame"
    vrml = "VRML"


class ReportSpecifications1(Enum):
    field_ = ""
    regular_polyline = "RegularPolyline"
    thick_polyline = "ThickPolyline"
    triangulate3_d_face = "Triangulate3DFace"


class OutputSurfacesDrawing(BaseModel):
    report_type: ReportType1
    report_specifications_1: Optional[ReportSpecifications1] = "Triangulate3DFace"
    report_specifications_2: Optional[str] = None


class DetailsType1(Enum):
    constructions = "Constructions"
    materials = "Materials"


class OutputConstructions(BaseModel):
    details_type_1: Optional[DetailsType1] = None
    details_type_2: Optional[DetailsType1] = None


class ActuatorAvailabilityDictionaryReporting(Enum):
    field_ = ""
    none = "None"
    not_by_unique_key_names = "NotByUniqueKeyNames"
    verbose = "Verbose"


class EmsRuntimeLanguageDebugOutputLevel(Enum):
    field_ = ""
    errors_only = "ErrorsOnly"
    none = "None"
    verbose = "Verbose"


class OutputEnergyManagementSystem(BaseModel):
    actuator_availability_dictionary_reporting: Optional[
        ActuatorAvailabilityDictionaryReporting
    ] = "None"
    internal_variable_availability_dictionary_reporting: Optional[
        ActuatorAvailabilityDictionaryReporting
    ] = "None"
    ems_runtime_language_debug_output_level: Optional[
        EmsRuntimeLanguageDebugOutputLevel
    ] = "None"


class ReportName(Enum):
    adaptive_comfort_summary = "AdaptiveComfortSummary"
    air_loop_component_load_summary = "AirLoopComponentLoadSummary"
    air_loop_system_component_energy_use_monthly = (
        "AirLoopSystemComponentEnergyUseMonthly"
    )
    air_loop_system_component_loads_monthly = "AirLoopSystemComponentLoadsMonthly"
    air_loop_system_energy_and_water_use_monthly = (
        "AirLoopSystemEnergyAndWaterUseMonthly"
    )
    all_monthly = "AllMonthly"
    all_summary = "AllSummary"
    all_summary_and_monthly = "AllSummaryAndMonthly"
    all_summary_and_sizing_period = "AllSummaryAndSizingPeriod"
    all_summary_monthly_and_sizing_period = "AllSummaryMonthlyAndSizingPeriod"
    annual_building_utility_performance_summary = (
        "AnnualBuildingUtilityPerformanceSummary"
    )
    average_outdoor_conditions_monthly = "AverageOutdoorConditionsMonthly"
    boiler_report_monthly = "BoilerReportMonthly"
    co2_resilience_summary = "CO2ResilienceSummary"
    chiller_report_monthly = "ChillerReportMonthly"
    climatic_data_summary = "ClimaticDataSummary"
    coil_report_monthly = "CoilReportMonthly"
    coil_sizing_details = "CoilSizingDetails"
    comfort_report_simple55_monthly = "ComfortReportSimple55Monthly"
    component_cost_economics_summary = "ComponentCostEconomicsSummary"
    component_sizing_summary = "ComponentSizingSummary"
    cond_loop_demand_report_monthly = "CondLoopDemandReportMonthly"
    dx_report_monthly = "DXReportMonthly"
    daylighting_report_monthly = "DaylightingReportMonthly"
    demand_end_use_components_summary = "DemandEndUseComponentsSummary"
    economic_result_summary = "EconomicResultSummary"
    electric_components_of_peak_demand_monthly = "ElectricComponentsOfPeakDemandMonthly"
    end_use_energy_consumption_coal_monthly = "EndUseEnergyConsumptionCoalMonthly"
    end_use_energy_consumption_diesel_monthly = "EndUseEnergyConsumptionDieselMonthly"
    end_use_energy_consumption_electricity_monthly = (
        "EndUseEnergyConsumptionElectricityMonthly"
    )
    end_use_energy_consumption_fuel_oil_monthly = (
        "EndUseEnergyConsumptionFuelOilMonthly"
    )
    end_use_energy_consumption_gasoline_monthly = (
        "EndUseEnergyConsumptionGasolineMonthly"
    )
    end_use_energy_consumption_natural_gas_monthly = (
        "EndUseEnergyConsumptionNaturalGasMonthly"
    )
    end_use_energy_consumption_other_fuels_monthly = (
        "EndUseEnergyConsumptionOtherFuelsMonthly"
    )
    end_use_energy_consumption_propane_monthly = "EndUseEnergyConsumptionPropaneMonthly"
    energy_consumption_coal_gasoline_monthly = "EnergyConsumptionCoalGasolineMonthly"
    energy_consumption_diesel_fuel_oil_monthly = "EnergyConsumptionDieselFuelOilMonthly"
    energy_consumption_district_heating_cooling_monthly = (
        "EnergyConsumptionDistrictHeatingCoolingMonthly"
    )
    energy_consumption_electricity_generated_propane_monthly = (
        "EnergyConsumptionElectricityGeneratedPropaneMonthly"
    )
    energy_consumption_electricity_natural_gas_monthly = (
        "EnergyConsumptionElectricityNaturalGasMonthly"
    )
    energy_consumption_other_fuels_monthly = "EnergyConsumptionOtherFuelsMonthly"
    energy_meters = "EnergyMeters"
    envelope_summary = "EnvelopeSummary"
    equipment_summary = "EquipmentSummary"
    facility_component_load_summary = "FacilityComponentLoadSummary"
    fan_report_monthly = "FanReportMonthly"
    generator_report_monthly = "GeneratorReportMonthly"
    hvac_sizing_summary = "HVACSizingSummary"
    heat_emissions_report_monthly = "HeatEmissionsReportMonthly"
    heat_emissions_summary = "HeatEmissionsSummary"
    initialization_summary = "InitializationSummary"
    input_verificationand_results_summary = "InputVerificationandResultsSummary"
    leed_summary = "LEEDSummary"
    life_cycle_cost_report = "LifeCycleCostReport"
    lighting_summary = "LightingSummary"
    mechanical_ventilation_loads_monthly = "MechanicalVentilationLoadsMonthly"
    object_count_summary = "ObjectCountSummary"
    occupant_comfort_data_summary_monthly = "OccupantComfortDataSummaryMonthly"
    outdoor_air_details = "OutdoorAirDetails"
    outdoor_air_summary = "OutdoorAirSummary"
    outdoor_conditions_maximum_dew_point_monthly = (
        "OutdoorConditionsMaximumDewPointMonthly"
    )
    outdoor_conditions_maximum_dry_bulb_monthly = (
        "OutdoorConditionsMaximumDryBulbMonthly"
    )
    outdoor_conditions_maximum_wet_bulb_monthly = (
        "OutdoorConditionsMaximumWetBulbMonthly"
    )
    outdoor_conditions_minimum_dry_bulb_monthly = (
        "OutdoorConditionsMinimumDryBulbMonthly"
    )
    outdoor_ground_conditions_monthly = "OutdoorGroundConditionsMonthly"
    peak_energy_end_use_coal_monthly = "PeakEnergyEndUseCoalMonthly"
    peak_energy_end_use_diesel_monthly = "PeakEnergyEndUseDieselMonthly"
    peak_energy_end_use_electricity_part1_monthly = (
        "PeakEnergyEndUseElectricityPart1Monthly"
    )
    peak_energy_end_use_electricity_part2_monthly = (
        "PeakEnergyEndUseElectricityPart2Monthly"
    )
    peak_energy_end_use_fuel_oil_monthly = "PeakEnergyEndUseFuelOilMonthly"
    peak_energy_end_use_gasoline_monthly = "PeakEnergyEndUseGasolineMonthly"
    peak_energy_end_use_natural_gas_monthly = "PeakEnergyEndUseNaturalGasMonthly"
    peak_energy_end_use_other_fuels_monthly = "PeakEnergyEndUseOtherFuelsMonthly"
    peak_energy_end_use_propane_monthly = "PeakEnergyEndUsePropaneMonthly"
    peak_space_gains_monthly = "PeakSpaceGainsMonthly"
    plant_loop_demand_report_monthly = "PlantLoopDemandReportMonthly"
    pump_report_monthly = "PumpReportMonthly"
    sensible_heat_gain_summary = "SensibleHeatGainSummary"
    setpoints_not_met_with_temperatures_monthly = (
        "SetpointsNotMetWithTemperaturesMonthly"
    )
    shading_summary = "ShadingSummary"
    source_energy_end_use_components_summary = "SourceEnergyEndUseComponentsSummary"
    space_gain_components_at_cooling_peak_monthly = (
        "SpaceGainComponentsAtCoolingPeakMonthly"
    )
    space_gains_monthly = "SpaceGainsMonthly"
    standard62_1_summary = "Standard62.1Summary"
    surface_shadowing_summary = "SurfaceShadowingSummary"
    system_summary = "SystemSummary"
    tariff_report = "TariffReport"
    thermal_resilience_summary = "ThermalResilienceSummary"
    tower_report_monthly = "TowerReportMonthly"
    unglazed_transpired_solar_collector_summary_monthly = (
        "UnglazedTranspiredSolarCollectorSummaryMonthly"
    )
    visual_resilience_summary = "VisualResilienceSummary"
    water_heater_report_monthly = "WaterHeaterReportMonthly"
    window_ac_report_monthly = "WindowACReportMonthly"
    window_energy_report_monthly = "WindowEnergyReportMonthly"
    window_energy_zone_summary_monthly = "WindowEnergyZoneSummaryMonthly"
    window_report_monthly = "WindowReportMonthly"
    window_zone_summary_monthly = "WindowZoneSummaryMonthly"
    zone_component_load_summary = "ZoneComponentLoadSummary"
    zone_cooling_summary_monthly = "ZoneCoolingSummaryMonthly"
    zone_electric_summary_monthly = "ZoneElectricSummaryMonthly"
    zone_heating_summary_monthly = "ZoneHeatingSummaryMonthly"
    zone_temperature_oscillation_report_monthly = (
        "ZoneTemperatureOscillationReportMonthly"
    )


class Report(BaseModel):
    report_name: Optional[ReportName] = None


class OutputTableSummaryReports(BaseModel):
    reports: Optional[List[Report]] = None


class VariableType1(Enum):
    energy = "Energy"
    power = "Power"
    temperature = "Temperature"
    volumetric_flow = "VolumetricFlow"


class OutputTableTimeBins(BaseModel):
    key_value: Optional[str] = "*"
    variable_name: str
    interval_start: Optional[float] = None
    interval_size: Optional[float] = None
    interval_count: Optional[int] = Field(None, ge=1, le=20)
    schedule_name: Optional[str] = None
    variable_type: Optional[VariableType1] = None


class AggregationTypeForVariableOrMeter(Enum):
    hours_negative = "HoursNegative"
    hours_non_negative = "HoursNonNegative"
    hours_non_positive = "HoursNonPositive"
    hours_non_zero = "HoursNonZero"
    hours_positive = "HoursPositive"
    hours_zero = "HoursZero"
    maximum = "Maximum"
    maximum_during_hours_shown = "MaximumDuringHoursShown"
    minimum = "Minimum"
    minimum_during_hours_shown = "MinimumDuringHoursShown"
    sum_or_average = "SumOrAverage"
    sum_or_average_during_hours_shown = "SumOrAverageDuringHoursShown"
    value_when_maximum_or_minimum = "ValueWhenMaximumOrMinimum"


class VariableDetail(BaseModel):
    variable_or_meter_name: Optional[str] = None
    aggregation_type_for_variable_or_meter: Optional[
        AggregationTypeForVariableOrMeter
    ] = None


class OutputTableMonthly(BaseModel):
    digits_after_decimal: Optional[int] = Field(2, ge=0, le=10)
    variable_details: Optional[List[VariableDetail]] = None


class ColumnSeparator(Enum):
    field_ = ""
    all = "All"
    comma = "Comma"
    comma_and_html = "CommaAndHTML"
    comma_and_xml = "CommaAndXML"
    fixed = "Fixed"
    html = "HTML"
    tab = "Tab"
    tab_and_html = "TabAndHTML"
    xml = "XML"
    xm_land_html = "XMLandHTML"


class UnitConversion(Enum):
    field_ = ""
    inch_pound = "InchPound"
    jto_gj = "JtoGJ"
    jto_kwh = "JtoKWH"
    jto_mj = "JtoMJ"
    none = "None"


class OutputControlTableStyle(BaseModel):
    column_separator: Optional[ColumnSeparator] = "Comma"
    unit_conversion: Optional[UnitConversion] = "None"


class OutputControlReportingTolerances(BaseModel):
    tolerance_for_time_heating_setpoint_not_met: Optional[float] = Field(
        0.2, ge=0.0, le=10.0
    )
    tolerance_for_time_cooling_setpoint_not_met: Optional[float] = Field(
        0.2, ge=0.0, le=10.0
    )


class ReportingFrequency(Enum):
    field_ = ""
    annual = "Annual"
    daily = "Daily"
    detailed = "Detailed"
    environment = "Environment"
    hourly = "Hourly"
    monthly = "Monthly"
    run_period = "RunPeriod"
    timestep = "Timestep"


class OutputVariable(BaseModel):
    key_value: Optional[str] = "*"
    variable_name: str
    reporting_frequency: Optional[ReportingFrequency] = "Hourly"
    schedule_name: Optional[str] = None


class OutputMeter(BaseModel):
    key_name: str
    reporting_frequency: Optional[ReportingFrequency] = "Hourly"


class OutputMeterMeterFileOnly(OutputMeter):
    pass


class ResourceType(Enum):
    coal = "Coal"
    diesel = "Diesel"
    district_cooling = "DistrictCooling"
    district_heating = "DistrictHeating"
    electricity = "Electricity"
    fuel_oil_no1 = "FuelOilNo1"
    fuel_oil_no2 = "FuelOilNo2"
    gasoline = "Gasoline"
    generic = "Generic"
    natural_gas = "NaturalGas"
    other_fuel1 = "OtherFuel1"
    other_fuel2 = "OtherFuel2"
    propane = "Propane"
    steam = "Steam"
    water = "Water"


class VariableDetail1(BaseModel):
    key_name: Optional[str] = None
    output_variable_or_meter_name: Optional[str] = None


class MeterCustom(BaseModel):
    resource_type: Optional[ResourceType] = None
    variable_details: Optional[List[VariableDetail1]] = None


class MeterCustomDecrement(BaseModel):
    resource_type: Optional[ResourceType] = None
    source_meter_name: str
    variable_details: Optional[List[VariableDetail1]] = None


class OutputControlFiles(BaseModel):
    output_csv: Optional[DoZoneSizingCalculation] = "No"
    output_mtr: Optional[DoZoneSizingCalculation] = "Yes"
    output_eso: Optional[DoZoneSizingCalculation] = "Yes"
    output_eio: Optional[DoZoneSizingCalculation] = "Yes"
    output_tabular: Optional[DoZoneSizingCalculation] = "Yes"
    output_sqlite: Optional[DoZoneSizingCalculation] = "Yes"
    output_json: Optional[DoZoneSizingCalculation] = "Yes"
    output_audit: Optional[DoZoneSizingCalculation] = "Yes"
    output_zone_sizing: Optional[DoZoneSizingCalculation] = "Yes"
    output_system_sizing: Optional[DoZoneSizingCalculation] = "Yes"
    output_dxf: Optional[DoZoneSizingCalculation] = "Yes"
    output_bnd: Optional[DoZoneSizingCalculation] = "Yes"
    output_rdd: Optional[DoZoneSizingCalculation] = "Yes"
    output_mdd: Optional[DoZoneSizingCalculation] = "Yes"
    output_mtd: Optional[DoZoneSizingCalculation] = "Yes"
    output_end: Optional[DoZoneSizingCalculation] = "Yes"
    output_shd: Optional[DoZoneSizingCalculation] = "Yes"
    output_dfs: Optional[DoZoneSizingCalculation] = "Yes"
    output_glhe: Optional[DoZoneSizingCalculation] = "Yes"
    output_delightin: Optional[DoZoneSizingCalculation] = "Yes"
    output_delighteldmp: Optional[DoZoneSizingCalculation] = "Yes"
    output_delightdfdmp: Optional[DoZoneSizingCalculation] = "Yes"
    output_edd: Optional[DoZoneSizingCalculation] = "Yes"
    output_dbg: Optional[DoZoneSizingCalculation] = "Yes"
    output_perflog: Optional[DoZoneSizingCalculation] = "Yes"
    output_sln: Optional[DoZoneSizingCalculation] = "Yes"
    output_sci: Optional[DoZoneSizingCalculation] = "Yes"
    output_wrl: Optional[DoZoneSizingCalculation] = "Yes"
    output_screen: Optional[DoZoneSizingCalculation] = "Yes"
    output_extshd: Optional[DoZoneSizingCalculation] = "Yes"
    output_tarcog: Optional[DoZoneSizingCalculation] = "Yes"


class OptionType(Enum):
    time_series = "TimeSeries"
    time_series_and_tabular = "TimeSeriesAndTabular"


class OutputJson1(BaseModel):
    option_type: OptionType
    output_json: Optional[DoZoneSizingCalculation] = "Yes"
    output_cbor: Optional[DoZoneSizingCalculation] = "No"
    output_messagepack: Optional[DoZoneSizingCalculation] = "No"


class OptionType1(Enum):
    simple = "Simple"
    simple_and_tabular = "SimpleAndTabular"


class UnitConversionForTabularData(Enum):
    field_ = ""
    inch_pound = "InchPound"
    jto_gj = "JtoGJ"
    jto_kwh = "JtoKWH"
    jto_mj = "JtoMJ"
    none = "None"
    use_output_control_table_style = "UseOutputControlTableStyle"


class OutputSqLite(BaseModel):
    option_type: Optional[OptionType1] = None
    unit_conversion_for_tabular_data: Optional[
        UnitConversionForTabularData
    ] = "UseOutputControlTableStyle"


class ReportingFrequency3(Enum):
    annual = "Annual"
    daily = "Daily"
    environment = "Environment"
    hourly = "Hourly"
    monthly = "Monthly"
    run_period = "RunPeriod"
    timestep = "Timestep"


class OutputEnvironmentalImpactFactors(BaseModel):
    reporting_frequency: Optional[ReportingFrequency3] = None


class EnvironmentalImpactFactors(BaseModel):
    district_heating_efficiency: Optional[float] = Field(0.3, gt=0.0)
    district_cooling_cop: Optional[float] = Field(3.0, gt=0.0)
    steam_conversion_efficiency: Optional[float] = Field(0.25, gt=0.0)
    total_carbon_equivalent_emission_factor_from_n2o: Optional[float] = 80.7272
    total_carbon_equivalent_emission_factor_from_ch4: Optional[float] = 6.2727
    total_carbon_equivalent_emission_factor_from_co2: Optional[float] = 0.2727


class FuelFactors(BaseModel):
    existing_fuel_resource_name: Optional[FuelType4] = None
    source_energy_factor: Optional[float] = None
    source_energy_schedule_name: Optional[str] = None
    co2_emission_factor: Optional[float] = None
    co2_emission_factor_schedule_name: Optional[str] = None
    co_emission_factor: Optional[float] = None
    co_emission_factor_schedule_name: Optional[str] = None
    ch4_emission_factor: Optional[float] = None
    ch4_emission_factor_schedule_name: Optional[str] = None
    nox_emission_factor: Optional[float] = None
    nox_emission_factor_schedule_name: Optional[str] = None
    n2o_emission_factor: Optional[float] = None
    n2o_emission_factor_schedule_name: Optional[str] = None
    so2_emission_factor: Optional[float] = None
    so2_emission_factor_schedule_name: Optional[str] = None
    pm_emission_factor: Optional[float] = None
    pm_emission_factor_schedule_name: Optional[str] = None
    pm10_emission_factor: Optional[float] = None
    pm10_emission_factor_schedule_name: Optional[str] = None
    pm2_5_emission_factor: Optional[float] = None
    pm2_5_emission_factor_schedule_name: Optional[str] = None
    nh3_emission_factor: Optional[float] = None
    nh3_emission_factor_schedule_name: Optional[str] = None
    nmvoc_emission_factor: Optional[float] = None
    nmvoc_emission_factor_schedule_name: Optional[str] = None
    hg_emission_factor: Optional[float] = None
    hg_emission_factor_schedule_name: Optional[str] = None
    pb_emission_factor: Optional[float] = None
    pb_emission_factor_schedule_name: Optional[str] = None
    water_emission_factor: Optional[float] = None
    water_emission_factor_schedule_name: Optional[str] = None
    nuclear_high_level_emission_factor: Optional[float] = None
    nuclear_high_level_emission_factor_schedule_name: Optional[str] = None
    nuclear_low_level_emission_factor: Optional[float] = None
    nuclear_low_level_emission_factor_schedule_name: Optional[str] = None


class Key(Enum):
    display_advanced_report_variables = "DisplayAdvancedReportVariables"
    display_all_warnings = "DisplayAllWarnings"
    display_extra_warnings = "DisplayExtraWarnings"
    display_unused_objects = "DisplayUnusedObjects"
    display_unused_schedules = "DisplayUnusedSchedules"
    display_weather_missing_data_warnings = "DisplayWeatherMissingDataWarnings"
    display_zone_air_heat_balance_off_balance = "DisplayZoneAirHeatBalanceOffBalance"
    do_not_mirror_attached_shading = "DoNotMirrorAttachedShading"
    do_not_mirror_detached_shading = "DoNotMirrorDetachedShading"
    report_detailed_warmup_convergence = "ReportDetailedWarmupConvergence"
    report_during_hvac_sizing_simulation = "ReportDuringHVACSizingSimulation"
    report_during_warmup = "ReportDuringWarmup"


class Diagnostic(BaseModel):
    key: Optional[Key] = None


class OutputDiagnostics(BaseModel):
    diagnostics: Optional[List[Diagnostic]] = None


class EnergyPlusModel(BaseModel):
    version: Optional[Dict[str, Version]] = Field(None, alias="Version")
    simulation_control: Optional[Dict[str, SimulationControl]] = Field(
        None, alias="SimulationControl"
    )
    building: Dict[str, Building] = Field(..., alias="Building")
    shadow_calculation: Optional[Dict[str, ShadowCalculation]] = Field(
        None, alias="ShadowCalculation"
    )
    surface_convection_algorithm_inside: Optional[
        Dict[str, SurfaceConvectionAlgorithmInside]
    ] = Field(None, alias="SurfaceConvectionAlgorithm:Inside")
    surface_convection_algorithm_outside: Optional[
        Dict[str, SurfaceConvectionAlgorithmOutside]
    ] = Field(None, alias="SurfaceConvectionAlgorithm:Outside")
    heat_balance_algorithm: Optional[Dict[str, HeatBalanceAlgorithm]] = Field(
        None, alias="HeatBalanceAlgorithm"
    )
    zone_air_heat_balance_algorithm: Optional[
        Dict[str, ZoneAirHeatBalanceAlgorithm]
    ] = Field(None, alias="ZoneAirHeatBalanceAlgorithm")
    zone_air_contaminant_balance: Optional[
        Dict[str, ZoneAirContaminantBalance]
    ] = Field(None, alias="ZoneAirContaminantBalance")
    zone_capacitance_multiplier_research_special: Optional[
        Dict[str, ZoneCapacitanceMultiplierResearchSpecial]
    ] = Field(None, alias="ZoneCapacitanceMultiplier:ResearchSpecial")
    timestep: Optional[Dict[str, Timestep]] = Field(None, alias="Timestep")
    convergence_limits: Optional[Dict[str, ConvergenceLimits]] = Field(
        None, alias="ConvergenceLimits"
    )
    site_location: Optional[Dict[str, SiteLocation]] = Field(
        None, alias="Site:Location"
    )
    sizing_period_design_day: Optional[Dict[str, SizingPeriodDesignDay]] = Field(
        None, alias="SizingPeriod:DesignDay"
    )
    run_period: Optional[Dict[str, RunPeriod]] = Field(None, alias="RunPeriod")
    run_period_control_special_days: Optional[
        Dict[str, RunPeriodControlSpecialDays]
    ] = Field(None, alias="RunPeriodControl:SpecialDays")
    run_period_control_daylight_saving_time: Optional[
        Dict[str, RunPeriodControlDaylightSavingTime]
    ] = Field(None, alias="RunPeriodControl:DaylightSavingTime")
    site_ground_temperature_building_surface: Optional[
        Dict[str, SiteGroundTemperatureBuildingSurface]
    ] = Field(None, alias="Site:GroundTemperature:BuildingSurface")
    site_ground_temperature_f_cfactor_method: Optional[
        Dict[str, SiteGroundTemperatureFCfactorMethod]
    ] = Field(None, alias="Site:GroundTemperature:FCfactorMethod")
    site_water_mains_temperature: Optional[
        Dict[str, SiteWaterMainsTemperature]
    ] = Field(None, alias="Site:WaterMainsTemperature")
    schedule_type_limits: Optional[Dict[str, ScheduleTypeLimits]] = Field(
        None, alias="ScheduleTypeLimits"
    )
    schedule_day_hourly: Optional[Dict[str, ScheduleDayHourly]] = Field(
        None, alias="Schedule:Day:Hourly"
    )
    schedule_week_daily: Optional[Dict[str, ScheduleWeekDaily]] = Field(
        None, alias="Schedule:Week:Daily"
    )
    schedule_year: Optional[Dict[str, ScheduleYear]] = Field(
        None, alias="Schedule:Year"
    )
    schedule_compact: Optional[Dict[str, ScheduleCompact]] = Field(
        None, alias="Schedule:Compact"
    )
    schedule_constant: Optional[Dict[str, ScheduleConstant]] = Field(
        None, alias="Schedule:Constant"
    )
    material: Optional[Dict[str, Material]] = Field(None, alias="Material")
    material_no_mass: Optional[Dict[str, MaterialNoMass]] = Field(
        None, alias="Material:NoMass"
    )
    material_air_gap: Optional[Dict[str, MaterialAirGap]] = Field(
        None, alias="Material:AirGap"
    )
    window_material_simple_glazing_system: Optional[
        Dict[str, WindowMaterialSimpleGlazingSystem]
    ] = Field(None, alias="WindowMaterial:SimpleGlazingSystem")
    window_material_glazing: Optional[Dict[str, WindowMaterialGlazing]] = Field(
        None, alias="WindowMaterial:Glazing"
    )
    window_material_gas: Optional[Dict[str, WindowMaterialGas]] = Field(
        None, alias="WindowMaterial:Gas"
    )
    window_gap_support_pillar: Optional[Dict[str, WindowGapSupportPillar]] = Field(
        None, alias="WindowGap:SupportPillar"
    )
    window_gap_deflection_state: Optional[Dict[str, WindowGapDeflectionState]] = Field(
        None, alias="WindowGap:DeflectionState"
    )
    window_material_gas_mixture: Optional[Dict[str, WindowMaterialGasMixture]] = Field(
        None, alias="WindowMaterial:GasMixture"
    )
    window_material_gap: Optional[Dict[str, WindowMaterialGap]] = Field(
        None, alias="WindowMaterial:Gap"
    )
    window_material_complex_shade: Optional[
        Dict[str, WindowMaterialComplexShade]
    ] = Field(None, alias="WindowMaterial:ComplexShade")
    construction: Optional[Dict[str, Construction]] = Field(None, alias="Construction")
    construction_cfactor_underground_wall: Optional[
        Dict[str, ConstructionCfactorUndergroundWall]
    ] = Field(None, alias="Construction:CfactorUndergroundWall")
    construction_ffactor_ground_floor: Optional[
        Dict[str, ConstructionFfactorGroundFloor]
    ] = Field(None, alias="Construction:FfactorGroundFloor")
    window_thermal_model_params: Optional[Dict[str, WindowThermalModelParams]] = Field(
        None, alias="WindowThermalModel:Params"
    )
    construction_complex_fenestration_state: Optional[
        Dict[str, ConstructionComplexFenestrationState]
    ] = Field(None, alias="Construction:ComplexFenestrationState")
    global_geometry_rules: Dict[str, GlobalGeometryRules] = Field(
        ..., alias="GlobalGeometryRules"
    )
    zone: Optional[Dict[str, Zone]] = Field(None, alias="Zone")
    zone_list: Optional[Dict[str, ZoneList]] = Field(None, alias="ZoneList")
    zone_group: Optional[Dict[str, ZoneGroup]] = Field(None, alias="ZoneGroup")
    building_surface_detailed: Optional[Dict[str, BuildingSurfaceDetailed]] = Field(
        None, alias="BuildingSurface:Detailed"
    )
    fenestration_surface_detailed: Optional[
        Dict[str, FenestrationSurfaceDetailed]
    ] = Field(None, alias="FenestrationSurface:Detailed")
    window_property_frame_and_divider: Optional[
        Dict[str, WindowPropertyFrameAndDivider]
    ] = Field(None, alias="WindowProperty:FrameAndDivider")
    internal_mass: Optional[Dict[str, InternalMass]] = Field(None, alias="InternalMass")
    shading_site_detailed: Optional[Dict[str, ShadingSiteDetailed]] = Field(
        None, alias="Shading:Site:Detailed"
    )
    shading_building_detailed: Optional[Dict[str, ShadingBuildingDetailed]] = Field(
        None, alias="Shading:Building:Detailed"
    )
    shading_zone_detailed: Optional[Dict[str, ShadingZoneDetailed]] = Field(
        None, alias="Shading:Zone:Detailed"
    )
    shading_property_reflectance: Optional[
        Dict[str, ShadingPropertyReflectance]
    ] = Field(None, alias="ShadingProperty:Reflectance")
    surface_property_solar_incident_inside: Optional[
        Dict[str, SurfacePropertySolarIncidentInside]
    ] = Field(None, alias="SurfaceProperty:SolarIncidentInside")
    complex_fenestration_property_solar_absorbed_layers: Optional[
        Dict[str, ComplexFenestrationPropertySolarAbsorbedLayers]
    ] = Field(None, alias="ComplexFenestrationProperty:SolarAbsorbedLayers")
    people: Optional[Dict[str, People]] = Field(None, alias="People")
    lights: Optional[Dict[str, Lights]] = Field(None, alias="Lights")
    electric_equipment: Optional[Dict[str, ElectricEquipment]] = Field(
        None, alias="ElectricEquipment"
    )
    gas_equipment: Optional[Dict[str, GasEquipment]] = Field(None, alias="GasEquipment")
    other_equipment: Optional[Dict[str, OtherEquipment]] = Field(
        None, alias="OtherEquipment"
    )
    daylighting_controls: Optional[Dict[str, DaylightingControls]] = Field(
        None, alias="Daylighting:Controls"
    )
    daylighting_reference_point: Optional[Dict[str, DaylightingReferencePoint]] = Field(
        None, alias="Daylighting:ReferencePoint"
    )
    zone_infiltration_design_flow_rate: Optional[
        Dict[str, ZoneInfiltrationDesignFlowRate]
    ] = Field(None, alias="ZoneInfiltration:DesignFlowRate")
    zone_ventilation_design_flow_rate: Optional[
        Dict[str, ZoneVentilationDesignFlowRate]
    ] = Field(None, alias="ZoneVentilation:DesignFlowRate")
    zone_ventilation_windand_stack_open_area: Optional[
        Dict[str, ZoneVentilationWindandStackOpenArea]
    ] = Field(None, alias="ZoneVentilation:WindandStackOpenArea")
    zone_mixing: Optional[Dict[str, ZoneMixing]] = Field(None, alias="ZoneMixing")
    zone_refrigeration_door_mixing: Optional[
        Dict[str, ZoneRefrigerationDoorMixing]
    ] = Field(None, alias="ZoneRefrigerationDoorMixing")
    exterior_lights: Optional[Dict[str, ExteriorLights]] = Field(
        None, alias="Exterior:Lights"
    )
    exterior_fuel_equipment: Optional[Dict[str, ExteriorFuelEquipment]] = Field(
        None, alias="Exterior:FuelEquipment"
    )
    design_specification_outdoor_air: Optional[
        Dict[str, DesignSpecificationOutdoorAir]
    ] = Field(None, alias="DesignSpecification:OutdoorAir")
    design_specification_zone_air_distribution: Optional[
        Dict[str, DesignSpecificationZoneAirDistribution]
    ] = Field(None, alias="DesignSpecification:ZoneAirDistribution")
    sizing_parameters: Optional[Dict[str, SizingParameters]] = Field(
        None, alias="Sizing:Parameters"
    )
    sizing_zone: Optional[Dict[str, SizingZone]] = Field(None, alias="Sizing:Zone")
    sizing_system: Optional[Dict[str, SizingSystem]] = Field(
        None, alias="Sizing:System"
    )
    sizing_plant: Optional[Dict[str, SizingPlant]] = Field(None, alias="Sizing:Plant")
    zone_control_humidistat: Optional[Dict[str, ZoneControlHumidistat]] = Field(
        None, alias="ZoneControl:Humidistat"
    )
    zone_control_thermostat: Optional[Dict[str, ZoneControlThermostat]] = Field(
        None, alias="ZoneControl:Thermostat"
    )
    thermostat_setpoint_single_heating: Optional[
        Dict[str, ThermostatSetpointSingleHeating]
    ] = Field(None, alias="ThermostatSetpoint:SingleHeating")
    thermostat_setpoint_single_cooling: Optional[
        Dict[str, ThermostatSetpointSingleCooling]
    ] = Field(None, alias="ThermostatSetpoint:SingleCooling")
    thermostat_setpoint_dual_setpoint: Optional[
        Dict[str, ThermostatSetpointDualSetpoint]
    ] = Field(None, alias="ThermostatSetpoint:DualSetpoint")
    zone_hvac_ideal_loads_air_system: Optional[
        Dict[str, ZoneHvacIdealLoadsAirSystem]
    ] = Field(None, alias="ZoneHVAC:IdealLoadsAirSystem")
    zone_hvac_four_pipe_fan_coil: Optional[Dict[str, ZoneHvacFourPipeFanCoil]] = Field(
        None, alias="ZoneHVAC:FourPipeFanCoil"
    )
    zone_hvac_packaged_terminal_air_conditioner: Optional[
        Dict[str, ZoneHvacPackagedTerminalAirConditioner]
    ] = Field(None, alias="ZoneHVAC:PackagedTerminalAirConditioner")
    zone_hvac_energy_recovery_ventilator: Optional[
        Dict[str, ZoneHvacEnergyRecoveryVentilator]
    ] = Field(None, alias="ZoneHVAC:EnergyRecoveryVentilator")
    zone_hvac_energy_recovery_ventilator_controller: Optional[
        Dict[str, ZoneHvacEnergyRecoveryVentilatorController]
    ] = Field(None, alias="ZoneHVAC:EnergyRecoveryVentilator:Controller")
    zone_hvac_unit_heater: Optional[Dict[str, ZoneHvacUnitHeater]] = Field(
        None, alias="ZoneHVAC:UnitHeater"
    )
    zone_hvac_high_temperature_radiant: Optional[
        Dict[str, ZoneHvacHighTemperatureRadiant]
    ] = Field(None, alias="ZoneHVAC:HighTemperatureRadiant")
    air_terminal_single_duct_constant_volume_no_reheat: Optional[
        Dict[str, AirTerminalSingleDuctConstantVolumeNoReheat]
    ] = Field(None, alias="AirTerminal:SingleDuct:ConstantVolume:NoReheat")
    air_terminal_single_duct_vav_reheat: Optional[
        Dict[str, AirTerminalSingleDuctVavReheat]
    ] = Field(None, alias="AirTerminal:SingleDuct:VAV:Reheat")
    zone_hvac_air_distribution_unit: Optional[
        Dict[str, ZoneHvacAirDistributionUnit]
    ] = Field(None, alias="ZoneHVAC:AirDistributionUnit")
    zone_hvac_equipment_list: Optional[Dict[str, ZoneHvacEquipmentList]] = Field(
        None, alias="ZoneHVAC:EquipmentList"
    )
    zone_hvac_equipment_connections: Optional[
        Dict[str, ZoneHvacEquipmentConnections]
    ] = Field(None, alias="ZoneHVAC:EquipmentConnections")
    fan_system_model: Optional[Dict[str, FanSystemModel]] = Field(
        None, alias="Fan:SystemModel"
    )
    fan_constant_volume: Optional[Dict[str, FanConstantVolume]] = Field(
        None, alias="Fan:ConstantVolume"
    )
    fan_variable_volume: Optional[Dict[str, FanVariableVolume]] = Field(
        None, alias="Fan:VariableVolume"
    )
    fan_on_off: Optional[Dict[str, FanOnOff]] = Field(None, alias="Fan:OnOff")
    fan_zone_exhaust: Optional[Dict[str, FanZoneExhaust]] = Field(
        None, alias="Fan:ZoneExhaust"
    )
    coil_cooling_water: Optional[Dict[str, CoilCoolingWater]] = Field(
        None, alias="Coil:Cooling:Water"
    )
    coil_cooling_water_detailed_geometry: Optional[
        Dict[str, CoilCoolingWaterDetailedGeometry]
    ] = Field(None, alias="Coil:Cooling:Water:DetailedGeometry")
    coil_cooling_dx_single_speed: Optional[Dict[str, CoilCoolingDxSingleSpeed]] = Field(
        None, alias="Coil:Cooling:DX:SingleSpeed"
    )
    coil_cooling_dx_two_speed: Optional[Dict[str, CoilCoolingDxTwoSpeed]] = Field(
        None, alias="Coil:Cooling:DX:TwoSpeed"
    )
    coil_cooling_dx_multi_speed: Optional[Dict[str, CoilCoolingDxMultiSpeed]] = Field(
        None, alias="Coil:Cooling:DX:MultiSpeed"
    )
    coil_heating_water: Optional[Dict[str, CoilHeatingWater]] = Field(
        None, alias="Coil:Heating:Water"
    )
    coil_heating_electric: Optional[Dict[str, CoilHeatingElectric]] = Field(
        None, alias="Coil:Heating:Electric"
    )
    coil_heating_fuel: Optional[Dict[str, CoilHeatingFuel]] = Field(
        None, alias="Coil:Heating:Fuel"
    )
    coil_heating_dx_single_speed: Optional[Dict[str, CoilHeatingDxSingleSpeed]] = Field(
        None, alias="Coil:Heating:DX:SingleSpeed"
    )
    coil_cooling_water_to_air_heat_pump_equation_fit: Optional[
        Dict[str, CoilCoolingWaterToAirHeatPumpEquationFit]
    ] = Field(None, alias="Coil:Cooling:WaterToAirHeatPump:EquationFit")
    coil_heating_water_to_air_heat_pump_equation_fit: Optional[
        Dict[str, CoilHeatingWaterToAirHeatPumpEquationFit]
    ] = Field(None, alias="Coil:Heating:WaterToAirHeatPump:EquationFit")
    coil_system_cooling_dx: Optional[Dict[str, CoilSystemCoolingDx]] = Field(
        None, alias="CoilSystem:Cooling:DX"
    )
    humidifier_steam_electric: Optional[Dict[str, HumidifierSteamElectric]] = Field(
        None, alias="Humidifier:Steam:Electric"
    )
    heat_exchanger_air_to_air_sensible_and_latent: Optional[
        Dict[str, HeatExchangerAirToAirSensibleAndLatent]
    ] = Field(None, alias="HeatExchanger:AirToAir:SensibleAndLatent")
    air_loop_hvac_unitary_system: Optional[Dict[str, AirLoopHvacUnitarySystem]] = Field(
        None, alias="AirLoopHVAC:UnitarySystem"
    )
    unitary_system_performance_multispeed: Optional[
        Dict[str, UnitarySystemPerformanceMultispeed]
    ] = Field(None, alias="UnitarySystemPerformance:Multispeed")
    air_loop_hvac_unitary_furnace_heat_cool: Optional[
        Dict[str, AirLoopHvacUnitaryFurnaceHeatCool]
    ] = Field(None, alias="AirLoopHVAC:Unitary:Furnace:HeatCool")
    air_loop_hvac_unitary_heat_cool: Optional[
        Dict[str, AirLoopHvacUnitaryHeatCool]
    ] = Field(None, alias="AirLoopHVAC:UnitaryHeatCool")
    air_loop_hvac_unitary_heat_pump_air_to_air: Optional[
        Dict[str, AirLoopHvacUnitaryHeatPumpAirToAir]
    ] = Field(None, alias="AirLoopHVAC:UnitaryHeatPump:AirToAir")
    air_loop_hvac_unitary_heat_pump_water_to_air: Optional[
        Dict[str, AirLoopHvacUnitaryHeatPumpWaterToAir]
    ] = Field(None, alias="AirLoopHVAC:UnitaryHeatPump:WaterToAir")
    controller_water_coil: Optional[Dict[str, ControllerWaterCoil]] = Field(
        None, alias="Controller:WaterCoil"
    )
    controller_outdoor_air: Optional[Dict[str, ControllerOutdoorAir]] = Field(
        None, alias="Controller:OutdoorAir"
    )
    controller_mechanical_ventilation: Optional[
        Dict[str, ControllerMechanicalVentilation]
    ] = Field(None, alias="Controller:MechanicalVentilation")
    air_loop_hvac_controller_list: Optional[
        Dict[str, AirLoopHvacControllerList]
    ] = Field(None, alias="AirLoopHVAC:ControllerList")
    air_loop_hvac: Optional[Dict[str, AirLoopHvac]] = Field(None, alias="AirLoopHVAC")
    air_loop_hvac_outdoor_air_system_equipment_list: Optional[
        Dict[str, AirLoopHvacOutdoorAirSystemEquipmentList]
    ] = Field(None, alias="AirLoopHVAC:OutdoorAirSystem:EquipmentList")
    air_loop_hvac_outdoor_air_system: Optional[
        Dict[str, AirLoopHvacOutdoorAirSystem]
    ] = Field(None, alias="AirLoopHVAC:OutdoorAirSystem")
    outdoor_air_mixer: Optional[Dict[str, OutdoorAirMixer]] = Field(
        None, alias="OutdoorAir:Mixer"
    )
    air_loop_hvac_zone_splitter: Optional[Dict[str, AirLoopHvacZoneSplitter]] = Field(
        None, alias="AirLoopHVAC:ZoneSplitter"
    )
    air_loop_hvac_supply_path: Optional[Dict[str, AirLoopHvacSupplyPath]] = Field(
        None, alias="AirLoopHVAC:SupplyPath"
    )
    air_loop_hvac_zone_mixer: Optional[Dict[str, AirLoopHvacZoneMixer]] = Field(
        None, alias="AirLoopHVAC:ZoneMixer"
    )
    air_loop_hvac_return_plenum: Optional[Dict[str, AirLoopHvacReturnPlenum]] = Field(
        None, alias="AirLoopHVAC:ReturnPlenum"
    )
    air_loop_hvac_return_path: Optional[Dict[str, AirLoopHvacReturnPath]] = Field(
        None, alias="AirLoopHVAC:ReturnPath"
    )
    branch: Optional[Dict[str, Branch]] = Field(None, alias="Branch")
    branch_list: Optional[Dict[str, BranchList]] = Field(None, alias="BranchList")
    connector_splitter: Optional[Dict[str, ConnectorSplitter]] = Field(
        None, alias="Connector:Splitter"
    )
    connector_mixer: Optional[Dict[str, ConnectorMixer]] = Field(
        None, alias="Connector:Mixer"
    )
    connector_list: Optional[Dict[str, ConnectorList]] = Field(
        None, alias="ConnectorList"
    )
    node_list: Optional[Dict[str, NodeList]] = Field(None, alias="NodeList")
    outdoor_air_node: Optional[Dict[str, OutdoorAirNode]] = Field(
        None, alias="OutdoorAir:Node"
    )
    outdoor_air_node_list: Optional[Dict[str, OutdoorAirNodeList]] = Field(
        None, alias="OutdoorAir:NodeList"
    )
    pipe_adiabatic: Optional[Dict[str, PipeAdiabatic]] = Field(
        None, alias="Pipe:Adiabatic"
    )
    pump_variable_speed: Optional[Dict[str, PumpVariableSpeed]] = Field(
        None, alias="Pump:VariableSpeed"
    )
    pump_constant_speed: Optional[Dict[str, PumpConstantSpeed]] = Field(
        None, alias="Pump:ConstantSpeed"
    )
    headered_pumps_variable_speed: Optional[
        Dict[str, HeaderedPumpsVariableSpeed]
    ] = Field(None, alias="HeaderedPumps:VariableSpeed")
    boiler_hot_water: Optional[Dict[str, BoilerHotWater]] = Field(
        None, alias="Boiler:HotWater"
    )
    chiller_electric_ashrae205: Optional[Dict[str, ChillerElectricAshrae205]] = Field(
        None, alias="Chiller:Electric:ASHRAE205"
    )
    chiller_electric_eir: Optional[Dict[str, ChillerElectricEir]] = Field(
        None, alias="Chiller:Electric:EIR"
    )
    chiller_electric_reformulated_eir: Optional[
        Dict[str, ChillerElectricReformulatedEir]
    ] = Field(None, alias="Chiller:Electric:ReformulatedEIR")
    cooling_tower_single_speed: Optional[Dict[str, CoolingTowerSingleSpeed]] = Field(
        None, alias="CoolingTower:SingleSpeed"
    )
    cooling_tower_variable_speed: Optional[
        Dict[str, CoolingTowerVariableSpeed]
    ] = Field(None, alias="CoolingTower:VariableSpeed")
    evaporative_fluid_cooler_two_speed: Optional[
        Dict[str, EvaporativeFluidCoolerTwoSpeed]
    ] = Field(None, alias="EvaporativeFluidCooler:TwoSpeed")
    fluid_cooler_two_speed: Optional[Dict[str, FluidCoolerTwoSpeed]] = Field(
        None, alias="FluidCooler:TwoSpeed"
    )
    heat_exchanger_fluid_to_fluid: Optional[
        Dict[str, HeatExchangerFluidToFluid]
    ] = Field(None, alias="HeatExchanger:FluidToFluid")
    water_heater_mixed: Optional[Dict[str, WaterHeaterMixed]] = Field(
        None, alias="WaterHeater:Mixed"
    )
    plant_loop: Optional[Dict[str, PlantLoop]] = Field(None, alias="PlantLoop")
    condenser_loop: Optional[Dict[str, CondenserLoop]] = Field(
        None, alias="CondenserLoop"
    )
    plant_equipment_list: Optional[Dict[str, PlantEquipmentList]] = Field(
        None, alias="PlantEquipmentList"
    )
    condenser_equipment_list: Optional[Dict[str, CondenserEquipmentList]] = Field(
        None, alias="CondenserEquipmentList"
    )
    plant_equipment_operation_cooling_load: Optional[
        Dict[str, PlantEquipmentOperationCoolingLoad]
    ] = Field(None, alias="PlantEquipmentOperation:CoolingLoad")
    plant_equipment_operation_heating_load: Optional[
        Dict[str, PlantEquipmentOperationHeatingLoad]
    ] = Field(None, alias="PlantEquipmentOperation:HeatingLoad")
    plant_equipment_operation_component_setpoint: Optional[
        Dict[str, PlantEquipmentOperationComponentSetpoint]
    ] = Field(None, alias="PlantEquipmentOperation:ComponentSetpoint")
    plant_equipment_operation_schemes: Optional[
        Dict[str, PlantEquipmentOperationSchemes]
    ] = Field(None, alias="PlantEquipmentOperationSchemes")
    condenser_equipment_operation_schemes: Optional[
        Dict[str, CondenserEquipmentOperationSchemes]
    ] = Field(None, alias="CondenserEquipmentOperationSchemes")
    energy_management_system_sensor: Optional[
        Dict[str, EnergyManagementSystemSensor]
    ] = Field(None, alias="EnergyManagementSystem:Sensor")
    energy_management_system_actuator: Optional[
        Dict[str, EnergyManagementSystemActuator]
    ] = Field(None, alias="EnergyManagementSystem:Actuator")
    energy_management_system_program_calling_manager: Optional[
        Dict[str, EnergyManagementSystemProgramCallingManager]
    ] = Field(None, alias="EnergyManagementSystem:ProgramCallingManager")
    energy_management_system_program: Optional[
        Dict[str, EnergyManagementSystemProgram]
    ] = Field(None, alias="EnergyManagementSystem:Program")
    energy_management_system_global_variable: Optional[
        Dict[str, EnergyManagementSystemGlobalVariable]
    ] = Field(None, alias="EnergyManagementSystem:GlobalVariable")
    energy_management_system_output_variable: Optional[
        Dict[str, EnergyManagementSystemOutputVariable]
    ] = Field(None, alias="EnergyManagementSystem:OutputVariable")
    energy_management_system_internal_variable: Optional[
        Dict[str, EnergyManagementSystemInternalVariable]
    ] = Field(None, alias="EnergyManagementSystem:InternalVariable")
    availability_manager_scheduled: Optional[
        Dict[str, AvailabilityManagerScheduled]
    ] = Field(None, alias="AvailabilityManager:Scheduled")
    availability_manager_night_cycle: Optional[
        Dict[str, AvailabilityManagerNightCycle]
    ] = Field(None, alias="AvailabilityManager:NightCycle")
    availability_manager_assignment_list: Optional[
        Dict[str, AvailabilityManagerAssignmentList]
    ] = Field(None, alias="AvailabilityManagerAssignmentList")
    setpoint_manager_scheduled: Optional[Dict[str, SetpointManagerScheduled]] = Field(
        None, alias="SetpointManager:Scheduled"
    )
    setpoint_manager_scheduled_dual_setpoint: Optional[
        Dict[str, SetpointManagerScheduledDualSetpoint]
    ] = Field(None, alias="SetpointManager:Scheduled:DualSetpoint")
    setpoint_manager_outdoor_air_reset: Optional[
        Dict[str, SetpointManagerOutdoorAirReset]
    ] = Field(None, alias="SetpointManager:OutdoorAirReset")
    setpoint_manager_single_zone_reheat: Optional[
        Dict[str, SetpointManagerSingleZoneReheat]
    ] = Field(None, alias="SetpointManager:SingleZone:Reheat")
    setpoint_manager_single_zone_heating: Optional[
        Dict[str, SetpointManagerSingleZoneHeating]
    ] = Field(None, alias="SetpointManager:SingleZone:Heating")
    setpoint_manager_single_zone_cooling: Optional[
        Dict[str, SetpointManagerSingleZoneCooling]
    ] = Field(None, alias="SetpointManager:SingleZone:Cooling")
    setpoint_manager_single_zone_humidity_minimum: Optional[
        Dict[str, SetpointManagerSingleZoneHumidityMinimum]
    ] = Field(None, alias="SetpointManager:SingleZone:Humidity:Minimum")
    setpoint_manager_single_zone_humidity_maximum: Optional[
        Dict[str, SetpointManagerSingleZoneHumidityMaximum]
    ] = Field(None, alias="SetpointManager:SingleZone:Humidity:Maximum")
    setpoint_manager_mixed_air: Optional[Dict[str, SetpointManagerMixedAir]] = Field(
        None, alias="SetpointManager:MixedAir"
    )
    setpoint_manager_outdoor_air_pretreat: Optional[
        Dict[str, SetpointManagerOutdoorAirPretreat]
    ] = Field(None, alias="SetpointManager:OutdoorAirPretreat")
    setpoint_manager_multi_zone_humidity_minimum: Optional[
        Dict[str, SetpointManagerMultiZoneHumidityMinimum]
    ] = Field(None, alias="SetpointManager:MultiZone:Humidity:Minimum")
    setpoint_manager_multi_zone_humidity_maximum: Optional[
        Dict[str, SetpointManagerMultiZoneHumidityMaximum]
    ] = Field(None, alias="SetpointManager:MultiZone:Humidity:Maximum")
    setpoint_manager_follow_outdoor_air_temperature: Optional[
        Dict[str, SetpointManagerFollowOutdoorAirTemperature]
    ] = Field(None, alias="SetpointManager:FollowOutdoorAirTemperature")
    setpoint_manager_return_temperature_chilled_water: Optional[
        Dict[str, SetpointManagerReturnTemperatureChilledWater]
    ] = Field(None, alias="SetpointManager:ReturnTemperature:ChilledWater")
    setpoint_manager_return_temperature_hot_water: Optional[
        Dict[str, SetpointManagerReturnTemperatureHotWater]
    ] = Field(None, alias="SetpointManager:ReturnTemperature:HotWater")
    refrigeration_case: Optional[Dict[str, RefrigerationCase]] = Field(
        None, alias="Refrigeration:Case"
    )
    refrigeration_compressor_rack: Optional[
        Dict[str, RefrigerationCompressorRack]
    ] = Field(None, alias="Refrigeration:CompressorRack")
    refrigeration_case_and_walk_in_list: Optional[
        Dict[str, RefrigerationCaseAndWalkInList]
    ] = Field(None, alias="Refrigeration:CaseAndWalkInList")
    refrigeration_condenser_air_cooled: Optional[
        Dict[str, RefrigerationCondenserAirCooled]
    ] = Field(None, alias="Refrigeration:Condenser:AirCooled")
    refrigeration_compressor: Optional[Dict[str, RefrigerationCompressor]] = Field(
        None, alias="Refrigeration:Compressor"
    )
    refrigeration_compressor_list: Optional[
        Dict[str, RefrigerationCompressorList]
    ] = Field(None, alias="Refrigeration:CompressorList")
    refrigeration_system: Optional[Dict[str, RefrigerationSystem]] = Field(
        None, alias="Refrigeration:System"
    )
    refrigeration_air_chiller: Optional[Dict[str, RefrigerationAirChiller]] = Field(
        None, alias="Refrigeration:AirChiller"
    )
    zone_hvac_refrigeration_chiller_set: Optional[
        Dict[str, ZoneHvacRefrigerationChillerSet]
    ] = Field(None, alias="ZoneHVAC:RefrigerationChillerSet")
    electric_load_center_transformer: Optional[
        Dict[str, ElectricLoadCenterTransformer]
    ] = Field(None, alias="ElectricLoadCenter:Transformer")
    water_use_equipment: Optional[Dict[str, WaterUseEquipment]] = Field(
        None, alias="WaterUse:Equipment"
    )
    water_use_connections: Optional[Dict[str, WaterUseConnections]] = Field(
        None, alias="WaterUse:Connections"
    )
    matrix_two_dimension: Optional[Dict[str, MatrixTwoDimension]] = Field(
        None, alias="Matrix:TwoDimension"
    )
    curve_linear: Optional[Dict[str, CurveLinear]] = Field(None, alias="Curve:Linear")
    curve_quad_linear: Optional[Dict[str, CurveQuadLinear]] = Field(
        None, alias="Curve:QuadLinear"
    )
    curve_quint_linear: Optional[Dict[str, CurveQuintLinear]] = Field(
        None, alias="Curve:QuintLinear"
    )
    curve_quadratic: Optional[Dict[str, CurveQuadratic]] = Field(
        None, alias="Curve:Quadratic"
    )
    curve_cubic: Optional[Dict[str, CurveCubic]] = Field(None, alias="Curve:Cubic")
    curve_quartic: Optional[Dict[str, CurveQuartic]] = Field(
        None, alias="Curve:Quartic"
    )
    curve_bicubic: Optional[Dict[str, CurveBicubic]] = Field(
        None, alias="Curve:Bicubic"
    )
    curve_biquadratic: Optional[Dict[str, CurveBiquadratic]] = Field(
        None, alias="Curve:Biquadratic"
    )
    table_independent_variable: Optional[Dict[str, TableIndependentVariable]] = Field(
        None, alias="Table:IndependentVariable"
    )
    table_independent_variable_list: Optional[
        Dict[str, TableIndependentVariableList]
    ] = Field(None, alias="Table:IndependentVariableList")
    table_lookup: Optional[Dict[str, TableLookup]] = Field(None, alias="Table:Lookup")
    fluid_properties_name: Optional[Dict[str, FluidPropertiesName]] = Field(
        None, alias="FluidProperties:Name"
    )
    fluid_properties_glycol_concentration: Optional[
        Dict[str, FluidPropertiesGlycolConcentration]
    ] = Field(None, alias="FluidProperties:GlycolConcentration")
    fluid_properties_temperatures: Optional[
        Dict[str, FluidPropertiesTemperatures]
    ] = Field(None, alias="FluidProperties:Temperatures")
    fluid_properties_saturated: Optional[Dict[str, FluidPropertiesSaturated]] = Field(
        None, alias="FluidProperties:Saturated"
    )
    fluid_properties_superheated: Optional[
        Dict[str, FluidPropertiesSuperheated]
    ] = Field(None, alias="FluidProperties:Superheated")
    utility_cost_tariff: Optional[Dict[str, UtilityCostTariff]] = Field(
        None, alias="UtilityCost:Tariff"
    )
    utility_cost_qualify: Optional[Dict[str, UtilityCostQualify]] = Field(
        None, alias="UtilityCost:Qualify"
    )
    utility_cost_charge_simple: Optional[Dict[str, UtilityCostChargeSimple]] = Field(
        None, alias="UtilityCost:Charge:Simple"
    )
    utility_cost_charge_block: Optional[Dict[str, UtilityCostChargeBlock]] = Field(
        None, alias="UtilityCost:Charge:Block"
    )
    utility_cost_variable: Optional[Dict[str, UtilityCostVariable]] = Field(
        None, alias="UtilityCost:Variable"
    )
    output_variable_dictionary: Optional[Dict[str, OutputVariableDictionary]] = Field(
        None, alias="Output:VariableDictionary"
    )
    output_surfaces_list: Optional[Dict[str, OutputSurfacesList]] = Field(
        None, alias="Output:Surfaces:List"
    )
    output_surfaces_drawing: Optional[Dict[str, OutputSurfacesDrawing]] = Field(
        None, alias="Output:Surfaces:Drawing"
    )
    output_constructions: Optional[Dict[str, OutputConstructions]] = Field(
        None, alias="Output:Constructions"
    )
    output_energy_management_system: Optional[
        Dict[str, OutputEnergyManagementSystem]
    ] = Field(None, alias="Output:EnergyManagementSystem")
    output_table_summary_reports: Optional[
        Dict[str, OutputTableSummaryReports]
    ] = Field(None, alias="Output:Table:SummaryReports")
    output_table_time_bins: Optional[Dict[str, OutputTableTimeBins]] = Field(
        None, alias="Output:Table:TimeBins"
    )
    output_table_monthly: Optional[Dict[str, OutputTableMonthly]] = Field(
        None, alias="Output:Table:Monthly"
    )
    output_control_table_style: Optional[Dict[str, OutputControlTableStyle]] = Field(
        None, alias="OutputControl:Table:Style"
    )
    output_control_reporting_tolerances: Optional[
        Dict[str, OutputControlReportingTolerances]
    ] = Field(None, alias="OutputControl:ReportingTolerances")
    output_variable: Optional[Dict[str, OutputVariable]] = Field(
        None, alias="Output:Variable"
    )
    output_meter: Optional[Dict[str, OutputMeter]] = Field(None, alias="Output:Meter")
    output_meter_meter_file_only: Optional[Dict[str, OutputMeterMeterFileOnly]] = Field(
        None, alias="Output:Meter:MeterFileOnly"
    )
    meter_custom: Optional[Dict[str, MeterCustom]] = Field(None, alias="Meter:Custom")
    meter_custom_decrement: Optional[Dict[str, MeterCustomDecrement]] = Field(
        None, alias="Meter:CustomDecrement"
    )
    output_control_files: Optional[Dict[str, OutputControlFiles]] = Field(
        None, alias="OutputControl:Files"
    )
    output_json: Optional[Dict[str, OutputJson1]] = Field(None, alias="Output:JSON")
    output_sq_lite: Optional[Dict[str, OutputSqLite]] = Field(
        None, alias="Output:SQLite"
    )
    output_environmental_impact_factors: Optional[
        Dict[str, OutputEnvironmentalImpactFactors]
    ] = Field(None, alias="Output:EnvironmentalImpactFactors")
    environmental_impact_factors: Optional[
        Dict[str, EnvironmentalImpactFactors]
    ] = Field(None, alias="EnvironmentalImpactFactors")
    fuel_factors: Optional[Dict[str, FuelFactors]] = Field(None, alias="FuelFactors")
    output_diagnostics: Optional[Dict[str, OutputDiagnostics]] = Field(
        None, alias="Output:Diagnostics"
    )
